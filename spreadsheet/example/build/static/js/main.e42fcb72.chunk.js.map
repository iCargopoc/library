{"version":3,"sources":["../../src/common/extDataGrid.js","../../src/functions/DatePicker.js","../../src/common/ErrorConstants.js","../../src/common/ErrorMessage.js","../../src/overlays/column_chooser/ItemTypes.js","../../src/overlays/column_chooser/columnItem.js","../../src/overlays/column_chooser/columnsList.js","../../src/overlays/column_chooser/Chooser.js","../../src/overlays/sorting/ItemTypes.js","../../src/overlays/sorting/SortItem.js","../../src/overlays/sorting/SortingList.js","../../src/overlays/sorting/Sorting.js","../../src/overlays/export_data/ExportData.js","../../src/index.js","../../src/utilities/utils.js","App.js","index.js"],"names":["componentDidMount","this","document","window","props","componentWillUnmount","React","constructor","super","value","Date","getInputNode","bind","getValue","onValueChanged","updated","date","state","Intl","year","month","day","dateTimeFormat","column","ev","render","type","ref","onChange","ErrorMessage","useState","useEffect","setStatus","status","id","className","role","icon","onClick","e","ItemTypes","style","cursor","ColumnItem","findColumn","originalIndex","useDrag","item","collect","monitor","isDragging","end","dropResult","moveColumn","droppedId","useDrop","accept","canDrop","hover","draggedId","overIndex","index","opacity","node","drag","drop","ColumnsList","atIndex","setColumns","update","columns","$splice","values","temp","c","display","flexWrap","key","text","columnReorderEntityList","map","leftPinnedColumList","isAllSelected","existingColumnReorderEntityList","isExistingAllSelect","typeToBeAdded","existingLeftPinnedList","indexOfInsertion","columnSelectList","findIndex","searchKey","String","existingList","filtererdColumnReorderList","colsList","faAlignJustify","checked","includes","disabled","maxLeftPinnedColumn","reArrangeLeftPinnedColumn","columHeaderName","subItem","reordered","setWrapperRef","handleClickOutside","event","wrapperRef","contains","placeholder","filterColumnReorderList","length","addToColumnReorderEntityList","closeColumnReOrdering","color","backend","options","enableMouseEvents","columnsArray","createColumnsArrayFromProps","handleReorderList","resetColumnReorderList","updateTableAsPerRowChooser","Card","findCard","moveCard","SortingList","setCards","cards","card","rowList","existingSortingOrderList","sortBy","columnFieldValue","order","sortOn","sortingOrderList","i","JSON","rowsValue","row","name","captureSortingFeildValues","title","copy","remove","sortingKey","unique","showError","some","element","setState","errorMessage","setTableAsPerSortingParams","reOrderedIndexList","rows","undefined","sortingParamsObjectList","closeSorting","handleReorderListOfSort","sortsArray","clickTag","add","clearAll","updateTableAsPerSortCondition","downLaodFileType","columnEntityList","existingColumnEntityList","columnVlaueList","keys","Object","filteredColumnVal","columnName","downloadCSVFile","doc","headers","dataValues","content","startY","head","body","wb","Sheets","data","XLSX","SheetNames","excelBuffer","bookType","Blob","FileSaver","fileName","filteredRows","columnsList","filter","columnValueList","columnLength","fileLength","warning","filteredRow","selectDownLoadType","exportValidation","columnSearchLogic","addToColumnEntityList","closeExport","DraggableContainer","require","DraggableHeader","DropDownEditor","selectors","Data","swapList","swapSortList","NumericFilter","startIdx","newRows","botRight","range","topLeft","rowIdx","col","rowGetter","str","pasteData","rowData","j","args","colIdx","idx","warningStatus","action","formulaAppliedCols","obj","operation","a","b","Number","Math","console","applyFormula","filteringRows","tempRows","selectedIndexes","concat","r","rowIndexes","junk","getrows","count","filters","sortColumn","sortDirection","source","target","stateCopy","columnSourceIndex","columnTargetIndex","emptyColumns","reorderedColumns","reorderedSwap","inComingColumnsHeaderList","pinnedColumnsList","existingColumnsHeaderList","rePositionedArray","singleHeaderOneList","array_move","headerItem","arr","old_index","new_index","k","headerNameList","existingPinnedHeadersList","columnReorderingComponent","handleheaderNameList","searchValue","columnField","sortingPanelComponent","handleTableSortSwap","clearAllSortingParams","sortingOrderSwapList","exportComponent","tableSortList","existingRows","sortingOrderNameList","nameOfItem","rowItem","toCamelCase","primer","reverse","existingSortingOrderSwapList","stringOfItemIndex","sort_by","$1","airportCodes","height","displayNoRows","searchIconDisplay","handleSearchValue","clearSearchValue","handleFilterChange","componentDidUpdate","prevProps","resizeEvent","componentWillReceiveProps","textValue","getValidFilterValues","columnId","sortingPanel","faSortAmountDown","columnReorderingPannel","faColumns","exportColumnData","closeWarningStatus","onHeaderDrop","toolbar","enableFilter","columnKey","minHeight","rowsCount","onGridRowsUpdated","enableCellSelect","onClearFilters","onColumnResize","width","onAddFilter","rowSelection","showCheckbox","enableShiftSelect","onRowsSelected","onRowsDeselected","selectBy","indexes","onGridSort","sortRows","default_cmp","getCmpFunc","cmp","fields","n_fields","arguments","field","A","B","l","result","App","setData","CargoData","draggable","editor","formulaApplicable","sortable","resizable","filterable","filterType","airportCodeList","globalSearchLogic","updatedRows","toLowerCase","flightno","segmentfrom","segmentto","flightModel","bodyType","startTime","endTime","additionalStatus","timeStatus","weightpercentage","volumevalue","uldposition1","uldvalue1","uldposition2","uldvalue2","uldposition3","weightvalue","uldvalue3","uldposition4","revenue","yeild","sr","queuedBookingSR","queuedBookingvolume","handleWarningStatus","updateCellData","fromRow","toRow","updateType","log","selectBulkData","selectedRows","gridHeight","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.e42fcb72.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDataGrid from \"react-data-grid\";\nimport { Toolbar, Data, Filters } from \"react-data-grid-addons\";\n\nclass ExtDataGrid extends ReactDataGrid {\n  componentDidMount() {\n    this._mounted = true;\n    this.dataGridComponent = document.getElementsByClassName(\n      \"react-grid-Viewport\"\n    )[0]; //assumes only one react datagrid component exists\n    window.addEventListener(\"resize\", this.metricsUpdated);\n    if (this.props.cellRangeSelection) {\n      this.dataGridComponent.addEventListener(\"mouseup\", this.onWindowMouseUp);\n    }\n    this.metricsUpdated();\n  }\n\n  componentWillUnmount() {\n    this._mounted = false;\n    window.removeEventListener(\"resize\", this.metricsUpdated);\n    this.dataGridComponent.removeEventListener(\"mouseup\", this.onWindowMouseUp);\n  }\n}\n\nexport default ExtDataGrid;\n","import React from 'react';\n\nexport default class DatePicker extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        value: new Date(),\n      };\n      //the variable to store component reference\n      this.input = null;\n  \n      this.getInputNode = this.getInputNode.bind(this);\n      this.getValue = this.getValue.bind(this);\n      this.onValueChanged = this.onValueChanged.bind(this);\n    }\n  \n    //returning the component with the reference, input\n    getInputNode() {\n      return this.input;\n    }\n    //returning updated object with the date value in the required format\n    getValue() {\n      var updated = {};\n      let date;\n      date = new Date(this.state.value);\n      const dateTimeFormat = new Intl.DateTimeFormat(\"en-US\", { year: \"numeric\", month: \"short\", day: \"2-digit\" });\n      const [{ value: month }, , { value: day }, , { value: year }] = dateTimeFormat.formatToParts(date);\n      updated[this.props.column.key] = `${day}-${month}-${year}`;\n      return updated;\n  \n    }\n  \n    onValueChanged(ev) {\n      this.setState({ value: ev.target.value });\n    }\n  \n    render() {\n      return (\n        <div>\n          <input\n            type=\"date\"\n            ref={(ref) => {\n              this.input = ref;\n            }}\n            value={this.state.value}\n            onChange={this.onValueChanged}\n          />\n        </div>\n      );\n    }\n  }","export const SEARCH_NOT_FOUNT_ERROR = \"No Records found!\";\r\n","import React, { useState, useEffect } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons\";\nimport { SEARCH_NOT_FOUNT_ERROR } from \"./ErrorConstants\";\n\nconst ErrorMessage = (props) => {\n\n  const [status, setStatus] = useState(props.status);\n  useEffect(\n    () => {\n      setStatus(props.status)\n    }\n    , [props.status]);\n  if (status === \"invalid\") {\n    return (\n      <div id=\"errorMsg\">\n        <div className=\"alert alert-danger\" role=\"alert\">\n          {SEARCH_NOT_FOUNT_ERROR}\n        </div>\n        <div className=\"notification-close\" >\n          <FontAwesomeIcon icon={faTimes}\n            onClick={(e) => {\n              props.closeWarningStatus();\n              props.clearSearchValue();\n            }} />\n        </div>\n      </div>\n    );\n  } else return <div></div>;\n};\nexport default ErrorMessage;\n","export const ItemTypes = {\r\n    COLUMN: \"column\"\r\n};\r\n","import React from \"react\";\r\nimport { useDrag, useDrop } from \"react-dnd\";\r\nimport { ItemTypes } from \"./ItemTypes\";\r\n\r\nconst style = {\r\n\tcursor: \"move\",\r\n};\r\n\r\nconst ColumnItem = ({ id, text, moveColumn, findColumn }) => {\r\n\tconst originalIndex = findColumn(id).index;\r\n\r\n\tconst [{ isDragging }, drag] = useDrag({\r\n\t\titem: { type: ItemTypes.COLUMN, id, originalIndex },\r\n\t\tcollect: (monitor) => ({\r\n\t\t\tisDragging: monitor.isDragging(),\r\n\t\t}),\r\n\t\tend: (dropResult, monitor) => {\r\n\t\t\tconst { id: droppedId, originalIndex } = monitor.getItem();\r\n\t\t\tconst didDrop = monitor.didDrop();\r\n\t\t\tif (!didDrop) {\r\n\t\t\t\tmoveColumn(droppedId, originalIndex);\r\n\t\t\t}\r\n\t\t},\r\n\t});\r\n\r\n\tconst [, drop] = useDrop({\r\n\t\taccept: ItemTypes.COLUMN,\r\n\t\tcanDrop: () => false,\r\n\t\thover({ id: draggedId }) {\r\n\t\t\tif (draggedId !== id) {\r\n\t\t\t\tconst { index: overIndex } = findColumn(id);\r\n\t\t\t\tmoveColumn(draggedId, overIndex);\r\n\t\t\t}\r\n\t\t},\r\n\t});\r\n\r\n\tconst opacity = isDragging ? 0.1 : 1;\r\n\r\n\treturn (\r\n\t\t<div ref={(node) => drag(drop(node))} style={{ ...style, opacity }}>\r\n\t\t\t{text}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default ColumnItem;\r\n","import React, { useState } from \"react\";\r\nimport { useDrop } from \"react-dnd\";\r\nimport update from \"immutability-helper\";\r\nimport { ItemTypes } from \"./ItemTypes\";\r\nimport ColumnItem from \"./columnItem\";\r\n\r\nconst ColumnsList = (props) => {\r\n\tconst [columns, setColumns] = useState([...props.columnsArray]);\r\n\r\n\tconst moveColumn = (id, atIndex) => {\r\n\r\n\t\tconst { column, index } = findColumn(id);\r\n\t\tsetColumns(\r\n\t\t\tupdate(columns, {\r\n\t\t\t\t$splice: [\r\n\t\t\t\t\t[index, 1],\r\n\t\t\t\t\t[atIndex, 0, column],\r\n\t\t\t\t],\r\n\t\t\t})\r\n\t\t);\r\n\t\tlet values = [];\r\n\t\tlet temp = [];\r\n\t\ttemp = update(columns, {\r\n\t\t\t$splice: [\r\n\t\t\t\t[index, 1],\r\n\t\t\t\t[atIndex, 0, column],\r\n\t\t\t],\r\n\t\t})\r\n\t\ttemp.forEach((item) => {\r\n\t\t\tvalues.push(item.id)\r\n\t\t})\r\n\t\tprops.handleReorderList(values);\r\n\t};\r\n\r\n\tconst findColumn = (id) => {\r\n\t\tconst column = columns.filter((c) => `${c.id}` === id)[0];\r\n\t\treturn {\r\n\t\t\tcolumn,\r\n\t\t\tindex: columns.indexOf(column),\r\n\t\t};\r\n\t};\r\n\r\n\tconst [, drop] = useDrop({ accept: ItemTypes.COLUMN });\r\n\r\n\tReact.useEffect(() => {\r\n\t\tsetColumns(props.columnsArray);\r\n\t}, [props.columnsArray]);\r\n\r\n\treturn (\r\n\t\t<React.Fragment>\r\n\t\t\t<div ref={drop} style={{ display: \"flex\", flexWrap: \"wrap\" }}>\r\n\t\t\t\t{columns.map((column) => (\r\n\t\t\t\t\t<ColumnItem\r\n\t\t\t\t\t\tkey={column.id}\r\n\t\t\t\t\t\tid={`${column.id}`}\r\n\t\t\t\t\t\ttext={column.text}\r\n\t\t\t\t\t\tmoveColumn={moveColumn}\r\n\t\t\t\t\t\tfindColumn={findColumn}\r\n\t\t\t\t\t/>\r\n\t\t\t\t))}\r\n\t\t\t</div>\r\n\t\t</React.Fragment>\r\n\t);\r\n};\r\n\r\nexport default ColumnsList;\r\n","import React from \"react\";\nimport { DndProvider } from \"react-dnd\";\nimport { TouchBackend } from \"react-dnd-touch-backend\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTimes, faAlignJustify } from \"@fortawesome/free-solid-svg-icons\";\nimport ColumnsList from \"./columnsList\";\n\nclass ColumnReordering extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      columnReorderEntityList: this.props.headerKeys,\n      columnSelectList: this.props.columns.map((item) => item.name),\n      leftPinnedColumList: this.props.existingPinnedHeadersList,\n      isAllSelected: true,\n      maxLeftPinnedColumn: this.props.maxLeftPinnedColumn,\n    };\n    this.setWrapperRef = this.setWrapperRef.bind(this);\n    this.handleClickOutside = this.handleClickOutside.bind(this);\n  }\n  componentDidMount() {\n    document.addEventListener(\"mousedown\", this.handleClickOutside);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"mousedown\", this.handleClickOutside);\n  }\n\n  setWrapperRef(node) {\n    this.wrapperRef = node;\n  }\n\n  handleClickOutside(event) {\n    if (this.wrapperRef && !this.wrapperRef.contains(event.target)) {\n      this.props.closeColumnReOrdering();\n    }\n  }\n\n  /**\n   * Method to reset the coloumn list onClick of Reset button\n   */\n  resetColumnReorderList = () => {\n    this.setState({\n      columnReorderEntityList: this.props.columns.map((item) => item.name),\n      leftPinnedColumList: [],\n      isAllSelected: true,\n    });\n  };\n\n  /**\n   * Method to Select all options in the coloumn list onClick of Select All button\n   */\n  selectAllToColumnReOrderList = () => {\n    this.resetColumnReorderList();\n    var existingColumnReorderEntityList = this.state.columnReorderEntityList;\n    var isExistingAllSelect = this.state.isAllSelected;\n    if (!isExistingAllSelect) {\n      existingColumnReorderEntityList = this.props.columns.map(\n        (item) => item.name\n      );\n      isExistingAllSelect = true;\n    } else {\n      existingColumnReorderEntityList = [];\n      isExistingAllSelect = false;\n    }\n    this.setState({\n      columnReorderEntityList: existingColumnReorderEntityList,\n      isAllSelected: isExistingAllSelect,\n      leftPinnedColumList: [],\n    });\n  };\n\n  /**\n   * Method To add a column to columnReorderEntityList when selected.\n   * @param {String} typeToBeAdded\n   */\n  addToColumnReorderEntityList = (typeToBeAdded) => {\n    var existingColumnReorderEntityList = this.state.columnReorderEntityList;\n    var existingLeftPinnedList = this.state.leftPinnedColumList;\n    if (!existingColumnReorderEntityList.includes(typeToBeAdded)) {\n      var indexOfInsertion = this.state.columnSelectList.findIndex(\n        (item) => item === typeToBeAdded\n      );\n      while (indexOfInsertion > 0) {\n        if (\n          existingColumnReorderEntityList.includes(\n            this.state.columnSelectList[indexOfInsertion - 1]\n          )\n        ) {\n          if (\n            !existingLeftPinnedList.includes(\n              this.state.columnSelectList[indexOfInsertion - 1]\n            )\n          ) {\n            indexOfInsertion = existingColumnReorderEntityList.findIndex(\n              (item) =>\n                item === this.state.columnSelectList[indexOfInsertion - 1]\n            );\n            indexOfInsertion = indexOfInsertion + 1;\n            break;\n          } else {\n            indexOfInsertion = indexOfInsertion - 1;\n          }\n        } else {\n          indexOfInsertion = indexOfInsertion - 1;\n        }\n      }\n      existingColumnReorderEntityList.splice(\n        indexOfInsertion,\n        0,\n        typeToBeAdded\n      );\n    } else {\n      existingColumnReorderEntityList = existingColumnReorderEntityList.filter(\n        (item) => {\n          if (item !== typeToBeAdded) return item;\n        }\n      );\n      if (existingLeftPinnedList.includes(typeToBeAdded)) {\n        existingLeftPinnedList = existingLeftPinnedList.filter(\n          (item) => item !== typeToBeAdded\n        );\n      }\n    }\n    this.setState({\n      columnReorderEntityList: existingColumnReorderEntityList,\n      isAllSelected: false,\n      leftPinnedColumList: existingLeftPinnedList,\n    });\n  };\n\n  /**\n   * Method to handle the like-search on key stroke.\n   * @param {Event} e\n   */\n  filterColumnReorderList = (e) => {\n    var searchKey = String(e.target.value).toLowerCase();\n    var existingList = this.props.columns.map((item) => item.name);\n    let filtererdColumnReorderList = [];\n    if (searchKey.length > 0) {\n      filtererdColumnReorderList = existingList.filter((item) => {\n        return item.toLowerCase().includes(searchKey);\n      });\n    } else {\n      filtererdColumnReorderList = this.props.columns.map((item) => item.name);\n    }\n    this.setState({\n      columnSelectList: filtererdColumnReorderList,\n    });\n  };\n\n  createColumnsArrayFromProps = (colsList) => {\n    return colsList.map((item) => {\n      return {\n        id: item,\n        text: (\n          <div className=\"column__reorder\" key={item}>\n            <div className=\"\">\n              <FontAwesomeIcon icon={faAlignJustify}></FontAwesomeIcon>\n            </div>\n            <div className=\"column__reorder__name\">{item}</div>\n            <div className=\"column__wrap\">\n              <div className=\"column__checkbox\">\n                <input\n                  type=\"checkbox\"\n                  checked={this.state.leftPinnedColumList.includes(item)}\n                  disabled={\n                    this.state.maxLeftPinnedColumn -\n                      this.state.leftPinnedColumList.length <=\n                      0\n                      ? this.state.leftPinnedColumList.includes(item)\n                        ? false\n                        : true\n                      : false\n                  }\n                  onChange={() => this.reArrangeLeftPinnedColumn(item)}\n                ></input>\n              </div>\n              <div className=\"column__txt\">Pin Left</div>\n            </div>\n          </div>\n        ),\n      };\n    });\n  };\n\n  /**\n   * Method to handle the position of columns Names when left pinned in coloumn selector view.\n   * @param {String} columHeaderName\n   */\n  reArrangeLeftPinnedColumn = (columHeaderName) => {\n    var existingLeftPinnedList = this.state.leftPinnedColumList;\n    var existingColumnReorderEntityList = this.state.columnReorderEntityList;\n    if (!existingLeftPinnedList.includes(columHeaderName)) {\n      existingLeftPinnedList.unshift(columHeaderName);\n    } else {\n      existingLeftPinnedList = existingLeftPinnedList.filter(\n        (item) => item !== columHeaderName\n      );\n    }\n    this.setState({\n      leftPinnedColumList: existingLeftPinnedList,\n    });\n\n    existingLeftPinnedList.map((item) => {\n      existingColumnReorderEntityList = existingColumnReorderEntityList.filter(\n        (subItem) => subItem !== item\n      );\n      existingColumnReorderEntityList.unshift(item);\n    });\n    this.setState({\n      columnReorderEntityList: existingColumnReorderEntityList,\n    });\n  };\n  handleReorderList = (reordered) => {\n    this.props.handleheaderNameList(reordered);\n  };\n  render(props) {\n    return (\n      <div className=\"columns--grid\" ref={this.setWrapperRef}>\n        <div className=\"column__grid\">\n          <div className=\"column__chooser\">\n            <div className=\"column__header\">\n              <div className=\"\">\n                <strong>Column Chooser</strong>\n              </div>\n            </div>\n            <div className=\"column__body\">\n              <div>\n                <input\n                  type=\"text\"\n                  placeholder=\"Search column\"\n                  className=\"custom__ctrl\"\n                  onChange={this.filterColumnReorderList}\n                ></input>\n              </div>\n              <div className=\"column__wrap column__headertxt\">\n                <div className=\"column__checkbox\">\n                  <input\n                    type=\"checkbox\"\n                    onChange={() => this.selectAllToColumnReOrderList()}\n                    checked={\n                      this.state.columnReorderEntityList.length ===\n                      this.props.columns.length\n                    }\n                  />\n                </div>\n                <div className=\"column__txt\">Select all</div>\n              </div>\n              {this.state.columnSelectList.map((item) => {\n                return (\n                  <div className=\"column__wrap\" key={item}>\n                    <div className=\"column__checkbox\">\n                      <input\n                        type=\"checkbox\"\n                        checked={this.state.columnReorderEntityList.includes(\n                          item\n                        )}\n                        onChange={() => this.addToColumnReorderEntityList(item)}\n                      ></input>\n                    </div>\n                    <div className=\"column__txt\">{item}</div>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n          <div className=\"column__settings\">\n            <div className=\"column__header\">\n              <div className=\"column__headerTxt\">\n                <strong>Column Setting</strong>\n              </div>\n              <div className=\"column__close\">\n                <FontAwesomeIcon\n                  className=\"icon-close\"\n                  icon={faTimes}\n                  onClick={() => this.props.closeColumnReOrdering()}\n                ></FontAwesomeIcon>\n              </div>\n            </div>\n            <div className=\"column__header\">\n              <div className=\"column__headerTxt\">\n                <strong>\n                  &nbsp; &nbsp; Selected Column Count :{\" \"}\n                  {this.state.columnReorderEntityList.length}\n                </strong>\n              </div>\n              <div className=\"column__headerTxt\">\n                {this.state.maxLeftPinnedColumn -\n                  this.state.leftPinnedColumList.length >\n                  0 ? (\n                    <strong>\n                      &nbsp; &nbsp; Left Pinned Column Count Remaining :{\" \"}\n                      {this.state.maxLeftPinnedColumn -\n                        this.state.leftPinnedColumList.length}\n                    </strong>\n                  ) : (\n                    <strong style={{ color: \"red\" }}>\n                      &nbsp; &nbsp; Maximum Count Of Left Pin Columns REACHED\n                    </strong>\n                  )}\n              </div>\n            </div>\n            <div className=\"column__body\">\n              <DndProvider\n                backend={TouchBackend}\n                options={{ enableMouseEvents: true }}\n              >\n                <ColumnsList\n                  columnsArray={this.createColumnsArrayFromProps(\n                    this.state.columnReorderEntityList\n                  )}\n                  handleReorderList={this.handleReorderList}\n                />\n              </DndProvider>\n            </div>\n            <div className=\"column__footer\">\n              <div className=\"column__btns\">\n                <button\n                  className=\"btns\"\n                  onClick={() => this.resetColumnReorderList()}\n                >\n                  Reset\n                </button>\n                <button\n                  className=\"btns\"\n                  onClick={() => this.props.closeColumnReOrdering()}\n                >\n                  Cancel\n                </button>\n                <button\n                  className=\"btns btns__save\"\n                  onClick={() =>\n                    this.props.updateTableAsPerRowChooser(\n                      this.state.columnReorderEntityList,\n                      this.state.leftPinnedColumList\n                    )\n                  }\n                >\n                  Save\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ColumnReordering;\n","export const ItemTypes = {\n  CARD: \"sort\",\n};\n","import React from \"react\";\nimport { useDrag, useDrop } from \"react-dnd\";\nimport { ItemTypes } from \"./ItemTypes\";\n\nconst style = {\n  cursor: \"move\",\n};\n\nconst Card = ({ id, text, moveCard, findCard }) => {\n  const originalIndex = findCard(id).index;\n\n  const [{ isDragging }, drag] = useDrag({\n    item: { type: ItemTypes.CARD, id, originalIndex },\n    collect: (monitor) => ({\n      isDragging: monitor.isDragging(),\n    }),\n    end: (dropResult, monitor) => {\n      const { id: droppedId, originalIndex } = monitor.getItem();\n      const didDrop = monitor.didDrop();\n      if (!didDrop) {\n        moveCard(droppedId, originalIndex);\n      }\n    },\n  });\n\n  const [, drop] = useDrop({\n    accept: ItemTypes.CARD,\n    canDrop: () => false,\n    hover({ id: draggedId }) {\n      if (draggedId !== id) {\n        const { index: overIndex } = findCard(id);\n        moveCard(draggedId, overIndex);\n      }\n    },\n  });\n\n  const opacity = isDragging ? 0.5 : 1;\n\n  return (\n    <div ref={(node) => drag(drop(node))} style={{ ...style, opacity }}>\n      {text}\n    </div>\n  );\n};\n\nexport default Card;\n","import React, { useState } from \"react\";\nimport { useDrop } from \"react-dnd\";\nimport Card from \"./SortItem\";\nimport update from \"immutability-helper\";\nimport { ItemTypes } from \"./ItemTypes\";\n\nconst SortingList = (props) => {\n  const [cards, setCards] = useState([...props.sortsArray]);\n\n  const moveCard = (id, atIndex) => {\n    const { card, index } = findCard(id);\n    setCards(\n      update(cards, {\n        $splice: [\n          [index, 1],\n          [atIndex, 0, card],\n        ],\n      })\n    );\n\n    let values = [];\n\t\tlet temp = [];\n\t\ttemp = update(cards, {\n\t\t\t$splice: [\n\t\t\t\t[index, 1],\n\t\t\t\t[atIndex, 0, card],\n\t\t\t],\n\t\t})\n\t\ttemp.forEach((item) => {\n\t\t\tvalues.push(item.id)\n    })\n    props.handleReorderListOfSort(values);\n    \n  };\n\n  const findCard = (id) => {\n    const card = cards.filter((c) => `${c.id}` === id)[0];\n    return {\n      card,\n      index: cards.indexOf(card),\n    };\n  };\n\n  const [, drop] = useDrop({ accept: ItemTypes.CARD });\n\n  React.useEffect(() => {\n    setCards(props.sortsArray);\n  }, [props.sortsArray]);\n\n  return (\n    <React.Fragment>\n      <div ref={drop} style={{ display: \"flex\", flexWrap: \"wrap\" }}>\n        {cards.map((card) => (\n          <Card\n            key={card.id}\n            id={`${card.id}`}\n            text={card.text}\n            moveCard={moveCard}\n            findCard={findCard}\n          />\n        ))}\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default SortingList;\n","import React, { useState, useRef, useEffect } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faTimes,\n  faAlignJustify,\n  faTrash,\n  faPlus,\n  faCopy,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { DndProvider } from \"react-dnd\";\nimport { TouchBackend } from \"react-dnd-touch-backend\";\nimport SortingList from \"./SortingList\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      rowList: [true],\n      rows: [],\n      sortingOrderList: this.props.sortingParamsObjectList === undefined ? [] : this.props.sortingParamsObjectList,\n      errorMessage: false,\n    };\n    this.setWrapperRef = this.setWrapperRef.bind(this);\n    this.handleClickOutside = this.handleClickOutside.bind(this);\n  }\n\n  componentDidMount() {\n    document.addEventListener(\"mousedown\", this.handleClickOutside);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"mousedown\", this.handleClickOutside);\n  }\n\n  setWrapperRef(node) {\n    this.wrapperRef = node;\n  }\n\n  handleClickOutside(event) {\n    if (this.wrapperRef && !this.wrapperRef.contains(event.target)) {\n      this.props.closeSorting();\n    }\n  }\n\n  add = () => {\n    let rowList = [...this.state.rowList];\n    rowList.push(true);\n    var existingSortingOrderList = this.state.sortingOrderList;\n    existingSortingOrderList.push({\n      sortBy: this.props.columnFieldValue[0],\n      order: \"Ascending\",\n      sortOn: \"Value\",\n    });\n    this.setState({\n      rowList,\n      sortingOrderList: existingSortingOrderList,\n    });\n  };\n\n  copy = (i) => {\n    let rowList = [...this.state.sortingOrderList];\n    rowList.push(JSON.parse(JSON.stringify(rowList[i])));\n    this.setState({ sortingOrderList: rowList });\n  };\n\n  clearAll = () => {\n    this.setState({ sortingOrderList: [] });\n    this.props.clearAllSortingParams();\n  };\n\n  remove = (i) => {\n    let sortingOrderList = [...this.state.sortingOrderList];\n    sortingOrderList.splice(i, 1);\n    this.setState({ sortingOrderList });\n  };\n\n  createColumnsArrayFromProps = (rowsValue) => {\n    return rowsValue.map((row, index) => {\n      return {\n        id: index,\n        text: (\n          <div className=\"sort__bodyContent\" key={index}>\n            <div className=\"sort__reorder\">\n              <div className=\"\">\n                <div>&nbsp;</div>\n              </div>\n\n              <div className=\"sort__icon\">\n                <FontAwesomeIcon icon={faAlignJustify}></FontAwesomeIcon>\n              </div>\n            </div>\n\n            <div className=\"sort__reorder\">\n              <div className=\"\">\n                <div>Sort by</div>\n              </div>\n\n              <div className=\"sort__file\">\n                <select\n                  className=\"custom__ctrl\"\n                  name={\"sortBy\"}\n                  onChange={(e) =>\n                    this.captureSortingFeildValues(e, index, \"sortBy\")\n                  }\n                  value={row.sortBy}\n                >\n                  {this.props.columnFieldValue.map((item, index) => (\n                    <option key={index}>{item}</option>\n                  ))}\n                </select>\n              </div>\n            </div>\n\n            <div className=\"sort__reorder\">\n              <div className=\"\">\n                <div>Sort on</div>\n              </div>\n\n              <div className=\"sort__file\">\n                <select\n                  className=\"custom__ctrl\"\n                  name={\"sortOn\"}\n                  onChange={(e) =>\n                    this.captureSortingFeildValues(e, index, \"sortOn\")\n                  }\n                  value={row.sortOn}\n                >\n                  <option>Value</option>\n                </select>\n              </div>\n            </div>\n\n            <div className=\"sort__reorder\">\n              <div className=\"\">\n                <div>Order</div>\n              </div>\n\n              <div className=\"sort__file\">\n                <select\n                  className=\"custom__ctrl\"\n                  name={\"order\"}\n                  onChange={(e) =>\n                    this.captureSortingFeildValues(e, index, \"order\")\n                  }\n                  value={row.order}\n                >\n                  <option>Ascending</option>\n                  <option>Descending</option>\n                </select>\n              </div>\n            </div>\n\n            <div className=\"sort__reorder\">\n              <div className=\"\">\n                <div>&nbsp;</div>\n              </div>\n\n              <div className=\"sort__icon\">\n                <FontAwesomeIcon\n                  icon={faCopy}\n                  title=\"Copy\"\n                  onClick={() => this.copy(index)}\n                ></FontAwesomeIcon>\n              </div>\n            </div>\n\n            <div className=\"sort__reorder\">\n              <div className=\"\">\n                <div>&nbsp;</div>\n              </div>\n\n              <div className=\"sort__icon\">\n                <FontAwesomeIcon\n                  icon={faTrash}\n                  title=\"Delete\"\n                  onClick={() => this.remove(index)}\n                ></FontAwesomeIcon>\n              </div>\n            </div>\n          </div>\n        ),\n      };\n    });\n  };\n\n  captureSortingFeildValues = (event, index, sortingKey) => {\n    var sortingObj = {\n      //``\n    };\n\n    var existingSortingOrderList = this.state.sortingOrderList;\n\n    if (sortingKey === \"sortBy\") {\n      existingSortingOrderList[index][\"sortBy\"] = event.target.value;\n    }\n    if (sortingKey === \"order\") {\n      existingSortingOrderList[index][\"order\"] = event.target.value;\n    }\n    if (\n      existingSortingOrderList[index][\"sortOn\"] === \"\" ||\n      existingSortingOrderList[index][\"sortOn\"] === undefined\n    ) {\n      existingSortingOrderList[index][\"sortOn\"] = \"Value\";\n    }\n    this.setState({\n      sortingOrderList: existingSortingOrderList,\n    });\n  };\n\n  updateTableAsPerSortCondition = () => {\n    const unique = new Set();\n    const showError = this.state.sortingOrderList.some(\n      (element) => unique.size === unique.add(element.sortBy).size\n    );\n    showError\n      ? this.setState({\n          errorMessage: true,\n        })\n      : this.setState({\n          errorMessage: false,\n        });\n        !showError ? this.props.setTableAsPerSortingParams(this.state.sortingOrderList) : ''\n  };\n\n  /**\n * \n * @param {*} reOrderedSortingList \n */\nhandleReorderListOfSort=(reOrderedIndexList)=>{\n  this.props.handleTableSortSwap(reOrderedIndexList);\n}\n\n  render() {\n    let { rowList } = this.state.rowList;\n    return (\n      <div className=\"sorts--grid\" ref={this.setWrapperRef}>\n        <div className=\"sort__grid\">\n          <div className=\"sort__settings\">\n            <div className=\"sort__header\">\n              <div className=\"sort__headerTxt\">\n                <strong>Sort </strong>\n              </div>\n\n              <div className=\"sort__close\">\n                <FontAwesomeIcon\n                  className=\"icon-close\"\n                  icon={faTimes}\n                  onClick={() => this.props.closeSorting()}\n                ></FontAwesomeIcon>\n              </div>\n            </div>\n\n            <div className=\"sort__body\">\n              <DndProvider\n                backend={TouchBackend}\n                options={{ enableMouseEvents: true }}\n              >\n                <SortingList\n                  handleReorderListOfSort={this.handleReorderListOfSort}\n                  sortsArray={this.createColumnsArrayFromProps(\n                    this.state.sortingOrderList\n                  )}\n                />\n              </DndProvider>\n              <div className=\"sort-warning\">\n                {this.state.errorMessage ? (\n                  <span\n                    style={{ display: this.state.clickTag }}\n                    className=\"alert alert-danger\"\n                  >\n                    Sort by opted are same, Please choose different one.\n                  </span>\n                ) : (\n                  \"\"\n                )}\n              </div>\n            </div>\n            <div className=\"sort__new\">\n              <div className=\"sort__section\">\n                <FontAwesomeIcon\n                  icon={faPlus}\n                  className=\"sort__icon\"\n                ></FontAwesomeIcon>\n\n                <div className=\"sort__txt\" onClick={() => this.add()}>\n                  New Sort\n                </div>\n              </div>\n            </div>\n            <div className=\"sort__footer\">\n              <div className=\"sort__btns\">\n                <button className=\"btns\" onClick={this.clearAll}>\n                  Clear All\n                </button>\n\n                <button\n                  className=\"btns btns__save\"\n                  onClick={() => this.updateTableAsPerSortCondition()}\n                >\n                  Ok\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faTimes,\n  faFilePdf,\n  faFileExcel,\n  faFileCsv,\n} from \"@fortawesome/free-solid-svg-icons\";\n\nimport jsPDF from \"jspdf\";\nimport \"jspdf-autotable\";\nimport * as FileSaver from \"file-saver\";\nimport * as XLSX from \"xlsx\";\n\nlet downLaodFileType = [];\nclass ExportData extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      columnValueList: this.props.columnsList,\n      columnEntityList: [],\n      isAllSelected: false,\n      downLaodFileType: [],\n      filteredRow: [],\n      warning: \"\",\n      clickTag: \"none\",\n    };\n    this.setWrapperRef = this.setWrapperRef.bind(this);\n    this.handleClickOutside = this.handleClickOutside.bind(this);\n    this.selectDownLoadType = this.selectDownLoadType.bind(this);\n    this.exportValidation = this.exportValidation.bind(this);\n  }\n  componentDidMount() {\n    document.addEventListener(\"mousedown\", this.handleClickOutside);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"mousedown\", this.handleClickOutside);\n  }\n\n  setWrapperRef(node) {\n    this.wrapperRef = node;\n  }\n\n  handleClickOutside(event) {\n    if (this.wrapperRef && !this.wrapperRef.contains(event.target)) {\n      this.props.closeExport();\n    }\n  }\n\n  resetColumnExportList = () => {\n    this.setState({\n      columnEntityList: [],\n      isAllSelected: false,\n    });\n  };\n\n  selectAllToColumnList = () => {\n    this.resetColumnExportList();\n    this.setState({\n      columnEntityList: !this.state.isAllSelected ? this.props.columnsList : [],\n      isAllSelected: !this.state.isAllSelected,\n    });\n  };\n\n  addToColumnEntityList = (typeToBeAdded) => {\n    var existingColumnEntityList = this.state.columnEntityList;\n    if (!existingColumnEntityList.includes(typeToBeAdded)) {\n      existingColumnEntityList.push(typeToBeAdded);\n    } else {\n      existingColumnEntityList = existingColumnEntityList.filter((item) => {\n        return item !== typeToBeAdded;\n      });\n    }\n    this.setState({\n      columnEntityList: existingColumnEntityList,\n      isAllSelected: false,\n    });\n  };\n\n  selectDownLoadType = (event) => {\n    if (\n      event.target.checked &&\n      !this.state.downLaodFileType.includes(event.target.value)\n    ) {\n      downLaodFileType.push(event.target.value);\n      this.setState({ downLaodFileType });\n    } else {\n      downLaodFileType.map(function (value, index) {\n        if (value === event.target.value) {\n          downLaodFileType = downLaodFileType.splice(index, value);\n        }\n      });\n      this.setState({ downLaodFileType });\n    }\n  };\n\n  exportRowData = () => {\n    const columnVlaueList = this.state.columnEntityList;\n    if (columnVlaueList.length > 0 && this.state.downLaodFileType.length > 0) {\n      this.props.rows.forEach((row) => {\n        const keys = Object.getOwnPropertyNames(row);\n        var filteredColumnVal = {};\n        keys.forEach(function (key) {\n          columnVlaueList.forEach((columnName) => {\n            if (columnName.key === key) filteredColumnVal[key] = row[key];\n          });\n        });\n        this.state.filteredRow.push(filteredColumnVal);\n      });\n\n      this.state.downLaodFileType.map((item) => {\n        if (item === \"pdf\") this.downloadPDF();\n        else if (item === \"excel\") this.downloadXLSFile();\n        else this.downloadCSVFile();\n      });\n    }\n  };\n\n  downloadPDF = () => {\n    const unit = \"pt\";\n    const size = \"A4\"; // Use A1, A2, A3 or A4\n    const orientation = \"landscape\"; // portrait or landscape\n\n    const marginLeft = 300;\n    const doc = new jsPDF(orientation, unit, size);\n\n    doc.setFontSize(15);\n\n    const title = \"iCargo Report\";\n    const headers = [\n      this.state.columnEntityList.map((column) => {\n        return column.name;\n      }),\n    ];\n    var dataValues = [];\n    this.props.rows.forEach((row) => {\n      const keys = Object.keys(row);\n      var filteredColumnVal = [];\n      this.state.columnEntityList.forEach((columnName) => {\n        keys.forEach((key) => {\n          if (columnName.key === key) filteredColumnVal.push(row[key]);\n        });\n      });\n      dataValues.push(filteredColumnVal);\n    });\n\n    let content = {\n      startY: 50,\n      head: headers,\n      body: dataValues,\n    };\n\n    doc.text(title, marginLeft, 40);\n    doc.autoTable(content);\n    doc.save(\"report.pdf\");\n  };\n\n  downloadCSVFile = () => {\n    const fileType =\n      \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\n    const fileExtension = \".csv\";\n    const fileName = \"CSVDownload\";\n    const ws = XLSX.utils.json_to_sheet(this.state.filteredRow);\n    const wb = { Sheets: { data: ws }, SheetNames: [\"data\"] };\n    const excelBuffer = XLSX.write(wb, { bookType: \"csv\", type: \"array\" });\n    const data = new Blob([excelBuffer], { type: fileType });\n    FileSaver.saveAs(data, fileName + fileExtension);\n  };\n\n  downloadXLSFile = () => {\n    const fileType =\n      \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\n    const fileExtension = \".xlsx\";\n    const fileName = \"XLSXDownload\";\n    const ws = XLSX.utils.json_to_sheet(this.state.filteredRow);\n    const wb = { Sheets: { data: ws }, SheetNames: [\"data\"] };\n    const excelBuffer = XLSX.write(wb, { bookType: \"xlsx\", type: \"array\" });\n    const data = new Blob([excelBuffer], { type: fileType });\n    FileSaver.saveAs(data, fileName + fileExtension);\n  };\n\n  columnSearchLogic = (e) => {\n    const searchKey = String(e.target.value).toLowerCase();\n    let filteredRows = this.props.columnsList.filter((item) => {\n      return item.name.toLowerCase().includes(searchKey);\n    });\n    if (!filteredRows.length) {\n      this.setState({ columnValueList: this.props.columnsList });\n    } else {\n      this.setState({ columnValueList: filteredRows });\n    }\n  };\n\n  exportValidation = () => {\n    let columnLength = this.state.columnEntityList.length;\n    let fileLength = this.state.downLaodFileType.length;\n    if (columnLength > 0 && fileLength > 0) {\n      this.exportRowData();\n      this.setState({ clickTag: \"none\" });\n    } else if (columnLength === 0) {\n      this.setState({ warning: \"Column\" });\n      this.setState({ clickTag: \"\" });\n    } else if (fileLength === 0) {\n      this.setState({ warning: \"File Type\" });\n      this.setState({ clickTag: \"\" });\n    }\n    if (columnLength === 0 && fileLength === 0) {\n      this.setState({ warning: \"File Type & Column\" });\n      this.setState({ clickTag: \"\" });\n    }\n  };\n  render() {\n    return (\n      <div className=\"exports--grid\" ref={this.setWrapperRef}>\n        <div className=\"export__grid\">\n          <div className=\"export__chooser\">\n            <div className=\"export__header\">\n              <div className=\"\">\n                <strong>Export Data</strong>\n              </div>\n            </div>\n            <div className=\"export__body\">\n              <div>\n                <input\n                  type=\"text\"\n                  placeholder=\"Search export\"\n                  className=\"custom__ctrl\"\n                  onChange={this.columnSearchLogic}\n                ></input>\n              </div>\n              <div className=\"export__wrap export__headertxt\">\n                <div className=\"export__checkbox\">\n                  <input\n                    type=\"checkbox\"\n                    onChange={() => this.selectAllToColumnList()}\n                    checked={this.state.isAllSelected}\n                  />\n                </div>\n                <div className=\"export__txt\">Select All</div>\n              </div>\n              {this.state.columnValueList.length > 0\n                ? this.state.columnValueList.map((column, index) => {\n                    return (\n                      <div className=\"export__wrap\" key={column.key}>\n                        <div className=\"export__checkbox\">\n                          <input\n                            type=\"checkbox\"\n                            checked={this.state.columnEntityList.includes(\n                              column\n                            )}\n                            onChange={() => this.addToColumnEntityList(column)}\n                          ></input>\n                        </div>\n                        <div className=\"export__txt\">{column.name}</div>\n                      </div>\n                    );\n                  })\n                : \"\"}\n            </div>\n          </div>\n          <div className=\"export__settings\">\n            <div className=\"export__header\">\n              <div className=\"export__headerTxt\"></div>\n              <div className=\"export__close\">\n                <FontAwesomeIcon\n                  icon={faTimes}\n                  className=\"icon-close\"\n                  onClick={this.props.closeExport}\n                ></FontAwesomeIcon>\n              </div>\n            </div>\n            <div className=\"export__as\">Export as</div>\n            <div className=\"export__body\">\n              <div className=\"export__reorder\">\n                <div className=\"\">\n                  <input\n                    type=\"checkbox\"\n                    name=\"pdf\"\n                    value=\"pdf\"\n                    onChange={this.selectDownLoadType}\n                  ></input>\n                </div>\n                <div className=\"export__file\">\n                  <FontAwesomeIcon\n                    icon={faFilePdf}\n                    className=\"temp\"\n                  ></FontAwesomeIcon>\n                </div>\n              </div>\n              <div className=\"export__reorder\">\n                <div className=\"\">\n                  <input\n                    type=\"checkbox\"\n                    name=\"excel\"\n                    value=\"excel\"\n                    onChange={this.selectDownLoadType}\n                  ></input>\n                </div>\n                <div className=\"export__file\">\n                  <FontAwesomeIcon\n                    icon={faFileExcel}\n                    className=\"temp\"\n                  ></FontAwesomeIcon>\n                </div>\n              </div>\n              <div className=\"export__reorder\">\n                <div className=\"\">\n                  <input\n                    type=\"checkbox\"\n                    name=\"csv\"\n                    value=\"csv\"\n                    onChange={this.selectDownLoadType}\n                  ></input>\n                </div>\n                <div className=\"export__file\">\n                  <FontAwesomeIcon\n                    icon={faFileCsv}\n                    className=\"temp\"\n                  ></FontAwesomeIcon>\n                </div>\n              </div>\n              <div className=\"exportWarning\">\n                <span\n                  style={{ display: this.state.clickTag }}\n                  className=\"alert alert-danger\"\n                >\n                  You haven't selected <strong>{this.state.warning}</strong>\n                </span>\n              </div>\n            </div>\n            <div className=\"export__footer\">\n              <div className=\"export__btns\">\n                <button\n                  className=\"btns\"\n                  onClick={() => this.props.closeExport()}\n                >\n                  Cancel\n                </button>\n                <button\n                  className=\"btns btns__save\"\n                  onClick={(e) => {\n                    this.exportValidation();\n                  }}\n                >\n                  Export\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nexport default ExportData;\n","import React, { Component } from \"react\";\nimport ExtDataGrid from \"./common/extDataGrid\";\nimport { Toolbar, Data, Filters, Editors } from \"react-data-grid-addons\";\nimport { range } from \"lodash\";\nimport { applyFormula } from \"./utilities/utils\";\nimport { FormControl } from \"react-bootstrap\";\nimport DatePicker from \"./functions/DatePicker.js\";\n//import {onRowsSelected} from \"../components/functions/OnRowsSelected.js\"\nimport {\n  faSortAmountDown,\n  faColumns,\n  // faSyncAlt,\n  faShareAlt,\n  // faAlignLeft,\n  // faFilter,\n  faSortDown,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport ErrorMessage from \"./common/ErrorMessage\";\nimport ColumnReordering from \"./overlays/column_chooser/Chooser\";\nimport Sorting from \"./overlays/sorting/Sorting\";\nimport ExportData from \"./overlays/export_data/ExportData\";\n\nconst {\n  DraggableHeader: { DraggableContainer },\n} = require(\"react-data-grid-addons\");\n\nconst { DropDownEditor } = Editors;\n\nconst defaultParsePaste = (str) => str.split(/\\r\\n|\\n|\\r/).map((row) => row.split(\"\\t\"));\nconst selectors = Data.Selectors;\nlet swapList = [];\nlet swapSortList=[]\nconst { AutoCompleteFilter, NumericFilter } = Filters;\nclass spreadsheet extends Component {\n  constructor(props) {\n    super(props);\n    const airportCodes = [];\n    this.props.airportCodes.forEach((item) => {\n      airportCodes.push({ id: item, value: item });\n    });\n    this.state = {\n      warningStatus: \"\",\n      height: 680,\n      displayNoRows: \"none\",\n      searchIconDisplay: \"\",\n      searchValue: \"\",\n      filter: {},\n      rows: this.props.rows,\n      selectedIndexes: [],\n      junk: {},\n      topLeft: {},\n      columnReorderingComponent: null,\n      exportComponent: null,\n      filteringRows: this.props.rows,\n      tempRows: this.props.rows,\n      sortingPanelComponent: null,\n      count: this.props.rows.length,\n      sortingOrderSwapList:[],\n      sortingParamsObjectList:[],\n      columns: this.props.columns.map((item) => {\n        if (item.editor === \"DatePicker\") {\n          item.editor = DatePicker;\n        } else if (item.editor === \"DropDown\") {\n          item.editor = <DropDownEditor options={airportCodes} />;\n        } else if (item.editor === \"Text\") {\n          item.editor = \"text\";\n        } else {\n          item.editor = null;\n        }\n        if (item.filterType === \"numeric\") {\n          item.filterRenderer = NumericFilter;\n        }\n        else {\n          item.filterRenderer = AutoCompleteFilter;\n        }\n        return item;\n      }),\n    };\n    document.addEventListener(\"copy\", this.handleCopy);\n    document.addEventListener(\"paste\", this.handlePaste);\n    this.handleSearchValue = this.handleSearchValue.bind(this);\n    this.clearSearchValue = this.clearSearchValue.bind(this);\n    this.handleFilterChange = this.handleFilterChange.bind(this);\n\n    this.formulaAppliedCols = this.props.columns.filter((item) => {\n      return item.formulaApplicable;\n    });\n  }\n  componentDidUpdate(prevProps) {\n    //Fix for column re-order and pin left issue (functionality was working only after doing a window re-size)\n    const resizeEvent = document.createEvent(\"HTMLEvents\");\n    resizeEvent.initEvent(\"resize\", true, false);\n    window.dispatchEvent(resizeEvent);\n  }\n  updateRows = (startIdx, newRows) => {\n    this.setState((state) => {\n      const rows = state.rows.slice();\n      for (let i = 0; i < newRows.length; i++) {\n        if (startIdx + i < rows.length) {\n          rows[startIdx + i] = {\n            ...rows[startIdx + i],\n            ...newRows[i],\n          };\n        }\n      }\n      return {\n        rows,\n      };\n    });\n  }\n\n  rowGetter = (i) => {\n    const { rows } = this.state;\n    return rows[i];\n  };\n\n  handleCopy = (e) => {\n    e.preventDefault();\n    const { topLeft, botRight } = this.state;\n    const text = range(topLeft.rowIdx, botRight.rowIdx + 1)\n      .map((rowIdx) =>\n        this.state.columns\n          .slice(topLeft.colIdx - 1, botRight.colIdx)\n          .map((col) => this.rowGetter(rowIdx)[col.key])\n          .join(\"\\t\")\n      )\n      .join(\"\\n\");\n    e.clipboardData.setData(\"text/plain\", text);\n  };\n\n  handlePaste = (e) => {\n    e.preventDefault();\n    const { topLeft } = this.state;\n    const newRows = [];\n    const pasteData = defaultParsePaste(e.clipboardData.getData(\"text/plain\"));\n    pasteData.forEach((row) => {\n      const rowData = {};\n      // Merge the values from pasting and the keys from the columns\n      this.state.columns.slice(topLeft.colIdx - 1, topLeft.colIdx - 1 + row.length).forEach((col, j) => {\n        rowData[col.key] = row[j];\n      });\n      newRows.push(rowData);\n    });\n    this.updateRows(topLeft.rowIdx, newRows);\n  };\n\n  setSelection = (args) => {\n    this.setState({\n      topLeft: {\n        rowIdx: args.topLeft.rowIdx,\n        colIdx: args.topLeft.idx,\n      },\n      botRight: {\n        rowIdx: args.bottomRight.rowIdx,\n        colIdx: args.bottomRight.idx,\n      },\n    });\n  };\n\n  handleWarningStatus = () => {\n    this.setState({ warningStatus: \"invalid\" })\n  }\n  closeWarningStatus = () => {\n    this.setState({ warningStatus: \"\" })\n  }\n  componentWillReceiveProps(props) {\n    this.setState({\n      rows: props.rows,\n    });\n    this.setState({\n      status: props.status,\n    });\n    this.setState({\n      textValue: props.textValue,\n    });\n    this.setState({ count: props.count });\n    this.setState({ warningStatus: props.status })\n  }\n\n  /**\n * Method To update the cell/cells with the edited values\n * @param {*} fromRow is the row from which this edit is performed\n * @param {*} toRow is the row upto which this edit is performed\n * @param {*} updated is the value of change\n * @param {*} action is type of edit action performed\n */\n  onGridRowsUpdated = ({ fromRow, toRow, updated, action }) => {\n    let columnName = \"\";\n    const filter = this.formulaAppliedCols.filter((item) => {\n      if (updated[item.key] !== null && updated[item.key] !== undefined) {\n        columnName = item.key;\n        return true;\n      } else return false;\n    });\n\n    if (filter.length > 0) {\n      updated = applyFormula(updated, columnName);\n    }\n\n    if (action !== \"COPY_PASTE\") {\n      this.setState((state) => {\n        const rows = state.rows.slice();\n        for (let i = fromRow; i <= toRow; i++) {\n          rows[i] = {\n            ...rows[i],\n            ...updated,\n          };\n        }\n\n        return {\n          rows,\n        };\n      });\n      this.setState((state) => {\n        const filteringRows = state.filteringRows.slice();\n        for (let i = fromRow; i <= toRow; i++) {\n          filteringRows[i] = {\n            ...filteringRows[i],\n            ...updated,\n          };\n        }\n\n        return {\n          filteringRows,\n        };\n      });\n      this.setState((state) => {\n        const tempRows = state.tempRows.slice();\n        for (let i = fromRow; i <= toRow; i++) {\n          tempRows[i] = {\n            ...tempRows[i],\n            ...updated,\n          };\n        }\n\n        return {\n          tempRows,\n        };\n      });\n    }\n    if (this.props.updateCellData) {\n      this.props.updateCellData(this.state.tempRows[fromRow], this.state.tempRows[toRow], updated, action);\n    }\n  };\n\t/**\n\t * Method To bulk/individual select of rows\n\t * @param {*} rows is the selected row\n\t */\n  onRowsSelected = (rows) => {\n    this.setState({\n      selectedIndexes: this.state.selectedIndexes.concat(rows.map((r) => r.rowIdx)),\n    });\n    if (this.props.selectBulkData) {\n      this.props.selectBulkData(rows);\n    }\n  };\n\t/**\n\t * Method To bulk/individual deselect of rows\n\t * @param {*} rows is the deselected row\n\t */\n  onRowsDeselected = (rows) => {\n    let rowIndexes = rows.map((r) => r.rowIdx);\n    this.setState({\n      selectedIndexes: this.state.selectedIndexes.filter((i) => rowIndexes.indexOf(i) === -1),\n    });\n  };\n\n\t/**\n\t * Method To filter the multiple columns\n\t * @param {*} value is the  incoming filtering event\n\t */\n  handleFilterChange = (value) => {\n    let junk = this.state.junk;\n    if (!(value.filterTerm == null) && !(value.filterTerm.length <= 0)) {\n      junk[value.column.key] = value;\n    } else {\n      delete junk[value.column.key];\n    }\n    this.setState({ junk });\n    const data = this.getrows(this.state.filteringRows, this.state.junk);\n    this.setState({\n      rows: data,\n      tempRows: data,\n      count: data.length,\n    });\n    if (data.length === 0) {\n      this.handleWarningStatus();\n    }\n    else {\n      this.closeWarningStatus();\n    }\n  };\n  getrows = (rows, filters) => {\n    if (Object.keys(filters).length <= 0) {\n      filters = {};\n    }\n    selectors.getRows({ rows: [], filters: {} });\n    return selectors.getRows({ rows: rows, filters: filters });\n  };\n\n  /**\n * Method To render the filter values for filtering rows\n * @param {*} rows is the row data to be considered for filtering\n * @param {*} columnId is the specific columnId for which the row datas are being considered\n */\n  getValidFilterValues(rows, columnId) {\n    return rows\n      .map((r) => r[columnId])\n      .filter((item, i, a) => {\n        return i === a.indexOf(item);\n      });\n  }\n  /**\n* Method To sort the rows for a particular column\n* @param {*} data is the row datas to be considered for sorting\n* @param {*} sortColumn is the specific column for which the row sort is being triggered\n* @param {*} sortDirection is the type of sort\n*/\n  sortRows = (data, sortColumn, sortDirection) => {\n    const comparer = (a, b) => {\n      if (sortDirection === \"ASC\") {\n        return a[sortColumn] > b[sortColumn] ? 1 : -1;\n      } else if (sortDirection === \"DESC\") {\n        return a[sortColumn] < b[sortColumn] ? 1 : -1;\n      }\n    };\n    this.setState({\n      rows: [...data].sort(comparer),\n    });\n    return sortDirection === \"NONE\" ? data : this.state.rows;\n  };\n  /**\n     * Method To swap the columns\n     * @param {*} source is source column\n     * @param {*} target is the target column \n     */\n  onHeaderDrop = (source, target) => {\n    const stateCopy = Object.assign({}, this.state);\n    const columnSourceIndex = this.state.columns.findIndex((i) => i.key === source);\n    const columnTargetIndex = this.state.columns.findIndex((i) => i.key === target);\n\n    stateCopy.columns.splice(columnTargetIndex, 0, stateCopy.columns.splice(columnSourceIndex, 1)[0]);\n\n    const emptyColumns = Object.assign({}, this.state, {\n      columns: [],\n    });\n    this.setState(emptyColumns);\n\n    const reorderedColumns = Object.assign({}, this.state, {\n      columns: stateCopy.columns,\n    });\n    this.setState(reorderedColumns);\n  }\n  /**\n    * Method To dynamically swap the column from column chooser\n    * @param {*} reordered is the swapped array of columns\n    */\n  handleheaderNameList = (reordered) => {\n    swapList = reordered;\n  }\n  handleTableSortSwap=(reorderedSwap)=>{\n    swapSortList = reorderedSwap;\n  }\n  updateTableAsPerRowChooser = (inComingColumnsHeaderList, pinnedColumnsList) => {\n    let pinnedReorder = false;\n    let existingColumnsHeaderList = this.props.columns;\n    existingColumnsHeaderList = existingColumnsHeaderList.filter((item) => {\n      return inComingColumnsHeaderList.includes(item.name);\n    });\n    let rePositionedArray = existingColumnsHeaderList;\n    let singleHeaderOneList;\n    if (pinnedColumnsList.length > 0) {\n      pinnedColumnsList\n        .slice(0)\n        .reverse()\n        .map((item, index) => {\n          singleHeaderOneList = existingColumnsHeaderList.filter((subItem) => item === subItem.name);\n          rePositionedArray = this.array_move(\n            existingColumnsHeaderList,\n            existingColumnsHeaderList.indexOf(singleHeaderOneList[0]),\n            index\n          );\n        });\n    }\n    if (swapList.length > 0) {\n      swapList\n        .slice(0)\n        .map((item, index) => {\n          singleHeaderOneList = existingColumnsHeaderList.filter((subItem) => {\n            return item === subItem.name\n          });\n          rePositionedArray = this.array_move(\n            existingColumnsHeaderList,\n            existingColumnsHeaderList.indexOf(singleHeaderOneList[0]),\n            index\n          );\n        });\n    }\n\n    existingColumnsHeaderList = rePositionedArray;\n\t\t/**\n       making all the frozen attribute as false for all the columns and then \n       setting items of pinnedColumnsList as frozen = true\n       */\n    existingColumnsHeaderList.map((headerItem, index) => {\n      if (headerItem.frozen !== undefined && headerItem.frozen === true) {\n        existingColumnsHeaderList[index][\"frozen\"] = false;\n      }\n      if (pinnedColumnsList.includes(headerItem.name)) {\n        existingColumnsHeaderList[index][\"frozen\"] = true;\n      }\n    });\n\n    const toTop = (key, value) => (a, b) => (b[key] === value) - (a[key] === value);\n    existingColumnsHeaderList.sort(toTop('frozen', true));\n\n    this.setState({\n      columns: existingColumnsHeaderList,\n    });\n    let tempList = [];\n    existingColumnsHeaderList.forEach((item) => {\n      tempList.push(item.name);\n    })\n\n    if (swapList.length > 0) {\n      for (let i = 0; i < tempList.length; i++) {\n        if (tempList[i] === swapList[i])\n          pinnedReorder = true;\n      }\n    }\n    this.closeColumnReOrdering();\n    swapList = [];\n    pinnedReorder = false;\n  };\n\n\t/**\n\t * Method To re-position a particular object in an Array from old_index to new_index\n\t * @param {*} arr inComing array\n\t * @param {*} old_index initial index\n\t * @param {*} new_index final index\n\t */\n  array_move = (arr, old_index, new_index) => {\n    if (new_index >= arr.length) {\n      var k = new_index - arr.length + 1;\n      while (k--) {\n        arr.push(undefined);\n      }\n    }\n    arr.splice(new_index, 0, arr.splice(old_index, 1)[0]);\n    return arr;\n  };\n\n\t/**\n\t * Method to render the column Selector Pannel\n\t */\n  columnReorderingPannel = () => {\n    var headerNameList = [];\n    var existingPinnedHeadersList = [];\n    this.state.columns\n      .filter((item) => item.frozen !== undefined && item.frozen === true)\n      .map((item) => existingPinnedHeadersList.push(item.name));\n    this.state.columns.map((item) => headerNameList.push(item.name));\n    this.setState({\n      columnReorderingComponent: (\n        <ColumnReordering\n          maxLeftPinnedColumn={this.props.maxLeftPinnedColumn}\n          updateTableAsPerRowChooser={this.updateTableAsPerRowChooser}\n          headerKeys={headerNameList}\n          closeColumnReOrdering={this.closeColumnReOrdering}\n          existingPinnedHeadersList={existingPinnedHeadersList}\n          handleheaderNameList={this.handleheaderNameList}\n          {...this.props}\n        />\n      ),\n    });\n  };\n\n\t/**\n\t * Method to stop the render the column Selector Pannel\n\t */\n  closeColumnReOrdering = () => {\n    this.setState({\n      columnReorderingComponent: null,\n    });\n  };\n  handleSearchValue = (value) => {\n    this.setState({ searchValue: value });\n  };\n  clearSearchValue = () => {\n    this.setState({ searchValue: \"\" });\n    this.setState({ filteringRows: this.state.filteringRows });\n  };\n\n  sortingPanel = () => {\n    let columnField = [];\n    this.state.columns.map((item) => columnField.push(item.name));\n    this.setState({\n      sortingPanelComponent: <Sorting setTableAsPerSortingParams={(args) => this.setTableAsPerSortingParams(args)}\n      sortingParamsObjectList={this.state.sortingParamsObjectList}\n        handleTableSortSwap={this.handleTableSortSwap}\n        clearAllSortingParams={this.clearAllSortingParams}  \n        columnFieldValue={columnField}\n        closeSorting={this.closeSorting} />,\n    });\n  };\n\n  closeSorting = () => {\n    this.setState({\n      sortingPanelComponent: null,\n      sortingOrderSwapList:[],\n    });\n    swapSortList=[];\n  };\n\n  clearAllSortingParams=()=>{\n    this.setState({\n      rows: this.props.rows,\n    })\n  }\n\n  //Export Data Logic\n  exportColumnData = () => {\n    this.setState({\n      exportComponent: (\n        <ExportData rows={this.state.rows} columnsList={this.state.columns} closeExport={this.closeExport} />\n      ),\n    });\n  };\n\n  closeExport = () => {\n    this.setState({\n      exportComponent: null,\n    });\n  };\n\n  setTableAsPerSortingParams = (tableSortList) => {\n\n    var existingRows = this.state.rows;\n    var sortingOrderNameList = [];\n    tableSortList.map((item, index) => {\n      var nameOfItem = \"\";\n      Object.keys(this.state.rows[0]).map(rowItem => {\n       if (rowItem.toLowerCase() === this.toCamelCase(item.sortBy).toLowerCase()) {\n          nameOfItem = rowItem;\n        }\n      })\n      var typeOfItem = this.state.rows[0][\n        item.sortBy === nameOfItem\n      ];\n      if (typeof typeOfItem === \"number\") {\n        sortingOrderNameList.push({\n          name: nameOfItem,\n          primer: parseInt,\n          reverse: item.order === \"Ascending\" ? false : true,\n        });\n      } else {\n        sortingOrderNameList.push({\n          name: nameOfItem,\n          reverse: item.order === \"Ascending\" ? false : true,\n        });\n      }\n    });\n\n    if(swapSortList.length>0){\n      var existingSortingOrderSwapList = this.state.sortingOrderSwapList;\n      swapSortList.map((item, index)=>{\n        var stringOfItemIndex = item+\"\"+index;\n        if(item!==index && !existingSortingOrderSwapList.includes(stringOfItemIndex.split('').reverse().join(''))){\n          existingSortingOrderSwapList.push(stringOfItemIndex)\n          sortingOrderNameList = this.array_move(sortingOrderNameList, item, index)\n          tableSortList = this.array_move(tableSortList, item, index)\n        }\n        this.setState({\n          sortingOrderSwapList: existingSortingOrderSwapList\n        })\n      })\n    }\n\n    existingRows.sort(sort_by(...sortingOrderNameList));\n    this.setState({\n      rows: existingRows,\n      sortingParamsObjectList: tableSortList\n    });\n\n    this.closeSorting();\n  };\n\n  toCamelCase = (str) => {\n    return str\n      .replace(/\\s(.)/g, function ($1) {\n        return $1.toUpperCase();\n      })\n      .replace(/\\s/g, \"\")\n      .replace(/^(.)/, function ($1) {\n        return $1.toLowerCase();\n      });\n  };\n\n  render() {\n    return (\n      <div>\n        <div className='parentDiv'>\n          <div className='totalCount'>\n            Showing <strong> {this.state.count} </strong> records\n\t\t\t\t\t</div>\n          <div className='globalSearch'>\n            <i className=\"fa fa-search\"></i>\n            <FormControl\n              className=\"globalSeachInput\"\n              type='text'\n              placeholder=\"Search\"\n              onChange={(e) => {\n                this.handleSearchValue(e.target.value);\n                this.props.globalSearchLogic(e, this.state.tempRows);\n              }}\n              value={this.state.searchValue}\n            />\n          </div>\n          {/* <div className=\"filterIcons\">\n            <FontAwesomeIcon icon={faFilter} />\n          </div> */}\n          <div className='filterIcons' onClick={this.sortingPanel}>\n            <FontAwesomeIcon title='Group Sort' icon={faSortAmountDown} />\n            <FontAwesomeIcon icon={faSortDown} className='filterArrow' />\n          </div>\n          {this.state.sortingPanelComponent}\n          <div className='filterIcons' onClick={this.columnReorderingPannel}>\n            <FontAwesomeIcon title='Column Chooser' icon={faColumns} />\n            <FontAwesomeIcon icon={faSortDown} className='filterArrow' />\n          </div>\n          {this.state.columnReorderingComponent}\n          <div className='filterIcons'>\n            <FontAwesomeIcon title='Export' icon={faShareAlt} onClick={this.exportColumnData} />\n          </div>\n          {this.state.exportComponent}\n          {/* <div className=\"filterIcons\">\n            <FontAwesomeIcon title=\"Reload\" icon={faSyncAlt} />\n          </div> */}\n          {/* <div className=\"filterIcons\">\n            <FontAwesomeIcon icon={faAlignLeft} />\n          </div> */}\n        </div>\n        <ErrorMessage\n          className='errorDiv'\n          status={this.state.warningStatus}\n          closeWarningStatus={(e) => {\n            this.props.closeWarningStatus();\n            this.closeWarningStatus();\n          }}\n          clearSearchValue={this.clearSearchValue}\n        />\n        <DraggableContainer className='gridDiv' onHeaderDrop={this.onHeaderDrop}>\n          <ExtDataGrid\n            toolbar={<Toolbar enableFilter={true} />}\n            getValidFilterValues={(columnKey) => this.getValidFilterValues(this.state.filteringRows, columnKey)}\n            minHeight={this.state.height}\n            columns={this.state.columns}\n            rowGetter={(i) => this.state.rows[i]}\n            rowsCount={this.state.rows.length}\n            onGridRowsUpdated={this.onGridRowsUpdated}\n            enableCellSelect={true}\n            onClearFilters={() => {\n              this.setState({ junk: {} });\n            }}\n            onColumnResize={(idx, width) => console.log(`Column ${idx} has been resized to ${width}`)}\n            onAddFilter={(filter) => this.handleFilterChange(filter)}\n            rowSelection={{\n              showCheckbox: true,\n              enableShiftSelect: true,\n              onRowsSelected: this.onRowsSelected,\n              onRowsDeselected: this.onRowsDeselected,\n              selectBy: {\n                indexes: this.state.selectedIndexes,\n              },\n            }}\n            onGridSort={(sortColumn, sortDirection) => this.sortRows(this.state.filteringRows, sortColumn, sortDirection)}\n          // cellRangeSelection={{\n          //   onComplete: this.setSelection,\n          // }}\n          />\n        </DraggableContainer>\n      </div>\n    );\n  }\n}\n\n/**\n * Global Method To Sort The Grid.\n */\nvar sort_by;\n(function () {\n  // utility functions\n  var default_cmp = function (a, b) {\n    if (a == b) return 0;\n    return a < b ? -1 : 1;\n  },\n    getCmpFunc = function (primer, reverse) {\n      var cmp = default_cmp;\n      if (primer) {\n        cmp = function (a, b) {\n          return default_cmp(primer(a), primer(b));\n        };\n      }\n      if (reverse) {\n        return function (a, b) {\n          return -1 * cmp(a, b);\n        };\n      }\n      return cmp;\n    };\n\n  // actual implementation\n  sort_by = function () {\n    var fields = [],\n      n_fields = arguments.length,\n      field,\n      name,\n      reverse,\n      cmp;\n\n    // preprocess sorting options\n    for (var i = 0; i < n_fields; i++) {\n      field = arguments[i];\n      if (typeof field === \"string\") {\n        name = field;\n        cmp = default_cmp;\n      } else {\n        name = field.name;\n        cmp = getCmpFunc(field.primer, field.reverse);\n      }\n      fields.push({\n        name: name,\n        cmp: cmp,\n      });\n    }\n\n    return function (A, B) {\n      var a, b, name, cmp, result;\n      for (var i = 0, l = n_fields; i < l; i++) {\n        result = 0;\n        field = fields[i];\n        name = field.name;\n        cmp = field.cmp;\n\n        result = cmp(A[name], B[name]);\n        if (result !== 0) break;\n      }\n      return result;\n    };\n  };\n})();\n\nexport default spreadsheet;\n","export const applyFormula = (obj, columnName) => {\n  let item = obj[columnName].toString();\n  if (item && item.charAt(0) === \"=\") {\n    var operation = item.split(\"(\");\n    var value = operation[1]\n      .substring(0, operation[1].length - 1)\n      .split(/[,:]/);\n    switch (operation[0]) {\n      case \"=SUM\":\n      case \"=ADD\":\n      case \"=sum\":\n      case \"=add\":\n        obj[columnName] = value.reduce(function (a, b) {\n          return Number(a) + Number(b);\n        });\n        break;\n      case \"=MUL\":\n      case \"=mul\":\n        obj[columnName] = value.reduce(function (a, b) {\n          return Number(a) * Number(b);\n        });\n        break;\n      case \"=SUB\":\n      case \"=sub\":\n      case \"=DIFF\":\n      case \"=diff\":\n        obj[columnName] = value.reduce(function (a, b) {\n          return Number(a) - Number(b);\n        });\n        break;\n      case \"=min\":\n      case \"=MIN\":\n        obj[columnName] = Math.min.apply(Math, value);\n        break;\n      case \"=max\":\n      case \"=MAX\":\n        obj[columnName] = Math.max.apply(Math, value);\n        break;\n      default:\n        console.log(\"No Calculation\");\n    }\n  }\n  return obj;\n};","\nimport React, { useState, useEffect } from \"react\";\nimport Spreadsheet from \"spreadsheet\";\nimport CargoData from \"./data.json\";\nimport { fetchData } from \"./getData\";\n\nconst App = () => {\n  //Get spreadsheet height value, which is a required value\n  const gridHeight = \"90vh\";\n\n  let searchKey = \"\";\n  //Set state value for variable to hold grid data\n  const [data, setData] = useState();\n  //Set state value for variable to hold grid record status\n  const [status, setStatus] = useState(\"\");\n  const rows = CargoData;\n\n  const maxLeftPinnedColumn = 5;\n  //Configure columns and its related featues such as editor(Text/DropDown), FormulaApplicable(True/False)\n  //Editable, Draggable, sortable, resizable, filterable, default width\n  const columns = [\n    {\n      key: \"flightno\",\n      name: \"FlightNo\",\n      draggable: true,\n      editor: \"Text\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 150,\n      filterType: \"autoCompleteFilter\"\n    },\n    {\n      key: \"date\",\n      name: \"Date\",\n      draggable: true,\n      editor: \"DatePicker\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 150,\n      filterType: \"autoCompleteFilter\"\n    },\n    {\n      key: \"segmentfrom\",\n      name: \"Segment From\",\n      draggable: true,\n      editor: \"DropDown\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 150,\n      filterType: \"autoCompleteFilter\"\n    },\n    {\n      key: \"revenue\",\n      name: \"Revenue\",\n      draggable: true,\n      editor: \"Text\",\n      formulaApplicable: true,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 150,\n      filterType: \"autoCompleteFilter\"\n    },\n    {\n      key: \"yeild\",\n      name: \"Yeild\",\n      draggable: true,\n      editor: \"Text\",\n      formulaApplicable: true,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 150,\n      filterType: \"autoCompleteFilter\"\n    },\n    {\n      key: \"segmentto\",\n      name: \"Segment To\",\n      draggable: true,\n      editor: \"DropDown\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 150,\n      filterType: \"autoCompleteFilter\"\n    },\n    {\n      key: \"flightModel\",\n      name: \"Flight Model\",\n      draggable: true,\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 150,\n      filterType: \"numeric\"\n    },\n    {\n      key: \"bodyType\",\n      name: \"Body Type\",\n      draggable: true,\n      editor: \"Text\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 150,\n      filterType: \"autoCompleteFilter\"\n    },\n    {\n      key: \"type\",\n      name: \"Type\",\n      draggable: true,\n      editor: \"Text\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 150,\n      filterType: \"autoCompleteFilter\"\n    },\n    {\n      key: \"startTime\",\n      name: \"Start Time\",\n      draggable: true,\n      editor: \"Text\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 150,\n      filterType: \"autoCompleteFilter\"\n    },\n    {\n      key: \"endTime\",\n      name: \"End Time\",\n      draggable: true,\n      editor: \"Text\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 150,\n      filterType: \"autoCompleteFilter\"\n    },\n    {\n      key: \"status\",\n      name: \"Status\",\n      draggable: true,\n      editor: \"Text\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 150,\n      filterType: \"autoCompleteFilter\"\n    },\n    {\n      key: \"additionalStatus\",\n      name: \"Additional Status\",\n      draggable: true,\n      editor: \"Text\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 150,\n      filterType: \"autoCompleteFilter\"\n    },\n    {\n      key: \"timeStatus\",\n      name: \"Time Status\",\n      draggable: true,\n      editor: \"Text\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 150,\n      filterType: \"autoCompleteFilter\"\n    },\n    {\n      key: \"weightpercentage\",\n      name: \"Weight Percentage\",\n      draggable: true,\n      editor: \"Text\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 150,\n      filterType: \"autoCompleteFilter\"\n    },\n    {\n      key: \"weightvalue\",\n      name: \"Weight Value\",\n      draggable: true,\n      editor: \"Text\",\n      formulaApplicable: true,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 150,\n      filterType: \"autoCompleteFilter\"\n    },\n    {\n      key: \"volumepercentage\",\n      name: \"Volume Percentage\",\n      draggable: true,\n      editor: \"Text\",\n      formulaApplicable: true,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 150,\n      filterType: \"autoCompleteFilter\"\n    },\n    {\n      key: \"volumevalue\",\n      name: \"Volume Value\",\n      draggable: true,\n      editor: \"Text\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 150,\n      filterType: \"autoCompleteFilter\"\n    },\n    {\n      key: \"uldposition1\",\n      name: \"uldposition1\",\n      draggable: true,\n      editor: \"Text\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 150,\n      filterType: \"autoCompleteFilter\"\n    },\n    {\n      key: \"uldvalue1\",\n      name: \"uldvalue1\",\n      draggable: true,\n      editor: \"Text\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 150,\n      filterType: \"autoCompleteFilter\"\n    },\n    {\n      key: \"uldposition2\",\n      name: \"uldposition2\",\n      draggable: true,\n      editor: \"Text\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 150,\n      filterType: \"autoCompleteFilter\"\n    },\n    {\n      key: \"uldvalue2\",\n      name: \"uldvalue2\",\n      draggable: true,\n      editor: \"Text\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 150,\n      filterType: \"autoCompleteFilter\"\n    },\n    {\n      key: \"uldposition3\",\n      name: \"uldposition3\",\n      draggable: true,\n      editor: \"Text\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 150,\n      filterType: \"autoCompleteFilter\"\n    },\n    {\n      key: \"uldvalue3\",\n      name: \"uldvalue3\",\n      draggable: true,\n      editor: \"Text\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 150,\n      filterType: \"autoCompleteFilter\"\n    },\n    {\n      key: \"uldposition4\",\n      name: \"uldposition4\",\n      draggable: true,\n      editor: \"Text\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 150,\n      filterType: \"autoCompleteFilter\"\n    },\n    {\n      key: \"uldvalue4\",\n      name: \"uldvalue4\",\n      draggable: true,\n      editor: \"Text\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 150,\n      filterType: \"autoCompleteFilter\"\n    },\n\n    {\n      key: \"sr\",\n      name: \"SR\",\n      draggable: true,\n      editor: \"Text\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 150,\n      filterType: \"autoCompleteFilter\"\n    },\n    {\n      key: \"queuedBookingSR\",\n      name: \"Queued Booking SR\",\n      draggable: true,\n      editor: \"Text\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 150,\n      filterType: \"autoCompleteFilter\"\n    },\n    {\n      key: \"queuedBookingvolume\",\n      name: \"Queued Booking Volume\",\n      draggable: true,\n      editor: \"Text\",\n      formulaApplicable: false,\n      sortable: true,\n      resizable: true,\n      filterable: true,\n      width: 150,\n      filterType: \"autoCompleteFilter\"\n    }\n  ];\n\n  //Configure columns and its related functions\n  const airportCodeList =  [\n        \"AAA\",\n        \"AAB\",\n        \"AAC\",\n        \"ABA\",\n        \"ABB\",\n        \"ABC\",\n        \"ACA\",\n        \"ACB\",\n        \"ACC\",\n        \"BAA\",\n        \"BAB\",\n        \"BAC\",\n        \"BBA\",\n        \"BBB\",\n        \"BBC\",\n        \"BCA\",\n        \"BCB\",\n        \"BCC\",\n        \"CAA\",\n        \"CAB\",\n        \"CAC\",\n        \"CBA\",\n        \"CBB\",\n        \"CBC\",\n        \"CCA\",\n        \"CCB\",\n        \"CCC\",\n        \"XXX\",\n        \"XXY\",\n        \"XXZ\",\n        \"XYX\",\n        \"XYY\",\n        \"XYZ\",\n        \"XZX\",\n        \"XZY\",\n        \"XZZ\",\n        \"YXX\",\n        \"YXY\",\n        \"YXZ\",\n        \"YYX\",\n        \"YYY\",\n        \"YYZ\",\n        \"YZX\",\n        \"YZY\",\n        \"YZZ\",\n        \"ZXX\",\n        \"ZXY\",\n        \"ZXZ\",\n        \"ZYX\",\n        \"ZYY\",\n        \"ZYZ\",\n        \"ZZX\",\n        \"ZZY\",\n        \"ZZZ\"\n    ];\n\n  //Add logic for doing global search in the spreadsheet\n  const globalSearchLogic = (e, updatedRows) => {\n    searchKey = String(e.target.value).toLowerCase();\n    let filteredRows = updatedRows.filter((item) => {\n      return (\n        (item.flightno && item.flightno.toLowerCase().includes(searchKey)) ||\n        (item.date && item.date.toLowerCase().includes(searchKey)) ||\n        (item.segmentfrom &&\n          item.segmentfrom.toLowerCase().includes(searchKey)) ||\n        (item.segmentto && item.segmentto.toLowerCase().includes(searchKey)) ||\n        String(item.flightModel).includes(searchKey) ||\n        (item.bodyType && item.bodyType.toLowerCase().includes(searchKey)) ||\n        (item.type && item.type.toLowerCase().includes(searchKey)) ||\n        (item.startTime && item.startTime.toLowerCase().includes(searchKey)) ||\n        (item.endTime && item.endTime.toLowerCase().includes(searchKey)) ||\n        (item.status && item.status.toLowerCase().includes(searchKey)) ||\n        (item.additionalStatus &&\n          item.additionalStatus.toLowerCase().includes(searchKey)) ||\n        (item.timeStatus &&\n          item.timeStatus.toLowerCase().includes(searchKey)) ||\n        (item.weightpercentage &&\n          item.weightpercentage.toLowerCase().includes(searchKey)) ||\n        (item.volumevalue &&\n          item.volumevalue.toLowerCase().includes(searchKey)) ||\n        (item.uldposition1 &&\n          item.uldposition1.toLowerCase().includes(searchKey)) ||\n        (item.uldvalue1 && item.uldvalue1.toLowerCase().includes(searchKey)) ||\n        (item.uldposition2 &&\n          item.uldposition2.toLowerCase().includes(searchKey)) ||\n        (item.uldvalue2 && item.uldvalue2.toLowerCase().includes(searchKey)) ||\n        (item.uldposition3 &&\n          item.uldposition3.toLowerCase().includes(searchKey)) ||\n          (item.weightvalue && item.weightvalue.toLowerCase().includes(searchKey)) ||\n        (item.uldvalue3 && item.uldvalue3.toLowerCase().includes(searchKey)) ||\n        (item.uldposition4 &&\n          item.uldposition4.toLowerCase().includes(searchKey)) ||\n        (item.revenue && item.revenue.toLowerCase().includes(searchKey)) ||\n        (item.yeild && item.yeild.toLowerCase().includes(searchKey)) ||\n        (item.sr && item.sr.toLowerCase().includes(searchKey)) ||\n        (item.queuedBookingSR &&\n          item.queuedBookingSR.toLowerCase().includes(searchKey)) ||\n        (item.queuedBookingvolume &&\n          item.queuedBookingvolume.toLowerCase().includes(searchKey))\n      );\n    });\n    if (!filteredRows.length) {\n      setStatus(\"invalid\");\n      setData(rows);\n    } else {\n      setData(filteredRows);\n      setStatus(\"\");\n    }\n  };\nconst handleWarningStatus=()=>{\n  setStatus(\"invalid\");\n}\n  //Gets called when there is a cell edit\n  const updateCellData = (fromRow,toRow,value,updateType) => {\n    if(updateType===\"CELL_UPDATE\"){\n      console.log(\"row:\", fromRow, \"updated-Value:\", value,\"Updation-Type:\", updateType);\n    }\n    if(updateType===\"CELL_DRAG\"){\n      console.log(\"fromRow:\", fromRow,\"toRow:\",toRow, \"updated-Value:\", value,\"Updation-Type:\", updateType);\n    }\n  }\n\n  //Gets called when row bulk edit is done\n  const selectBulkData = (selectedRows) => {\n    console.log(\"selectedRows:\", selectedRows);\n  };\n  const closeWarningStatus = () => {\n    setStatus(\"\")\n  }\n  useEffect(() => {\n    //Make API call to fetch initial set of data, uncomment below code to use API call\n    // fetchData(0).then((data) => {\n    //   setItems(data);\n    // });\n    setData(rows);\n  }, [rows]);\n\n  if (data && data.length) {\n    return (\n      <div>\n        <Spreadsheet\n          rows={data}\n          textValue={searchKey}\n          globalSearchLogic={globalSearchLogic}\n          status={status}\n          closeWarningStatus={closeWarningStatus}\n          handleWarningStatus={handleWarningStatus}\n          count={data.length}\n          columns={columns}\n          airportCodes={airportCodeList}\n          gridHeight={gridHeight}\n          updateCellData={updateCellData}\n          selectBulkData={selectBulkData}\n          maxLeftPinnedColumn={maxLeftPinnedColumn}\n        />\n      </div>\n    );\n  } else return <h2>Loading Data</h2>;\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}