{"version":3,"file":"index.modern.js","sources":["../src/common/extDataGrid.js","../src/utilities/utils.js","../src/functions/DatePicker.js","../src/common/ErrorConstants.js","../src/common/ErrorMessage.js","../src/overlays/column_chooser/ItemTypes.js","../src/overlays/column_chooser/columnItem.js","../src/overlays/column_chooser/columnsList.js","../src/overlays/column_chooser/Chooser.js","../src/overlays/sorting/ItemTypes.js","../src/overlays/sorting/SortItem.js","../src/overlays/sorting/SortingList.js","../src/overlays/sorting/Sorting.js","../src/overlays/export_data/ExportData.js","../src/index.js"],"sourcesContent":["import ReactDataGrid from \"react-data-grid\";\r\n\r\nclass ExtDataGrid extends ReactDataGrid {\r\n    componentDidMount() {\r\n        this._mounted = true;\r\n        // eslint-disable-next-line prefer-destructuring\r\n        this.dataGridComponent = document.getElementsByClassName(\r\n            \"react-grid-Viewport\"\r\n        )[0];\r\n\r\n        window.addEventListener(\"resize\", this.metricsUpdated);\r\n        if (this.props.cellRangeSelection) {\r\n            // this.dataGridComponent.addEventListener(\"mouseup\", this.onWindowMouseUp);\r\n        }\r\n        this.metricsUpdated();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this._mounted = false;\r\n        window.removeEventListener(\"resize\", this.metricsUpdated);\r\n        // this.dataGridComponent.removeEventListener(\"mouseup\", this.onWindowMouseUp);\r\n    }\r\n}\r\n\r\nexport default ExtDataGrid;\r\n","export const applyFormula = (obj, columnName) => {\r\n    const val = obj;\r\n    const item = val[columnName].toString();\r\n    if (item && item.charAt(0) === \"=\") {\r\n        const operation = item.split(\"(\");\r\n        const value = operation[1]\r\n            .substring(0, operation[1].length - 1)\r\n            .split(/[,:]/);\r\n        switch (operation[0]) {\r\n            case \"=SUM\":\r\n            case \"=ADD\":\r\n            case \"=sum\":\r\n            case \"=add\":\r\n                val[columnName] = value.reduce(function (a, b) {\r\n                    return Number(a) + Number(b);\r\n                });\r\n                break;\r\n            case \"=MUL\":\r\n            case \"=mul\":\r\n                val[columnName] = value.reduce(function (a, b) {\r\n                    return Number(a) * Number(b);\r\n                });\r\n                break;\r\n            case \"=SUB\":\r\n            case \"=sub\":\r\n            case \"=DIFF\":\r\n            case \"=diff\":\r\n                val[columnName] = value.reduce(function (a, b) {\r\n                    return Number(a) - Number(b);\r\n                });\r\n                break;\r\n            case \"=min\":\r\n            case \"=MIN\":\r\n                // eslint-disable-next-line prefer-spread\r\n                val[columnName] = Math.min.apply(Math, value);\r\n                break;\r\n            case \"=max\":\r\n            case \"=MAX\":\r\n                // eslint-disable-next-line prefer-spread\r\n                val[columnName] = Math.max.apply(Math, value);\r\n                break;\r\n            default:\r\n                console.log(\"No Calculation\");\r\n        }\r\n    }\r\n    return val;\r\n};\r\n","/* eslint-disable react/destructuring-assignment */\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default class DatePicker extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            value: new Date()\r\n        };\r\n        // the variable to store component reference\r\n        this.input = null;\r\n\r\n        this.getInputNode = this.getInputNode.bind(this);\r\n        this.getValue = this.getValue.bind(this);\r\n        this.onValueChanged = this.onValueChanged.bind(this);\r\n    }\r\n\r\n    onValueChanged(ev) {\r\n        this.setState({ value: ev.target.value });\r\n    }\r\n\r\n    // returning updated object with the date value in the required format\r\n    getValue() {\r\n        const updated = {};\r\n        const date = new Date(this.state.value);\r\n        const dateTimeFormat = new Intl.DateTimeFormat(\"en-US\", {\r\n            year: \"numeric\",\r\n            month: \"numeric\",\r\n            day: \"2-digit\"\r\n        });\r\n        const [\r\n            { value: month },\r\n            ,\r\n            { value: day },\r\n            ,\r\n            { value: year }\r\n        ] = dateTimeFormat.formatToParts(date);\r\n        updated[this.props.column.key] = `${year}-${month}-${day}`;\r\n        return updated;\r\n    }\r\n\r\n    // returning the component with the reference, input\r\n    getInputNode() {\r\n        return this.input;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <input\r\n                    type=\"date\"\r\n                    ref={(ref) => {\r\n                        this.input = ref;\r\n                    }}\r\n                    value={this.state.value}\r\n                    onChange={this.onValueChanged}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nDatePicker.propTypes = {\r\n    column: PropTypes.string\r\n};\r\n","export const SEARCH_NOT_FOUNT_ERROR = \"No Records found!\";\r\n","/* eslint-disable react/prop-types */\r\n/* eslint-disable react/destructuring-assignment */\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { SEARCH_NOT_FOUNT_ERROR } from \"./ErrorConstants\";\r\n\r\nconst ErrorMessage = (props) => {\r\n    const [status, setStatus] = useState(props.status);\r\n    useEffect(() => {\r\n        setStatus(props.status);\r\n    }, [props.status]);\r\n    if (status === \"invalid\") {\r\n        return (\r\n            <div id=\"errorMsg\">\r\n                <div className=\"alert alert-danger\" role=\"alert\">\r\n                    {SEARCH_NOT_FOUNT_ERROR}\r\n                </div>\r\n                <div className=\"notification-close\">\r\n                    <FontAwesomeIcon\r\n                        icon={faTimes}\r\n                        onClick={() => {\r\n                            props.closeWarningStatus();\r\n                            props.clearSearchValue();\r\n                        }}\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    return <div />;\r\n};\r\nexport default ErrorMessage;\r\n","export const ItemTypes = {\r\n    COLUMN: \"column\"\r\n};\r\n","import React from \"react\";\r\nimport { useDrag, useDrop } from \"react-dnd\";\r\nimport PropTypes from \"prop-types\";\r\nimport { ItemTypes } from \"./ItemTypes\";\r\n\r\nconst style = {\r\n    cursor: \"move\"\r\n};\r\n\r\nconst ColumnItem = ({ id, text, moveColumn, findColumn }) => {\r\n    const originalIndex = findColumn(id).index;\r\n\r\n    const [{ isDragging }, drag] = useDrag({\r\n        item: { type: ItemTypes.COLUMN, id, originalIndex },\r\n        collect: (monitor) => ({\r\n            isDragging: monitor.isDragging()\r\n        }),\r\n        end: (dropResult, monitor) => {\r\n            // eslint-disable-next-line no-shadow\r\n            const { id: droppedId, originalIndex } = monitor.getItem();\r\n            const didDrop = monitor.didDrop();\r\n            if (!didDrop) {\r\n                moveColumn(droppedId, originalIndex);\r\n            }\r\n        }\r\n    });\r\n\r\n    const [, drop] = useDrop({\r\n        accept: ItemTypes.COLUMN,\r\n        canDrop: () => false,\r\n        hover({ id: draggedId }) {\r\n            if (draggedId !== id) {\r\n                const { index: overIndex } = findColumn(id);\r\n                moveColumn(draggedId, overIndex);\r\n            }\r\n        }\r\n    });\r\n\r\n    const opacity = isDragging ? 0.1 : 1;\r\n\r\n    return (\r\n        <div ref={(node) => drag(drop(node))} style={{ ...style, opacity }}>\r\n            {text}\r\n        </div>\r\n    );\r\n};\r\n\r\nColumnItem.propTypes = {\r\n    id: PropTypes.any,\r\n    text: PropTypes.any,\r\n    moveColumn: PropTypes.any,\r\n    findColumn: PropTypes.any\r\n};\r\n\r\nexport default ColumnItem;\r\n","/* eslint-disable react/jsx-fragments */\r\n/* eslint-disable react/destructuring-assignment */\r\nimport React, { useState, Fragment } from \"react\";\r\nimport { useDrop } from \"react-dnd\";\r\nimport update from \"immutability-helper\";\r\nimport PropTypes from \"prop-types\";\r\nimport { ItemTypes } from \"./ItemTypes\";\r\nimport ColumnItem from \"./columnItem\";\r\n\r\nconst ColumnsList = (props) => {\r\n    const [columns, setColumns] = useState([...props.columnsArray]);\r\n\r\n    const findColumn = (id) => {\r\n        const column = columns.filter((c) => `${c.id}` === id)[0];\r\n        return {\r\n            column,\r\n            index: columns.indexOf(column)\r\n        };\r\n    };\r\n\r\n    const moveColumn = (id, atIndex) => {\r\n        const { column, index } = findColumn(id);\r\n        setColumns(\r\n            update(columns, {\r\n                $splice: [\r\n                    [index, 1],\r\n                    [atIndex, 0, column]\r\n                ]\r\n            })\r\n        );\r\n        const values = [];\r\n        let temp = [];\r\n        temp = update(columns, {\r\n            $splice: [\r\n                [index, 1],\r\n                [atIndex, 0, column]\r\n            ]\r\n        });\r\n        temp.forEach((item) => {\r\n            values.push(item.id);\r\n        });\r\n        props.handleReorderList(values);\r\n    };\r\n\r\n    const [, drop] = useDrop({ accept: ItemTypes.COLUMN });\r\n\r\n    React.useEffect(() => {\r\n        setColumns(props.columnsArray);\r\n    }, [props.columnsArray]);\r\n\r\n    return (\r\n        <Fragment>\r\n            <div ref={drop} style={{ display: \"flex\", flexWrap: \"wrap\" }}>\r\n                {columns.map((column) => (\r\n                    <ColumnItem\r\n                        key={column.id}\r\n                        id={`${column.id}`}\r\n                        text={column.text}\r\n                        moveColumn={moveColumn}\r\n                        findColumn={findColumn}\r\n                    />\r\n                ))}\r\n            </div>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nColumnsList.propTypes = {\r\n    columnsArray: PropTypes.any,\r\n    handleReorderList: PropTypes.any\r\n};\r\n\r\nexport default ColumnsList;\r\n","/* eslint-disable react/destructuring-assignment */\r\n/* eslint no-unused-expressions: [\"error\", {\"allowTernary\": true }] */\r\n/* eslint-disable react/no-access-state-in-setstate */\r\n/* eslint-disable no-loop-func */\r\n/* eslint-disable no-else-return */\r\n\r\nimport React from \"react\";\r\nimport { DndProvider } from \"react-dnd\";\r\nimport { TouchBackend } from \"react-dnd-touch-backend\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTimes, faAlignJustify } from \"@fortawesome/free-solid-svg-icons\";\r\nimport PropTypes from \"prop-types\";\r\nimport ColumnsList from \"./columnsList\";\r\n\r\nclass ColumnReordering extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            columnReorderEntityList: this.props.headerKeys,\r\n            columnSelectList: this.props.columns.map((item) => item.name),\r\n            leftPinnedColumList: this.props.existingPinnedHeadersList,\r\n            isAllSelected: true,\r\n            maxLeftPinnedColumn: this.props.maxLeftPinnedColumn\r\n        };\r\n        this.setWrapperRef = this.setWrapperRef.bind(this);\r\n        this.handleClickOutside = this.handleClickOutside.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.addEventListener(\"mousedown\", this.handleClickOutside);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.removeEventListener(\"mousedown\", this.handleClickOutside);\r\n    }\r\n\r\n    setWrapperRef(node) {\r\n        this.wrapperRef = node;\r\n    }\r\n\r\n    /**\r\n     * Method to reset the coloumn list onClick of Reset button\r\n     */\r\n    resetColumnReorderList = () => {\r\n        this.setState({\r\n            columnReorderEntityList: this.props.columns.map(\r\n                (item) => item.name\r\n            ),\r\n            leftPinnedColumList: [],\r\n            isAllSelected: true\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Method to Select all options in the coloumn list onClick of Select All button\r\n     */\r\n    selectAllToColumnReOrderList = () => {\r\n        this.resetColumnReorderList();\r\n        let existingColumnReorderEntityList = this.state\r\n            .columnReorderEntityList;\r\n        let isExistingAllSelect = this.state.isAllSelected;\r\n        if (!isExistingAllSelect) {\r\n            existingColumnReorderEntityList = this.props.columns.map(\r\n                (item) => item.name\r\n            );\r\n            isExistingAllSelect = true;\r\n        } else {\r\n            existingColumnReorderEntityList = [];\r\n            isExistingAllSelect = false;\r\n        }\r\n        this.setState({\r\n            columnReorderEntityList: existingColumnReorderEntityList,\r\n            isAllSelected: isExistingAllSelect,\r\n            leftPinnedColumList: []\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Method To add a column to columnReorderEntityList when selected.\r\n     * @param {String} typeToBeAdded\r\n     */\r\n    addToColumnReorderEntityList = (typeToBeAdded) => {\r\n        let existingColumnReorderEntityList = this.state\r\n            .columnReorderEntityList;\r\n        let existingLeftPinnedList = this.state.leftPinnedColumList;\r\n        if (!existingColumnReorderEntityList.includes(typeToBeAdded)) {\r\n            let indexOfInsertion = this.state.columnSelectList.findIndex(\r\n                (item) => item === typeToBeAdded\r\n            );\r\n            while (indexOfInsertion > 0) {\r\n                if (\r\n                    existingColumnReorderEntityList.includes(\r\n                        this.state.columnSelectList[indexOfInsertion - 1]\r\n                    )\r\n                ) {\r\n                    if (\r\n                        !existingLeftPinnedList.includes(\r\n                            this.state.columnSelectList[indexOfInsertion - 1]\r\n                        )\r\n                    ) {\r\n                        indexOfInsertion = existingColumnReorderEntityList.findIndex(\r\n                            (item) =>\r\n                                item ===\r\n                                this.state.columnSelectList[\r\n                                    indexOfInsertion - 1\r\n                                ]\r\n                        );\r\n                        indexOfInsertion += 1;\r\n                        break;\r\n                    } else {\r\n                        indexOfInsertion -= 1;\r\n                    }\r\n                } else {\r\n                    indexOfInsertion -= 1;\r\n                }\r\n            }\r\n            existingColumnReorderEntityList.splice(\r\n                indexOfInsertion,\r\n                0,\r\n                typeToBeAdded\r\n            );\r\n        } else {\r\n            existingColumnReorderEntityList = existingColumnReorderEntityList.filter(\r\n                (item) => {\r\n                    if (item !== typeToBeAdded) return item;\r\n                    else return \"\";\r\n                }\r\n            );\r\n            if (existingLeftPinnedList.includes(typeToBeAdded)) {\r\n                existingLeftPinnedList = existingLeftPinnedList.filter(\r\n                    (item) => item !== typeToBeAdded\r\n                );\r\n            }\r\n        }\r\n        this.setState({\r\n            columnReorderEntityList: existingColumnReorderEntityList,\r\n            isAllSelected: false,\r\n            leftPinnedColumList: existingLeftPinnedList\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Method to handle the like-search on key stroke.\r\n     * @param {Event} e\r\n     */\r\n    filterColumnReorderList = (e) => {\r\n        const searchKey = String(e.target.value).toLowerCase();\r\n        const existingList = this.props.columns.map((item) => item.name);\r\n        let filtererdColumnReorderList = [];\r\n        if (searchKey.length > 0) {\r\n            filtererdColumnReorderList = existingList.filter((item) => {\r\n                return item.toLowerCase().includes(searchKey);\r\n            });\r\n        } else {\r\n            filtererdColumnReorderList = this.props.columns.map(\r\n                (item) => item.name\r\n            );\r\n        }\r\n        this.setState({\r\n            columnSelectList: filtererdColumnReorderList\r\n        });\r\n    };\r\n\r\n    createColumnsArrayFromProps = (colsList) => {\r\n        return colsList.map((item) => {\r\n            return {\r\n                id: item,\r\n                text: (\r\n                    <div className=\"column__reorder\" key={item}>\r\n                        <div className=\"\">\r\n                            <FontAwesomeIcon icon={faAlignJustify} />\r\n                        </div>\r\n                        <div className=\"column__reorder__name\">{item}</div>\r\n                        <div className=\"column__wrap\">\r\n                            <div className=\"column__checkbox\">\r\n                                <input\r\n                                    role=\"button\"\r\n                                    type=\"checkbox\"\r\n                                    id={`checkBoxToPinLeft_${item}`}\r\n                                    checked={this.state.leftPinnedColumList.includes(\r\n                                        item\r\n                                    )}\r\n                                    disabled={\r\n                                        this.state.maxLeftPinnedColumn -\r\n                                            this.state.leftPinnedColumList\r\n                                                .length <=\r\n                                        0\r\n                                            ? !this.state.leftPinnedColumList.includes(\r\n                                                  item\r\n                                              )\r\n                                            : false\r\n                                    }\r\n                                    onChange={() =>\r\n                                        this.reArrangeLeftPinnedColumn(item)\r\n                                    }\r\n                                />\r\n                            </div>\r\n                            <div className=\"column__txt\">Pin Left</div>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            };\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Method to handle the position of columns Names when left pinned in coloumn selector view.\r\n     * @param {String} columHeaderName\r\n     */\r\n    reArrangeLeftPinnedColumn = (columHeaderName) => {\r\n        let existingLeftPinnedList = this.state.leftPinnedColumList;\r\n        let existingColumnReorderEntityList = this.state\r\n            .columnReorderEntityList;\r\n        if (!existingLeftPinnedList.includes(columHeaderName)) {\r\n            existingLeftPinnedList.unshift(columHeaderName);\r\n        } else {\r\n            existingLeftPinnedList = existingLeftPinnedList.filter(\r\n                (item) => item !== columHeaderName\r\n            );\r\n        }\r\n        this.setState({\r\n            leftPinnedColumList: existingLeftPinnedList\r\n        });\r\n\r\n        existingLeftPinnedList.forEach((item) => {\r\n            existingColumnReorderEntityList = existingColumnReorderEntityList.filter(\r\n                (subItem) => subItem !== item\r\n            );\r\n            existingColumnReorderEntityList.unshift(item);\r\n            return null;\r\n        });\r\n        this.setState({\r\n            columnReorderEntityList: existingColumnReorderEntityList\r\n        });\r\n    };\r\n\r\n    handleReorderList = (reordered) => {\r\n        this.props.handleheaderNameList(reordered);\r\n    };\r\n\r\n    handleClickOutside(event) {\r\n        if (this.wrapperRef && !this.wrapperRef.contains(event.target)) {\r\n            this.props.closeColumnReOrdering();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"columns--grid\" ref={this.setWrapperRef}>\r\n                <div className=\"column__grid\">\r\n                    <div className=\"column__chooser\">\r\n                        <div className=\"column__header\">\r\n                            <div className=\"\">\r\n                                <strong>Column Chooser</strong>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"column__body\">\r\n                            <div>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    placeholder=\"Search column\"\r\n                                    className=\"custom__ctrl\"\r\n                                    onChange={this.filterColumnReorderList}\r\n                                />\r\n                            </div>\r\n                            <div className=\"column__wrap column__headertxt\">\r\n                                <div className=\"column__checkbox\">\r\n                                    <input\r\n                                        type=\"checkbox\"\r\n                                        id=\"selectallcolumncheckbox\"\r\n                                        onChange={() =>\r\n                                            this.selectAllToColumnReOrderList()\r\n                                        }\r\n                                        checked={\r\n                                            this.state.columnReorderEntityList\r\n                                                .length ===\r\n                                            this.props.columns.length\r\n                                        }\r\n                                    />\r\n                                </div>\r\n                                <div className=\"column__txt\">Select all</div>\r\n                            </div>\r\n                            {this.state.columnSelectList.map((item) => {\r\n                                return (\r\n                                    <div className=\"column__wrap\" key={item}>\r\n                                        <div className=\"column__checkbox\">\r\n                                            <input\r\n                                                type=\"checkbox\"\r\n                                                id={`checkboxtoselectreorder_${item}`}\r\n                                                checked={this.state.columnReorderEntityList.includes(\r\n                                                    item\r\n                                                )}\r\n                                                onChange={() =>\r\n                                                    this.addToColumnReorderEntityList(\r\n                                                        item\r\n                                                    )\r\n                                                }\r\n                                            />\r\n                                        </div>\r\n                                        <div className=\"column__txt\">\r\n                                            {item}\r\n                                        </div>\r\n                                    </div>\r\n                                );\r\n                            })}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"column__settings\">\r\n                        <div className=\"column__header\">\r\n                            <div className=\"column__headerTxt\">\r\n                                <strong>Column Setting</strong>\r\n                            </div>\r\n                            <div className=\"column__close\">\r\n                                <FontAwesomeIcon\r\n                                    className=\"icon-close\"\r\n                                    icon={faTimes}\r\n                                    onClick={() =>\r\n                                        this.props.closeColumnReOrdering()\r\n                                    }\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"column__header\">\r\n                            <div className=\"column__headerTxt\">\r\n                                <strong>\r\n                                    &nbsp; &nbsp; Selected Column Count :{\" \"}\r\n                                    {this.state.columnReorderEntityList.length}\r\n                                </strong>\r\n                            </div>\r\n                            <div className=\"column__headerTxt\">\r\n                                {this.state.maxLeftPinnedColumn -\r\n                                    this.state.leftPinnedColumList.length >\r\n                                0 ? (\r\n                                    <strong>\r\n                                        &nbsp; &nbsp; Left Pinned Column Count\r\n                                        Remaining :{\" \"}\r\n                                        {this.state.maxLeftPinnedColumn -\r\n                                            this.state.leftPinnedColumList\r\n                                                .length}\r\n                                    </strong>\r\n                                ) : (\r\n                                    <strong style={{ color: \"red\" }}>\r\n                                        &nbsp; &nbsp; Maximum Count Of Left Pin\r\n                                        Columns REACHED\r\n                                    </strong>\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"column__body\">\r\n                            <DndProvider\r\n                                backend={TouchBackend}\r\n                                options={{ enableMouseEvents: true }}\r\n                            >\r\n                                <ColumnsList\r\n                                    columnsArray={this.createColumnsArrayFromProps(\r\n                                        this.state.columnReorderEntityList\r\n                                    )}\r\n                                    handleReorderList={this.handleReorderList}\r\n                                />\r\n                            </DndProvider>\r\n                        </div>\r\n                        <div className=\"column__footer\">\r\n                            <div className=\"column__btns\">\r\n                                <button\r\n                                    type=\"button\"\r\n                                    className=\"btns\"\r\n                                    onClick={() =>\r\n                                        this.resetColumnReorderList()\r\n                                    }\r\n                                >\r\n                                    Reset\r\n                                </button>\r\n                                <button\r\n                                    type=\"button\"\r\n                                    className=\"btns\"\r\n                                    onClick={() =>\r\n                                        this.props.closeColumnReOrdering()\r\n                                    }\r\n                                >\r\n                                    Cancel\r\n                                </button>\r\n                                <button\r\n                                    type=\"button\"\r\n                                    className=\"btns btns__save\"\r\n                                    onClick={() =>\r\n                                        this.props.updateTableAsPerRowChooser(\r\n                                            this.state.columnReorderEntityList,\r\n                                            this.state.leftPinnedColumList\r\n                                        )\r\n                                    }\r\n                                >\r\n                                    Save\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nColumnReordering.propTypes = {\r\n    headerKeys: PropTypes.any,\r\n    columns: PropTypes.any,\r\n    existingPinnedHeadersList: PropTypes.any,\r\n    maxLeftPinnedColumn: PropTypes.any,\r\n    closeColumnReOrdering: PropTypes.any,\r\n    handleheaderNameList: PropTypes.any,\r\n    updateTableAsPerRowChooser: PropTypes.any\r\n};\r\n\r\nexport default ColumnReordering;\r\n","export const ItemTypes = {\r\n    CARD: \"sort\"\r\n};\r\n","import React from \"react\";\r\nimport { useDrag, useDrop } from \"react-dnd\";\r\nimport PropTypes from \"prop-types\";\r\nimport { ItemTypes } from \"./ItemTypes\";\r\n\r\nconst style = {\r\n    cursor: \"move\"\r\n};\r\n\r\nconst Card = ({ id, text, moveCard, findCard }) => {\r\n    const originalIndex = findCard(id).index;\r\n\r\n    const [{ isDragging }, drag] = useDrag({\r\n        item: { type: ItemTypes.CARD, id, originalIndex },\r\n        collect: (monitor) => ({\r\n            isDragging: monitor.isDragging()\r\n        }),\r\n        end: (dropResult, monitor) => {\r\n            // eslint-disable-next-line no-shadow\r\n            const { id: droppedId, originalIndex } = monitor.getItem();\r\n            const didDrop = monitor.didDrop();\r\n            if (!didDrop) {\r\n                moveCard(droppedId, originalIndex);\r\n            }\r\n        }\r\n    });\r\n\r\n    const [, drop] = useDrop({\r\n        accept: ItemTypes.CARD,\r\n        canDrop: () => false,\r\n        hover({ id: draggedId }) {\r\n            if (draggedId !== id) {\r\n                const { index: overIndex } = findCard(id);\r\n                moveCard(draggedId, overIndex);\r\n            }\r\n        }\r\n    });\r\n\r\n    const opacity = isDragging ? 0.5 : 1;\r\n\r\n    return (\r\n        <div ref={(node) => drag(drop(node))} style={{ ...style, opacity }}>\r\n            {text}\r\n        </div>\r\n    );\r\n};\r\n\r\nCard.propTypes = {\r\n    id: PropTypes.any,\r\n    text: PropTypes.any,\r\n    moveCard: PropTypes.any,\r\n    findCard: PropTypes.any\r\n};\r\n\r\nexport default Card;\r\n","/* eslint-disable react/jsx-fragments */\r\n/* eslint-disable react/destructuring-assignment */\r\nimport React, { useState, Fragment } from \"react\";\r\nimport { useDrop } from \"react-dnd\";\r\nimport update from \"immutability-helper\";\r\nimport PropTypes from \"prop-types\";\r\nimport Card from \"./SortItem\";\r\nimport { ItemTypes } from \"./ItemTypes\";\r\n\r\nconst SortingList = (props) => {\r\n    const [cards, setCards] = useState([...props.sortsArray]);\r\n\r\n    const findCard = (id) => {\r\n        const card = cards.filter((c) => `${c.id}` === id)[0];\r\n        return {\r\n            card,\r\n            index: cards.indexOf(card)\r\n        };\r\n    };\r\n\r\n    const moveCard = (id, atIndex) => {\r\n        const { card, index } = findCard(id);\r\n        setCards(\r\n            update(cards, {\r\n                $splice: [\r\n                    [index, 1],\r\n                    [atIndex, 0, card]\r\n                ]\r\n            })\r\n        );\r\n\r\n        const values = [];\r\n        let temp = [];\r\n        temp = update(cards, {\r\n            $splice: [\r\n                [index, 1],\r\n                [atIndex, 0, card]\r\n            ]\r\n        });\r\n        temp.forEach((item) => {\r\n            values.push(item.id);\r\n        });\r\n        props.handleReorderListOfSort(values);\r\n    };\r\n\r\n    const [, drop] = useDrop({ accept: ItemTypes.CARD });\r\n\r\n    React.useEffect(() => {\r\n        setCards(props.sortsArray);\r\n    }, [props.sortsArray]);\r\n\r\n    return (\r\n        <Fragment>\r\n            <div ref={drop} style={{ display: \"flex\", flexWrap: \"wrap\" }}>\r\n                {cards.map((card) => (\r\n                    <Card\r\n                        key={card.id}\r\n                        id={`${card.id}`}\r\n                        text={card.text}\r\n                        moveCard={moveCard}\r\n                        findCard={findCard}\r\n                    />\r\n                ))}\r\n            </div>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nSortingList.propTypes = {\r\n    sortsArray: PropTypes.any,\r\n    handleReorderListOfSort: PropTypes.any\r\n};\r\n\r\nexport default SortingList;\r\n","/* eslint-disable react/destructuring-assignment */\r\n/* eslint no-unused-expressions: [\"error\", {\"allowTernary\": true }] */\r\n/* eslint-disable react/no-access-state-in-setstate */\r\nimport React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n    faTimes,\r\n    faAlignJustify,\r\n    faTrash,\r\n    faPlus,\r\n    faCopy\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { DndProvider } from \"react-dnd\";\r\nimport { TouchBackend } from \"react-dnd-touch-backend\";\r\nimport PropTypes from \"prop-types\";\r\nimport SortingList from \"./SortingList\";\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            rowList: [true],\r\n            sortingOrderList:\r\n                this.props.sortingParamsObjectList === undefined\r\n                    ? []\r\n                    : this.props.sortingParamsObjectList,\r\n            errorMessage: false\r\n        };\r\n        this.setWrapperRef = this.setWrapperRef.bind(this);\r\n        this.handleClickOutside = this.handleClickOutside.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.addEventListener(\"mousedown\", this.handleClickOutside);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.removeEventListener(\"mousedown\", this.handleClickOutside);\r\n    }\r\n\r\n    setWrapperRef(node) {\r\n        this.wrapperRef = node;\r\n    }\r\n\r\n    add = () => {\r\n        const rowList = [...this.state.rowList];\r\n        rowList.push(true);\r\n        const existingSortingOrderList = this.state.sortingOrderList;\r\n        existingSortingOrderList.push({\r\n            sortBy: this.props.columnFieldValue[0],\r\n            order: \"Ascending\",\r\n            sortOn: \"Value\"\r\n        });\r\n        this.setState({\r\n            rowList,\r\n            sortingOrderList: existingSortingOrderList\r\n        });\r\n    };\r\n\r\n    copy = (i) => {\r\n        const rowList = [...this.state.sortingOrderList];\r\n        rowList.push(JSON.parse(JSON.stringify(rowList[i])));\r\n        this.setState({ sortingOrderList: rowList });\r\n    };\r\n\r\n    clearAll = () => {\r\n        this.setState({ sortingOrderList: [], errorMessage: false });\r\n        this.props.clearAllSortingParams();\r\n    };\r\n\r\n    remove = (i) => {\r\n        const sortingOrderList = [...this.state.sortingOrderList];\r\n        sortingOrderList.splice(i, 1);\r\n        this.setState({ sortingOrderList });\r\n        if (sortingOrderList.length <= 1) {\r\n            this.setState({ errorMessage: false });\r\n        }\r\n    };\r\n\r\n    createColumnsArrayFromProps = (rowsValue) => {\r\n        return rowsValue.map((row, index) => {\r\n            return {\r\n                id: index,\r\n                text: (\r\n                    <div className=\"sort__bodyContent\" key={row}>\r\n                        <div className=\"sort__reorder\">\r\n                            <div className=\"\">\r\n                                <div>&nbsp;</div>\r\n                            </div>\r\n\r\n                            <div className=\"sort__icon\">\r\n                                <FontAwesomeIcon icon={faAlignJustify} />\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"sort__reorder\">\r\n                            <div className=\"\">\r\n                                <div>Sort by</div>\r\n                            </div>\r\n\r\n                            <div className=\"sort__file\">\r\n                                <select\r\n                                    className=\"custom__ctrl\"\r\n                                    name=\"sortBy\"\r\n                                    onChange={(e) =>\r\n                                        this.captureSortingFeildValues(\r\n                                            e,\r\n                                            index,\r\n                                            \"sortBy\"\r\n                                        )\r\n                                    }\r\n                                    value={row.sortBy}\r\n                                >\r\n                                    {this.props.columnFieldValue.map((item) => (\r\n                                        <option key={item}>{item}</option>\r\n                                    ))}\r\n                                </select>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"sort__reorder\">\r\n                            <div className=\"\">\r\n                                <div>Sort on</div>\r\n                            </div>\r\n\r\n                            <div className=\"sort__file\">\r\n                                <select\r\n                                    className=\"custom__ctrl\"\r\n                                    name=\"sortOn\"\r\n                                    onChange={(e) =>\r\n                                        this.captureSortingFeildValues(\r\n                                            e,\r\n                                            index,\r\n                                            \"sortOn\"\r\n                                        )\r\n                                    }\r\n                                    value={row.sortOn}\r\n                                >\r\n                                    <option>Value</option>\r\n                                </select>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"sort__reorder\">\r\n                            <div className=\"\">\r\n                                <div>Order</div>\r\n                            </div>\r\n\r\n                            <div className=\"sort__file\">\r\n                                <select\r\n                                    className=\"custom__ctrl\"\r\n                                    name=\"order\"\r\n                                    onChange={(e) =>\r\n                                        this.captureSortingFeildValues(\r\n                                            e,\r\n                                            index,\r\n                                            \"order\"\r\n                                        )\r\n                                    }\r\n                                    value={row.order}\r\n                                >\r\n                                    <option>Ascending</option>\r\n                                    <option>Descending</option>\r\n                                </select>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"sort__reorder\">\r\n                            <div className=\"\">\r\n                                <div>&nbsp;</div>\r\n                            </div>\r\n\r\n                            <div className=\"sort__icon\">\r\n                                <FontAwesomeIcon\r\n                                    icon={faCopy}\r\n                                    title=\"Copy\"\r\n                                    onClick={() => this.copy(index)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"sort__reorder\">\r\n                            <div className=\"\">\r\n                                <div>&nbsp;</div>\r\n                            </div>\r\n\r\n                            <div className=\"sort__icon\">\r\n                                <FontAwesomeIcon\r\n                                    icon={faTrash}\r\n                                    title=\"Delete\"\r\n                                    onClick={() => this.remove(index)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            };\r\n        });\r\n    };\r\n\r\n    captureSortingFeildValues = (event, index, sortingKey) => {\r\n        const existingSortingOrderList = this.state.sortingOrderList;\r\n\r\n        if (sortingKey === \"sortBy\") {\r\n            existingSortingOrderList[index].sortBy = event.target.value;\r\n        }\r\n        if (sortingKey === \"order\") {\r\n            existingSortingOrderList[index].order = event.target.value;\r\n        }\r\n        if (\r\n            existingSortingOrderList[index].sortOn === \"\" ||\r\n            existingSortingOrderList[index].sortOn === undefined\r\n        ) {\r\n            existingSortingOrderList[index].sortOn = \"Value\";\r\n        }\r\n        this.setState({\r\n            sortingOrderList: existingSortingOrderList\r\n        });\r\n    };\r\n\r\n    updateTableAsPerSortCondition = () => {\r\n        const unique = new Set();\r\n        const showError = this.state.sortingOrderList.some(\r\n            (element) => unique.size === unique.add(element.sortBy).size\r\n        );\r\n        showError\r\n            ? this.setState({\r\n                  errorMessage: true\r\n              })\r\n            : this.setState({\r\n                  errorMessage: false\r\n              });\r\n        if (!showError) {\r\n            this.props.setTableAsPerSortingParams(this.state.sortingOrderList);\r\n        }\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @param {*} reOrderedSortingList\r\n     */\r\n    handleReorderListOfSort = (reOrderedIndexList) => {\r\n        this.props.handleTableSortSwap(reOrderedIndexList);\r\n    };\r\n\r\n    handleClickOutside(event) {\r\n        if (this.wrapperRef && !this.wrapperRef.contains(event.target)) {\r\n            this.props.closeSorting();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"sorts--grid\" ref={this.setWrapperRef}>\r\n                <div className=\"sort__grid\">\r\n                    <div className=\"sort__settings\">\r\n                        <div className=\"sort__header\">\r\n                            <div className=\"sort__headerTxt\">\r\n                                <strong>Sort </strong>\r\n                            </div>\r\n\r\n                            <div className=\"sort__close\">\r\n                                <FontAwesomeIcon\r\n                                    className=\"icon-close\"\r\n                                    icon={faTimes}\r\n                                    onClick={() => this.props.closeSorting()}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"sort__body\">\r\n                            <DndProvider\r\n                                backend={TouchBackend}\r\n                                options={{ enableMouseEvents: true }}\r\n                            >\r\n                                <SortingList\r\n                                    handleReorderListOfSort={\r\n                                        this.handleReorderListOfSort\r\n                                    }\r\n                                    sortsArray={this.createColumnsArrayFromProps(\r\n                                        this.state.sortingOrderList\r\n                                    )}\r\n                                />\r\n                            </DndProvider>\r\n                            <div className=\"sort-warning\">\r\n                                {this.state.errorMessage ? (\r\n                                    <span className=\"alert alert-danger\">\r\n                                        Sort by opted are same, Please choose\r\n                                        different one.\r\n                                    </span>\r\n                                ) : (\r\n                                    \"\"\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"sort__new\">\r\n                            <div className=\"sort__section\">\r\n                                <FontAwesomeIcon\r\n                                    icon={faPlus}\r\n                                    className=\"sort__icon\"\r\n                                />\r\n                                <div\r\n                                    role=\"button\"\r\n                                    tabIndex={0}\r\n                                    className=\"sort__txt\"\r\n                                    onClick={() => this.add()}\r\n                                    onKeyDown={() => this.add()}\r\n                                >\r\n                                    New Sort\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"sort__footer\">\r\n                            <div className=\"sort__btns\">\r\n                                <button\r\n                                    type=\"button\"\r\n                                    className=\"btns\"\r\n                                    onClick={this.clearAll}\r\n                                >\r\n                                    Clear All\r\n                                </button>\r\n\r\n                                <button\r\n                                    type=\"button\"\r\n                                    className=\"btns btns__save\"\r\n                                    onClick={() =>\r\n                                        this.updateTableAsPerSortCondition()\r\n                                    }\r\n                                >\r\n                                    Ok\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nApp.propTypes = {\r\n    sortingParamsObjectList: PropTypes.any,\r\n    closeSorting: PropTypes.any,\r\n    columnFieldValue: PropTypes.any,\r\n    clearAllSortingParams: PropTypes.any,\r\n    setTableAsPerSortingParams: PropTypes.any,\r\n    handleTableSortSwap: PropTypes.any\r\n};\r\n\r\nexport default App;\r\n","/* eslint-disable react/destructuring-assignment */\r\nimport React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n    faTimes,\r\n    faFilePdf,\r\n    faFileExcel,\r\n    faFileCsv\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport JSPDF from \"jspdf\";\r\nimport \"jspdf-autotable\";\r\nimport * as FileSaver from \"file-saver\";\r\nimport * as XLSX from \"xlsx\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nlet downLaodFileType = [];\r\nclass ExportData extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            columnValueList: this.props.columnsList,\r\n            columnEntityList: this.props.columnsList,\r\n            isAllSelected: true,\r\n            downLaodFileType: [],\r\n            filteredRow: [],\r\n            warning: \"\",\r\n            clickTag: \"none\"\r\n        };\r\n        this.setWrapperRef = this.setWrapperRef.bind(this);\r\n        this.handleClickOutside = this.handleClickOutside.bind(this);\r\n        this.selectDownLoadType = this.selectDownLoadType.bind(this);\r\n        this.exportValidation = this.exportValidation.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.addEventListener(\"mousedown\", this.handleClickOutside);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.removeEventListener(\"mousedown\", this.handleClickOutside);\r\n    }\r\n\r\n    setWrapperRef(node) {\r\n        this.wrapperRef = node;\r\n    }\r\n\r\n    resetColumnExportList = () => {\r\n        this.setState({\r\n            columnEntityList: [],\r\n            isAllSelected: false\r\n        });\r\n    };\r\n\r\n    selectAllToColumnList = () => {\r\n        this.resetColumnExportList();\r\n        this.setState({\r\n            // eslint-disable-next-line react/no-access-state-in-setstate\r\n            columnEntityList: !this.state.isAllSelected\r\n                ? this.props.columnsList\r\n                : [],\r\n            // eslint-disable-next-line react/no-access-state-in-setstate\r\n            isAllSelected: !this.state.isAllSelected\r\n        });\r\n    };\r\n\r\n    addToColumnEntityList = (typeToBeAdded) => {\r\n        // eslint-disable-next-line react/no-access-state-in-setstate\r\n        let existingColumnEntityList = this.state.columnEntityList;\r\n        if (!existingColumnEntityList.includes(typeToBeAdded)) {\r\n            existingColumnEntityList.push(typeToBeAdded);\r\n        } else {\r\n            existingColumnEntityList = existingColumnEntityList.filter(\r\n                (item) => {\r\n                    return item !== typeToBeAdded;\r\n                }\r\n            );\r\n        }\r\n        this.setState({\r\n            columnEntityList: existingColumnEntityList,\r\n            isAllSelected: false\r\n        });\r\n    };\r\n\r\n    selectDownLoadType = (event) => {\r\n        if (\r\n            event.target.checked &&\r\n            !this.state.downLaodFileType.includes(event.target.value)\r\n        ) {\r\n            downLaodFileType.push(event.target.value);\r\n            this.setState({ downLaodFileType });\r\n        } else {\r\n            downLaodFileType.forEach(function (value, index) {\r\n                if (value === event.target.value) {\r\n                    downLaodFileType = downLaodFileType.splice(index, value);\r\n                }\r\n            });\r\n            this.setState({ downLaodFileType });\r\n        }\r\n    };\r\n\r\n    exportRowData = () => {\r\n        const columnVlaueList = this.state.columnEntityList;\r\n        if (\r\n            columnVlaueList.length > 0 &&\r\n            this.state.downLaodFileType.length > 0\r\n        ) {\r\n            this.props.rows.forEach((row) => {\r\n                const keys = Object.getOwnPropertyNames(row);\r\n                const filteredColumnVal = {};\r\n                keys.forEach(function (key) {\r\n                    columnVlaueList.forEach((columnName) => {\r\n                        if (columnName.key === key)\r\n                            filteredColumnVal[key] = row[key];\r\n                    });\r\n                });\r\n                this.state.filteredRow.push(filteredColumnVal);\r\n            });\r\n\r\n            this.state.downLaodFileType.forEach((item) => {\r\n                if (item === \"pdf\") this.downloadPDF();\r\n                else if (item === \"excel\") this.downloadXLSFile();\r\n                else this.downloadCSVFile();\r\n            });\r\n        }\r\n    };\r\n\r\n    downloadPDF = () => {\r\n        const unit = \"pt\";\r\n        const size = \"A4\"; // Use A1, A2, A3 or A4\r\n        const orientation = \"landscape\"; // portrait or landscape\r\n\r\n        const marginLeft = 300;\r\n        const doc = new JSPDF(orientation, unit, size);\r\n\r\n        doc.setFontSize(15);\r\n\r\n        const title = \"iCargo Report\";\r\n        const headers = [\r\n            this.state.columnEntityList.map((column) => {\r\n                return column.name;\r\n            })\r\n        ];\r\n        const dataValues = [];\r\n        this.props.rows.forEach((row) => {\r\n            const keys = Object.keys(row);\r\n            const filteredColumnVal = [];\r\n            this.state.columnEntityList.forEach((columnName) => {\r\n                keys.forEach((key) => {\r\n                    if (columnName.key === key)\r\n                        filteredColumnVal.push(row[key]);\r\n                });\r\n            });\r\n            dataValues.push(filteredColumnVal);\r\n        });\r\n\r\n        const content = {\r\n            startY: 50,\r\n            head: headers,\r\n            body: dataValues\r\n        };\r\n\r\n        doc.text(title, marginLeft, 40);\r\n        doc.autoTable(content);\r\n        doc.save(\"report.pdf\");\r\n    };\r\n\r\n    downloadCSVFile = () => {\r\n        const fileType =\r\n            \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\r\n        const fileExtension = \".csv\";\r\n        const fileName = \"CSVDownload\";\r\n        const ws = XLSX.utils.json_to_sheet(this.state.filteredRow);\r\n        const wb = { Sheets: { data: ws }, SheetNames: [\"data\"] };\r\n        const excelBuffer = XLSX.write(wb, { bookType: \"csv\", type: \"array\" });\r\n        const data = new Blob([excelBuffer], { type: fileType });\r\n        FileSaver.saveAs(data, fileName + fileExtension);\r\n    };\r\n\r\n    downloadXLSFile = () => {\r\n        const fileType =\r\n            \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\r\n        const fileExtension = \".xlsx\";\r\n        const fileName = \"XLSXDownload\";\r\n        const ws = XLSX.utils.json_to_sheet(this.state.filteredRow);\r\n        const wb = { Sheets: { data: ws }, SheetNames: [\"data\"] };\r\n        const excelBuffer = XLSX.write(wb, { bookType: \"xlsx\", type: \"array\" });\r\n        const data = new Blob([excelBuffer], { type: fileType });\r\n        FileSaver.saveAs(data, fileName + fileExtension);\r\n    };\r\n\r\n    columnSearchLogic = (e) => {\r\n        const searchKey = String(e.target.value).toLowerCase();\r\n        const filteredRows = this.props.columnsList.filter((item) => {\r\n            return item.name.toLowerCase().includes(searchKey);\r\n        });\r\n        if (!filteredRows.length) {\r\n            this.setState({ columnValueList: this.props.columnsList });\r\n        } else {\r\n            this.setState({ columnValueList: filteredRows });\r\n        }\r\n    };\r\n\r\n    exportValidation = () => {\r\n        const columnLength = this.state.columnEntityList.length;\r\n        const fileLength = this.state.downLaodFileType.length;\r\n        if (columnLength > 0 && fileLength > 0) {\r\n            this.exportRowData();\r\n            this.setState({ clickTag: \"none\" });\r\n        } else if (columnLength === 0) {\r\n            this.setState({ warning: \"Column\" });\r\n            this.setState({ clickTag: \"\" });\r\n        } else if (fileLength === 0) {\r\n            this.setState({ warning: \"File Type\" });\r\n            this.setState({ clickTag: \"\" });\r\n        }\r\n        if (columnLength === 0 && fileLength === 0) {\r\n            this.setState({ warning: \"File Type & Column\" });\r\n            this.setState({ clickTag: \"\" });\r\n        }\r\n    };\r\n\r\n    handleClickOutside(event) {\r\n        if (this.wrapperRef && !this.wrapperRef.contains(event.target)) {\r\n            this.props.closeExport();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"exports--grid\" ref={this.setWrapperRef}>\r\n                <div className=\"export__grid\">\r\n                    <div className=\"export__chooser\">\r\n                        <div className=\"export__header\">\r\n                            <div className=\"\">\r\n                                <strong>Export Data</strong>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"export__body\">\r\n                            <div>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    placeholder=\"Search export\"\r\n                                    className=\"custom__ctrl\"\r\n                                    onChange={this.columnSearchLogic}\r\n                                />\r\n                            </div>\r\n                            <div className=\"export__wrap export__headertxt\">\r\n                                <div className=\"export__checkbox\">\r\n                                    <input\r\n                                        className=\"selectColumn\"\r\n                                        type=\"checkbox\"\r\n                                        onChange={() =>\r\n                                            this.selectAllToColumnList()\r\n                                        }\r\n                                        checked={this.state.isAllSelected}\r\n                                    />\r\n                                </div>\r\n                                <div className=\"export__txt\">Select All</div>\r\n                            </div>\r\n                            {this.state.columnValueList &&\r\n                            this.state.columnValueList.length > 0\r\n                                ? this.state.columnValueList.map((column) => {\r\n                                      return (\r\n                                          <div\r\n                                              className=\"export__wrap\"\r\n                                              key={column.key}\r\n                                          >\r\n                                              <div className=\"export__checkbox\">\r\n                                                  <input\r\n                                                      type=\"checkbox\"\r\n                                                      checked={this.state.columnEntityList.includes(\r\n                                                          column\r\n                                                      )}\r\n                                                      onChange={() =>\r\n                                                          this.addToColumnEntityList(\r\n                                                              column\r\n                                                          )\r\n                                                      }\r\n                                                  />\r\n                                              </div>\r\n                                              <div className=\"export__txt\">\r\n                                                  {column.name}\r\n                                              </div>\r\n                                          </div>\r\n                                      );\r\n                                  })\r\n                                : \"\"}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"export__settings\">\r\n                        <div className=\"export__header\">\r\n                            <div className=\"export__headerTxt\" />\r\n                            <div className=\"export__close\">\r\n                                <FontAwesomeIcon\r\n                                    icon={faTimes}\r\n                                    className=\"icon-close\"\r\n                                    onClick={this.props.closeExport}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"export__as\">Export as</div>\r\n                        <div className=\"export__body\">\r\n                            <div className=\"export__reorder\">\r\n                                <div className=\"\">\r\n                                    <input\r\n                                        type=\"checkbox\"\r\n                                        name=\"pdf\"\r\n                                        value=\"pdf\"\r\n                                        onChange={this.selectDownLoadType}\r\n                                    />\r\n                                </div>\r\n                                <div className=\"export__file\">\r\n                                    <FontAwesomeIcon\r\n                                        icon={faFilePdf}\r\n                                        className=\"temp\"\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"export__reorder\">\r\n                                <div className=\"\">\r\n                                    <input\r\n                                        type=\"checkbox\"\r\n                                        name=\"excel\"\r\n                                        value=\"excel\"\r\n                                        onChange={this.selectDownLoadType}\r\n                                    />\r\n                                </div>\r\n                                <div className=\"export__file\">\r\n                                    <FontAwesomeIcon\r\n                                        icon={faFileExcel}\r\n                                        className=\"temp\"\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"export__reorder\">\r\n                                <div className=\"\">\r\n                                    <input\r\n                                        type=\"checkbox\"\r\n                                        name=\"csv\"\r\n                                        value=\"csv\"\r\n                                        onChange={this.selectDownLoadType}\r\n                                    />\r\n                                </div>\r\n                                <div className=\"export__file\">\r\n                                    <FontAwesomeIcon\r\n                                        icon={faFileCsv}\r\n                                        className=\"temp\"\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"exportWarning\">\r\n                                <span\r\n                                    style={{ display: this.state.clickTag }}\r\n                                    className=\"alert alert-danger\"\r\n                                >\r\n                                    You have not selected{\" \"}\r\n                                    <strong>{this.state.warning}</strong>\r\n                                </span>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"export__footer\">\r\n                            <div className=\"export__btns\">\r\n                                <button\r\n                                    type=\"button\"\r\n                                    className=\"btns\"\r\n                                    onClick={() => this.props.closeExport()}\r\n                                >\r\n                                    Cancel\r\n                                </button>\r\n                                <button\r\n                                    type=\"button\"\r\n                                    className=\"btns btns__save\"\r\n                                    onClick={() => {\r\n                                        this.exportValidation();\r\n                                    }}\r\n                                >\r\n                                    Export\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nExportData.propTypes = {\r\n    columnsList: PropTypes.any,\r\n    closeExport: PropTypes.any,\r\n    rows: PropTypes.any\r\n};\r\n\r\nexport default ExportData;\r\n","/* eslint-disable lines-between-class-members */\r\n/* eslint-disable react/no-access-state-in-setstate */\r\n/* eslint-disable jsx-a11y/click-events-have-key-events */\r\n/* eslint-disable jsx-a11y/no-static-element-interactions */\r\n/* eslint-disable react/destructuring-assignment */\r\nimport React, { Component } from \"react\";\r\n\r\nimport { Toolbar, Data, Filters, Editors } from \"react-data-grid-addons\";\r\nimport { FormControl } from \"react-bootstrap\";\r\nimport {\r\n    faSortAmountDown,\r\n    faColumns,\r\n    faShareAlt,\r\n    faSortDown,\r\n    faSave\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport PropTypes from \"prop-types\";\r\nimport ExtDataGrid from \"./common/extDataGrid\";\r\nimport { applyFormula } from \"./utilities/utils\";\r\nimport DatePicker from \"./functions/DatePicker\";\r\nimport ErrorMessage from \"./common/ErrorMessage\";\r\nimport ColumnReordering from \"./overlays/column_chooser/Chooser\";\r\nimport Sorting from \"./overlays/sorting/Sorting\";\r\nimport ExportData from \"./overlays/export_data/ExportData\";\r\n\r\nconst { DropDownEditor } = Editors;\r\nconst selectors = Data.Selectors;\r\nlet swapList = [];\r\nlet swapSortList = [];\r\nconst { AutoCompleteFilter, NumericFilter } = Filters;\r\n\r\nclass Spreadsheet extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        const airportCodes = [];\r\n        const { dataSet, pageSize } = this.props;\r\n        // this.props.airportCodes.forEach((item) => {\r\n        //     airportCodes.push({ id: item, value: item });\r\n        // });\r\n        const dataSetVar = JSON.parse(JSON.stringify(dataSet));\r\n        this.state = {\r\n            warningStatus: \"\",\r\n            height: 680,\r\n            // displayNoRows: \"none\",\r\n            // searchIconDisplay: \"\",\r\n            searchValue: \"\",\r\n            sortColumn: \"\",\r\n            sortDirection: \"NONE\",\r\n            // filter: {},\r\n            pageRowCount: pageSize,\r\n            pageIndex: 1,\r\n            dataSet: dataSetVar,\r\n            subDataSet: [],\r\n            rows: dataSetVar ? dataSetVar.slice(0, 500) : [],\r\n            selectedIndexes: [],\r\n            junk: {},\r\n            // topLeft: {},\r\n            columnReorderingComponent: null,\r\n            exportComponent: null,\r\n            filteringRows: this.props.rows,\r\n            tempRows: this.props.rows,\r\n            sortingPanelComponent: null,\r\n            count: this.props.rows.length,\r\n            sortingOrderSwapList: [],\r\n            sortingParamsObjectList: [],\r\n            // eslint-disable-next-line react/no-unused-state\r\n            pinnedReorder: false,\r\n            columns: this.props.columns.map((item) => {\r\n                const colItem = item;\r\n                if (colItem.editor === \"DatePicker\") {\r\n                    colItem.editor = DatePicker;\r\n                } else if (\r\n                    colItem.editor === \"DropDown\" &&\r\n                    colItem.dataSource\r\n                ) {\r\n                    colItem.editor = (\r\n                        <DropDownEditor options={colItem.dataSource} />\r\n                    );\r\n                } else if (colItem.editor === \"Text\") {\r\n                    colItem.editor = \"text\";\r\n                } else {\r\n                    colItem.editor = null;\r\n                }\r\n                if (colItem.filterType === \"numeric\") {\r\n                    colItem.filterRenderer = NumericFilter;\r\n                } else {\r\n                    colItem.filterRenderer = AutoCompleteFilter;\r\n                }\r\n                return colItem;\r\n            })\r\n        };\r\n        // document.addEventListener(\"copy\", this.handleCopy);\r\n        // document.addEventListener(\"paste\", this.handlePaste);\r\n        this.handleSearchValue = this.handleSearchValue.bind(this);\r\n        this.clearSearchValue = this.clearSearchValue.bind(this);\r\n        this.handleFilterChange = this.handleFilterChange.bind(this);\r\n\r\n        this.formulaAppliedCols = this.props.columns.filter((item) => {\r\n            return item.formulaApplicable;\r\n        });\r\n    }\r\n\r\n    // updateRows = (startIdx, newRows) => {\r\n    //   this.setState((state) => {\r\n    //     const rows = state.rows.slice();\r\n    //     for (let i = 0; i < newRows.length; i++) {\r\n    //       if (startIdx + i < rows.length) {\r\n    //         rows[startIdx + i] = {\r\n    //           ...rows[startIdx + i],\r\n    //           ...newRows[i],\r\n    //         };\r\n    //       }\r\n    //     }\r\n    //     return {\r\n    //       rows,\r\n    //     };\r\n    //   });\r\n    // };\r\n\r\n    // rowGetter = (i) => {\r\n    // console.log(i)\r\n    //   const { rows } = this.state;\r\n    //   return rows[i];\r\n    // };\r\n\r\n    // handleCopy = (e) => {\r\n    //   e.preventDefault();\r\n    //   const { topLeft, botRight } = this.state;\r\n    //   const text = range(topLeft.rowIdx, botRight.rowIdx + 1)\r\n    //     .map((rowIdx) =>\r\n    //       this.state.columns\r\n    //         .slice(topLeft.colIdx - 1, botRight.colIdx)\r\n    //         .map((col) => this.rowGetter(rowIdx)[col.key])\r\n    //         .join(\"\\t\")\r\n    //     )\r\n    //     .join(\"\\n\");\r\n    //   e.clipboardData.setData(\"text/plain\", text);\r\n    // };\r\n\r\n    // handlePaste = (e) => {\r\n    //   e.preventDefault();\r\n    //   const { topLeft } = this.state;\r\n    //   const newRows = [];\r\n    //   const pasteData = defaultParsePaste(e.clipboardData.getData(\"text/plain\"));\r\n    //   pasteData.forEach((row) => {\r\n    //     const rowData = {};\r\n    //     // Merge the values from pasting and the keys from the columns\r\n    //     this.state.columns\r\n    //       .slice(topLeft.colIdx - 1, topLeft.colIdx - 1 + row.length)\r\n    //       .forEach((col, j) => {\r\n    //         rowData[col.key] = row[j];\r\n    //       });\r\n    //     newRows.push(rowData);\r\n    //   });\r\n    //   this.updateRows(topLeft.rowIdx, newRows);\r\n    // };\r\n\r\n    // setSelection = (args) => {\r\n    //   this.setState({\r\n    //     topLeft: {\r\n    //       rowIdx: args.topLeft.rowIdx,\r\n    //       colIdx: args.topLeft.idx,\r\n    //     },\r\n    //     botRight: {\r\n    //       rowIdx: args.bottomRight.rowIdx,\r\n    //       colIdx: args.bottomRight.idx,\r\n    //     },\r\n    //   });\r\n    // };\r\n\r\n    // eslint-disable-next-line camelcase\r\n    UNSAFE_componentWillReceiveProps(props) {\r\n        this.setState({\r\n            rows: props.rows,\r\n            count: props.count,\r\n            warningStatus: props.status\r\n        });\r\n    }\r\n\r\n    setStateAsync(stateObj) {\r\n        return new Promise((resolve) => {\r\n            this.setState(stateObj, resolve);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Method To render the filter values for filtering rows\r\n     * @param {*} rows is the row data to be considered for filtering\r\n     * @param {*} columnId is the specific columnId for which the row datas are being considered\r\n     */\r\n    getValidFilterValues(rows, columnId) {\r\n        this.setState({ selectedIndexes: [] });\r\n        return rows\r\n            .map((r) => r[columnId])\r\n            .filter((item, i, a) => {\r\n                return i === a.indexOf(item);\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Method To swap the columns\r\n     * @param {*} source is source column\r\n     * @param {*} target is the target column\r\n     */\r\n    // onHeaderDrop = (source, target) => {\r\n    //   const stateCopy = Object.assign({}, this.state);\r\n    //   const columnSourceIndex = this.state.columns.findIndex(\r\n    //     (i) => i.key === source\r\n    //   );\r\n    //   const columnTargetIndex = this.state.columns.findIndex(\r\n    //     (i) => i.key === target\r\n    //   );\r\n\r\n    //   stateCopy.columns.splice(\r\n    //     columnTargetIndex,\r\n    //     0,\r\n    //     stateCopy.columns.splice(columnSourceIndex, 1)[0]\r\n    //   );\r\n\r\n    //   const emptyColumns = Object.assign({}, this.state, {\r\n    //     columns: [],\r\n    //   });\r\n    //   this.setState(emptyColumns);\r\n\r\n    //   const reorderedColumns = Object.assign({}, this.state, {\r\n    //     columns: stateCopy.columns,\r\n    //   });\r\n    //   this.setState(reorderedColumns);\r\n    // };\r\n\r\n    // eslint-disable-next-line react/sort-comp\r\n    handleTableSortSwap = (reorderedSwap) => {\r\n        swapSortList = reorderedSwap;\r\n    };\r\n\r\n    updateTableAsPerRowChooser = (\r\n        inComingColumnsHeaderList,\r\n        pinnedColumnsList\r\n    ) => {\r\n        let existingColumnsHeaderList = this.props.columns;\r\n        existingColumnsHeaderList = existingColumnsHeaderList.filter((item) => {\r\n            return inComingColumnsHeaderList.includes(item.name);\r\n        });\r\n        let rePositionedArray = existingColumnsHeaderList;\r\n        let singleHeaderOneList;\r\n        if (pinnedColumnsList.length > 0) {\r\n            pinnedColumnsList\r\n                .slice(0)\r\n                .reverse()\r\n                .forEach((item, index) => {\r\n                    singleHeaderOneList = existingColumnsHeaderList.filter(\r\n                        (subItem) => item === subItem.name\r\n                    );\r\n                    rePositionedArray = this.arrayMove(\r\n                        existingColumnsHeaderList,\r\n                        existingColumnsHeaderList.indexOf(\r\n                            singleHeaderOneList[0]\r\n                        ),\r\n                        index\r\n                    );\r\n                });\r\n        }\r\n        if (swapList.length > 0) {\r\n            swapList.slice(0).forEach((item, index) => {\r\n                singleHeaderOneList = existingColumnsHeaderList.filter(\r\n                    (subItem) => {\r\n                        return item === subItem.name;\r\n                    }\r\n                );\r\n                rePositionedArray = this.arrayMove(\r\n                    existingColumnsHeaderList,\r\n                    existingColumnsHeaderList.indexOf(singleHeaderOneList[0]),\r\n                    index\r\n                );\r\n            });\r\n        }\r\n\r\n        existingColumnsHeaderList = rePositionedArray;\r\n        /**\r\n       making all the frozen attribute as false for all the columns and then \r\n       setting items of pinnedColumnsList as frozen = true\r\n       */\r\n        existingColumnsHeaderList.forEach((headerItem, index) => {\r\n            if (headerItem.frozen !== undefined && headerItem.frozen === true) {\r\n                existingColumnsHeaderList[index].frozen = false;\r\n            }\r\n            if (pinnedColumnsList.includes(headerItem.name)) {\r\n                existingColumnsHeaderList[index].frozen = true;\r\n            }\r\n        });\r\n\r\n        const toTop = (key, value) => (a, b) =>\r\n            (b[key] === value) - (a[key] === value);\r\n        existingColumnsHeaderList.sort(toTop(\"frozen\", true));\r\n\r\n        this.setState({\r\n            columns: existingColumnsHeaderList\r\n        });\r\n\r\n        const tempList = [];\r\n        existingColumnsHeaderList.forEach((item) => {\r\n            tempList.push(item.name);\r\n        });\r\n\r\n        if (swapList.length > 0) {\r\n            for (let i = 0; i < tempList.length; i++) {\r\n                if (tempList[i] === swapList[i])\r\n                    // eslint-disable-next-line react/no-unused-state\r\n                    this.setState({ pinnedReorder: true });\r\n            }\r\n        }\r\n        this.closeColumnReOrdering();\r\n        swapList = [];\r\n        // eslint-disable-next-line react/no-unused-state\r\n        this.setState({ pinnedReorder: false });\r\n    };\r\n\r\n    /**\r\n     * Method To re-position a particular object in an Array from oldIndex to newIndex\r\n     * @param {*} arr inComing array\r\n     * @param {*} oldIndex initial index\r\n     * @param {*} newIndex final index\r\n     */\r\n    arrayMove = (arr, oldIndex, newIndex) => {\r\n        if (newIndex >= arr.length) {\r\n            let k = newIndex - arr.length + 1;\r\n            while (k--) {\r\n                arr.push(undefined);\r\n            }\r\n        }\r\n        arr.splice(newIndex, 0, arr.splice(oldIndex, 1)[0]);\r\n        return arr;\r\n    };\r\n\r\n    /**\r\n     * Method to render the column Selector Pannel\r\n     */\r\n    columnReorderingPannel = () => {\r\n        this.setState({ selectedIndexes: [] });\r\n        const headerNameList = [];\r\n        const existingPinnedHeadersList = [];\r\n        this.state.columns\r\n            .filter((item) => item.frozen !== undefined && item.frozen === true)\r\n            .map((item) => existingPinnedHeadersList.push(item.name));\r\n        this.state.columns.map((item) => headerNameList.push(item.name));\r\n        this.setState({\r\n            columnReorderingComponent: (\r\n                <ColumnReordering\r\n                    maxLeftPinnedColumn={this.props.maxLeftPinnedColumn}\r\n                    updateTableAsPerRowChooser={this.updateTableAsPerRowChooser}\r\n                    headerKeys={headerNameList}\r\n                    closeColumnReOrdering={this.closeColumnReOrdering}\r\n                    existingPinnedHeadersList={existingPinnedHeadersList}\r\n                    handleheaderNameList={this.handleheaderNameList}\r\n                    {...this.props}\r\n                />\r\n            )\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Method to stop the render the column Selector Pannel\r\n     */\r\n    closeColumnReOrdering = () => {\r\n        this.setState({\r\n            columnReorderingComponent: null\r\n        });\r\n    };\r\n\r\n    handleSearchValue = (value) => {\r\n        this.setState({ searchValue: value });\r\n    };\r\n\r\n    clearSearchValue = () => {\r\n        this.setState({ searchValue: \"\" });\r\n        this.setState({ filteringRows: this.state.filteringRows });\r\n    };\r\n\r\n    sortingPanel = () => {\r\n        this.setState({ selectedIndexes: [] });\r\n        const columnField = [];\r\n        this.state.columns.map((item) => columnField.push(item.name));\r\n        this.setState({\r\n            sortingPanelComponent: (\r\n                <Sorting\r\n                    setTableAsPerSortingParams={(args) =>\r\n                        this.setTableAsPerSortingParams(args)\r\n                    }\r\n                    sortingParamsObjectList={this.state.sortingParamsObjectList}\r\n                    handleTableSortSwap={this.handleTableSortSwap}\r\n                    clearAllSortingParams={this.clearAllSortingParams}\r\n                    columnFieldValue={columnField}\r\n                    closeSorting={this.closeSorting}\r\n                />\r\n            )\r\n        });\r\n    };\r\n\r\n    closeSorting = () => {\r\n        this.setState({\r\n            sortingPanelComponent: null,\r\n            sortingOrderSwapList: []\r\n        });\r\n        swapSortList = [];\r\n    };\r\n\r\n    clearAllSortingParams = () => {\r\n        const hasSingleSortkey =\r\n            this.state.sortDirection !== \"NONE\" && this.state.sortColumn !== \"\";\r\n\r\n        let dataRows = this.getFilterResult([...this.state.dataSet]);\r\n        if (this.state.searchValue !== \"\") {\r\n            const searchKey = String(this.state.searchValue).toLowerCase();\r\n            dataRows = dataRows.filter((item) => {\r\n                return Object.values(item)\r\n                    .toString()\r\n                    .toLowerCase()\r\n                    .includes(searchKey);\r\n            });\r\n        }\r\n        if (hasSingleSortkey) {\r\n            dataRows = this.getSingleSortResult(dataRows);\r\n        }\r\n        this.setState({\r\n            rows: dataRows.slice(\r\n                0,\r\n                this.state.pageIndex * this.state.pageRowCount\r\n            ),\r\n            subDataSet: dataRows\r\n        });\r\n    };\r\n\r\n    // Export Data Logic\r\n    exportColumnData = () => {\r\n        let exportData = this.state.dataSet;\r\n        if (this.isSubset()) {\r\n            exportData = this.state.subDataSet;\r\n        }\r\n        this.setState({ selectedIndexes: [] });\r\n        this.setState({\r\n            exportComponent: (\r\n                <ExportData\r\n                    rows={exportData}\r\n                    columnsList={this.state.columns}\r\n                    closeExport={this.closeExport}\r\n                />\r\n            )\r\n        });\r\n    };\r\n\r\n    closeExport = () => {\r\n        this.setState({\r\n            exportComponent: null\r\n        });\r\n    };\r\n\r\n    setTableAsPerSortingParams = (tableSortList) => {\r\n        const hasFilter = Object.keys(this.state.junk).length > 0;\r\n        const hasSearchKey =\r\n            String(this.state.searchValue).toLowerCase() !== \"\";\r\n        const hasSingleSortkey =\r\n            this.state.sortDirection !== \"NONE\" && this.state.sortColumn !== \"\";\r\n        let existingRows = [...this.state.dataSet];\r\n        if (hasFilter || hasSearchKey || hasSingleSortkey) {\r\n            existingRows = [...this.state.subDataSet];\r\n        }\r\n\r\n        let sortingOrderNameList = [];\r\n        tableSortList.forEach((item) => {\r\n            let nameOfItem = \"\";\r\n            Object.keys(this.state.rows[0]).forEach((rowItem) => {\r\n                if (\r\n                    rowItem.toLowerCase() ===\r\n                    this.toCamelCase(item.sortBy).toLowerCase()\r\n                ) {\r\n                    nameOfItem = rowItem;\r\n                }\r\n            });\r\n            const typeOfItem = this.state.rows[0][item.sortBy === nameOfItem];\r\n            if (typeof typeOfItem === \"number\") {\r\n                sortingOrderNameList.push({\r\n                    name: nameOfItem,\r\n                    primer: parseInt,\r\n                    reverse: item.order !== \"Ascending\"\r\n                });\r\n            } else {\r\n                sortingOrderNameList.push({\r\n                    name: nameOfItem,\r\n                    reverse: item.order !== \"Ascending\"\r\n                });\r\n            }\r\n        });\r\n\r\n        if (swapSortList.length > 0) {\r\n            const existingSortingOrderSwapList = this.state\r\n                .sortingOrderSwapList;\r\n            swapSortList.forEach((item, index) => {\r\n                const stringOfItemIndex = `${item}${index}`;\r\n                if (\r\n                    item !== index &&\r\n                    !existingSortingOrderSwapList.includes(\r\n                        stringOfItemIndex.split(\"\").reverse().join(\"\")\r\n                    )\r\n                ) {\r\n                    existingSortingOrderSwapList.push(stringOfItemIndex);\r\n                    sortingOrderNameList = this.arrayMove(\r\n                        sortingOrderNameList,\r\n                        item,\r\n                        index\r\n                    );\r\n                    // eslint-disable-next-line no-param-reassign\r\n                    tableSortList = this.arrayMove(tableSortList, item, index);\r\n                }\r\n                this.setState({\r\n                    sortingOrderSwapList: existingSortingOrderSwapList\r\n                });\r\n            });\r\n        }\r\n\r\n        // eslint-disable-next-line no-use-before-define\r\n        existingRows.sort(sortBy(...sortingOrderNameList));\r\n        this.setState({\r\n            rows: existingRows.slice(\r\n                0,\r\n                this.state.pageIndex * this.state.pageRowCount\r\n            ),\r\n            subDataSet: existingRows,\r\n            sortingParamsObjectList: tableSortList\r\n        });\r\n\r\n        this.closeSorting();\r\n    };\r\n\r\n    // Group sort - while updating conditions like search, filter or sorting; copy of setTableAsPerSortingParams.\r\n    groupSort = (tableSortList, existingRows) => {\r\n        let sortingOrderNameList = [];\r\n        tableSortList.forEach((item) => {\r\n            let nameOfItem = \"\";\r\n            Object.keys(this.state.rows[0]).forEach((rowItem) => {\r\n                if (\r\n                    rowItem.toLowerCase() ===\r\n                    this.toCamelCase(item.sortBy).toLowerCase()\r\n                ) {\r\n                    nameOfItem = rowItem;\r\n                }\r\n            });\r\n            const typeOfItem = this.state.rows[0][item.sortBy === nameOfItem];\r\n            if (typeof typeOfItem === \"number\") {\r\n                sortingOrderNameList.push({\r\n                    name: nameOfItem,\r\n                    primer: parseInt,\r\n                    reverse: item.order !== \"Ascending\"\r\n                });\r\n            } else {\r\n                sortingOrderNameList.push({\r\n                    name: nameOfItem,\r\n                    reverse: item.order !== \"Ascending\"\r\n                });\r\n            }\r\n        });\r\n\r\n        if (swapSortList.length > 0) {\r\n            const existingSortingOrderSwapList = this.state\r\n                .sortingOrderSwapList;\r\n            swapSortList.forEach((item, index) => {\r\n                const stringOfItemIndex = `${item}${index}`;\r\n                if (\r\n                    item !== index &&\r\n                    !existingSortingOrderSwapList.includes(\r\n                        stringOfItemIndex.split(\"\").reverse().join(\"\")\r\n                    )\r\n                ) {\r\n                    existingSortingOrderSwapList.push(stringOfItemIndex);\r\n                    sortingOrderNameList = this.arrayMove(\r\n                        sortingOrderNameList,\r\n                        item,\r\n                        index\r\n                    );\r\n                    // eslint-disable-next-line no-param-reassign\r\n                    tableSortList = this.arrayMove(tableSortList, item, index);\r\n                }\r\n                this.setState({\r\n                    sortingOrderSwapList: existingSortingOrderSwapList\r\n                });\r\n            });\r\n        }\r\n\r\n        // eslint-disable-next-line no-use-before-define\r\n        return existingRows.sort(sortBy(...sortingOrderNameList));\r\n    };\r\n\r\n    toCamelCase = (str) => {\r\n        return str\r\n            .replace(/\\s(.)/g, function ($1) {\r\n                return $1.toUpperCase();\r\n            })\r\n            .replace(/\\s/g, \"\")\r\n            .replace(/^(.)/, function ($1) {\r\n                return $1.toLowerCase();\r\n            });\r\n    };\r\n\r\n    // eslint-disable-next-line react/sort-comp\r\n    componentDidUpdate() {\r\n        // Fix for column re-order and pin left issue (functionality was working only after doing a window re-size)\r\n        const resizeEvent = document.createEvent(\"HTMLEvents\");\r\n        resizeEvent.initEvent(\"resize\", true, false);\r\n        window.dispatchEvent(resizeEvent);\r\n    }\r\n\r\n    getSearchRecords(e) {\r\n        const searchKey = String(e.target.value).toLowerCase();\r\n        const hasFilter = Object.keys(this.state.junk).length > 0;\r\n        const hasSingleSortkey =\r\n            this.state.sortDirection !== \"NONE\" && this.state.sortColumn !== \"\";\r\n        const hasGropSortKeys =\r\n            this.state.sortingParamsObjectList &&\r\n            this.state.sortingParamsObjectList.length > 0;\r\n        let rowsToSearch = [];\r\n        // Remove search key\r\n        if (this.state.searchValue.startsWith(searchKey) || searchKey === \"\") {\r\n            rowsToSearch = this.getFilterResult([...this.state.dataSet]);\r\n            if (hasSingleSortkey) {\r\n                rowsToSearch = this.getSingleSortResult(rowsToSearch);\r\n            }\r\n            if (hasGropSortKeys) {\r\n                rowsToSearch = this.groupSort(\r\n                    this.state.sortingParamsObjectList,\r\n                    rowsToSearch\r\n                );\r\n            }\r\n            return rowsToSearch;\r\n        }\r\n        // Set search key\r\n\r\n        if (\r\n            hasFilter ||\r\n            hasSingleSortkey ||\r\n            searchKey.length > 1 ||\r\n            hasGropSortKeys\r\n        )\r\n            return this.state.subDataSet;\r\n        return this.state.dataSet;\r\n    }\r\n\r\n    /**\r\n     * Method To dynamically swap the column from column chooser\r\n     * @param {*} reordered is the swapped array of columns\r\n     */\r\n    handleheaderNameList = (reordered) => {\r\n        swapList = reordered;\r\n    };\r\n\r\n    getSingleSortResult = (data) => {\r\n        if (\r\n            this.state.sortDirection !== \"NONE\" &&\r\n            this.state.sortColumn !== \"\"\r\n        ) {\r\n            // eslint-disable-next-line prefer-destructuring\r\n            const sortColumn = this.state.sortColumn;\r\n            // eslint-disable-next-line prefer-destructuring\r\n            const sortDirection = this.state.sortDirection;\r\n            this.setState({ selectedIndexes: [] });\r\n            const comparer = (a, b) => {\r\n                if (sortDirection === \"ASC\") {\r\n                    return a[sortColumn] > b[sortColumn] ? 1 : -1;\r\n                }\r\n                if (sortDirection === \"DESC\") {\r\n                    return a[sortColumn] < b[sortColumn] ? 1 : -1;\r\n                }\r\n                return 0;\r\n            };\r\n            return sortDirection === \"NONE\" ? data : [...data].sort(comparer);\r\n        }\r\n        return data;\r\n    };\r\n\r\n    /**\r\n     * Method To sort the rows for a particular column\r\n     * @param {*} data is the row datas to be considered for sorting\r\n     * @param {*} sortColumn is the specific column for which the row sort is being triggered\r\n     * @param {*} sortDirection is the type of sort\r\n     */\r\n    sortRows = (data, sortColumn, sortDirection) => {\r\n        this.setState({ selectedIndexes: [] });\r\n        // eslint-disable-next-line consistent-return\r\n        const comparer = (a, b) => {\r\n            if (sortDirection === \"ASC\") {\r\n                return a[sortColumn] > b[sortColumn] ? 1 : -1;\r\n            }\r\n            if (sortDirection === \"DESC\") {\r\n                return a[sortColumn] < b[sortColumn] ? 1 : -1;\r\n            }\r\n        };\r\n        const hasFilter = Object.keys(this.state.junk).length > 0;\r\n        const hasSearchKey =\r\n            String(this.state.searchValue).toLowerCase() !== \"\";\r\n        const hasGropSortKeys =\r\n            this.state.sortingParamsObjectList &&\r\n            this.state.sortingParamsObjectList.length > 0;\r\n        let dtRows = [];\r\n        if (hasFilter || hasSearchKey || hasGropSortKeys) {\r\n            dtRows = this.state.subDataSet;\r\n        } else {\r\n            dtRows = this.state.dataSet;\r\n        }\r\n        const result = [...dtRows].sort(comparer);\r\n        this.setState({\r\n            rows: result.slice(\r\n                0,\r\n                this.state.pageIndex * this.state.pageRowCount\r\n            ),\r\n            subDataSet: result,\r\n            selectedIndexes: [],\r\n            sortColumn: sortDirection === \"NONE\" ? \"\" : sortColumn,\r\n            sortDirection\r\n        });\r\n        return sortDirection === \"NONE\" ? data : this.state.rows;\r\n    };\r\n\r\n    getSlicedRows = async (filters, rowsToSplit, firstResult) => {\r\n        let data = [];\r\n        if (rowsToSplit.length > 0) {\r\n            const chunks = [];\r\n            while (rowsToSplit.length) {\r\n                chunks.push(rowsToSplit.splice(0, 500));\r\n            }\r\n            let index = 0;\r\n            chunks.forEach(async (arr) => {\r\n                this.getRowsAsync(arr, filters).then(async (dt) => {\r\n                    index++;\r\n                    data = [...data, ...dt];\r\n                    if (index === chunks.length) {\r\n                        let dtSet = [...firstResult, ...data];\r\n                        if (this.state.searchValue !== \"\") {\r\n                            const searchKey = String(\r\n                                this.state.searchValue\r\n                            ).toLowerCase();\r\n                            dtSet = dtSet.filter((item) => {\r\n                                return Object.values(item)\r\n                                    .toString()\r\n                                    .toLowerCase()\r\n                                    .includes(searchKey);\r\n                            });\r\n                        }\r\n\r\n                        dtSet = this.getSingleSortResult(dtSet);\r\n                        if (\r\n                            this.state.sortingParamsObjectList &&\r\n                            this.state.sortingParamsObjectList.length > 0\r\n                        ) {\r\n                            dtSet = this.groupSort(\r\n                                this.state.sortingParamsObjectList,\r\n                                dtSet\r\n                            );\r\n                        }\r\n                        const rw = dtSet.slice(\r\n                            0,\r\n                            this.state.pageIndex * this.state.pageRowCount\r\n                        );\r\n                        await this.setStateAsync({\r\n                            subDataSet: dtSet,\r\n                            rows: rw,\r\n                            tempRows: rw,\r\n                            count: rw.length\r\n                        });\r\n                        if (dtSet.length === 0) {\r\n                            this.handleWarningStatus();\r\n                        } else {\r\n                            this.closeWarningStatus(rw);\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n        }\r\n    };\r\n\r\n    getRowsAsync = async (rows, filters) => {\r\n        let filterVal = { ...filters };\r\n        if (Object.keys(filters).length <= 0) {\r\n            filterVal = {};\r\n        }\r\n        selectors.getRows({ rows: [], filters: {} });\r\n        // eslint-disable-next-line object-shorthand\r\n        return selectors.getRows({ rows: rows, filters: filterVal });\r\n    };\r\n\r\n    getrows = (rows, filters) => {\r\n        let filterVal = { ...filters };\r\n        if (Object.keys(filters).length <= 0) {\r\n            filterVal = {};\r\n        }\r\n        selectors.getRows({ rows: [], filters: {} });\r\n        // eslint-disable-next-line object-shorthand\r\n        return selectors.getRows({ rows: rows, filters: filterVal });\r\n    };\r\n\r\n    /**\r\n     * Method To bulk/individual deselect of rows\r\n     * @param {*} rows is the deselected row\r\n     */\r\n    onRowsDeselected = (rows) => {\r\n        const rowIndexes = rows.map((r) => r.rowIdx);\r\n        this.setState({\r\n            selectedIndexes: this.state.selectedIndexes.filter(\r\n                (i) => rowIndexes.indexOf(i) === -1\r\n            )\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Method To update the cell/cells with the edited values\r\n     * @param {*} fromRow is the row from which this edit is performed\r\n     * @param {*} toRow is the row upto which this edit is performed\r\n     * @param {*} updated is the value of change\r\n     * @param {*} action is type of edit action performed\r\n     */\r\n    onGridRowsUpdated = ({ fromRow, toRow, updated, action }) => {\r\n        let columnName = \"\";\r\n        const filter = this.formulaAppliedCols.filter((item) => {\r\n            if (updated[item.key] !== null && updated[item.key] !== undefined) {\r\n                columnName = item.key;\r\n                return true;\r\n            }\r\n            return false;\r\n        });\r\n\r\n        if (filter.length > 0) {\r\n            // eslint-disable-next-line no-param-reassign\r\n            updated = applyFormula(updated, columnName);\r\n        }\r\n\r\n        if (action !== \"COPY_PASTE\") {\r\n            this.setState((state) => {\r\n                const rows = state.rows.slice();\r\n                for (let i = fromRow; i <= toRow; i++) {\r\n                    rows[i] = {\r\n                        ...rows[i],\r\n                        ...updated\r\n                    };\r\n                }\r\n\r\n                return {\r\n                    rows\r\n                };\r\n            });\r\n            this.setState((state) => {\r\n                const dataSet = state.dataSet.slice();\r\n                for (let i = fromRow; i <= toRow; i++) {\r\n                    dataSet[i] = {\r\n                        ...dataSet[i],\r\n                        ...updated\r\n                    };\r\n                }\r\n\r\n                return {\r\n                    dataSet\r\n                };\r\n            });\r\n\r\n            this.setState((state) => {\r\n                const filteringRows = state.filteringRows.slice();\r\n                for (let i = fromRow; i <= toRow; i++) {\r\n                    filteringRows[i] = {\r\n                        ...filteringRows[i],\r\n                        ...updated\r\n                    };\r\n                }\r\n\r\n                return {\r\n                    filteringRows\r\n                };\r\n            });\r\n            this.setState((state) => {\r\n                const tempRows = state.tempRows.slice();\r\n                for (let i = fromRow; i <= toRow; i++) {\r\n                    tempRows[i] = {\r\n                        ...tempRows[i],\r\n                        ...updated\r\n                    };\r\n                }\r\n\r\n                return {\r\n                    tempRows\r\n                };\r\n            });\r\n        }\r\n        if (this.props.updateCellData) {\r\n            this.props.updateCellData(\r\n                this.state.tempRows[fromRow],\r\n                this.state.tempRows[toRow],\r\n                updated,\r\n                action\r\n            );\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Method To bulk/individual select of rows\r\n     * @param {*} rows is the selected row\r\n     */\r\n    onRowsSelected = (rows) => {\r\n        this.setState({\r\n            selectedIndexes: this.state.selectedIndexes.concat(\r\n                rows.map((r) => r.rowIdx)\r\n            )\r\n        });\r\n        if (this.props.selectBulkData) {\r\n            this.props.selectBulkData(rows);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Method To filter the multiple columns\r\n     * @param {*} value is the  incoming filtering event\r\n     */\r\n    handleFilterChange = async (value) => {\r\n        const { junk } = this.state;\r\n        if (!(value.filterTerm == null) && !(value.filterTerm.length <= 0)) {\r\n            junk[value.column.key] = value;\r\n        } else {\r\n            delete junk[value.column.key];\r\n        }\r\n        this.setState({ junk });\r\n        const hasFilter = Object.keys(junk).length > 0;\r\n        const firstPage = this.state.dataSet.slice(0, this.state.pageRowCount);\r\n        let data = this.getrows(firstPage, this.state.junk);\r\n        await this.setStateAsync({\r\n            rows: data,\r\n            tempRows: data,\r\n            count: data.length,\r\n            subDataSet: hasFilter ? data : [],\r\n            pageIndex: hasFilter ? this.state.pageIndex : 1\r\n        });\r\n        if (hasFilter) {\r\n            const rowsRemaining = this.state.dataSet.slice(\r\n                this.state.pageRowCount,\r\n                this.state.dataSet.length\r\n            );\r\n            this.getSlicedRows(this.state.junk, rowsRemaining, data);\r\n        } else {\r\n            let rowsRemaining = this.state.dataSet; // .slice(this.state.pageRowCount, this.state.dataSet.length);\r\n            if (this.state.searchValue !== \"\") {\r\n                const searchKey = String(this.state.searchValue).toLowerCase();\r\n                rowsRemaining = rowsRemaining.filter((item) => {\r\n                    return Object.values(item)\r\n                        .toString()\r\n                        .toLowerCase()\r\n                        .includes(searchKey);\r\n                });\r\n            }\r\n            rowsRemaining = this.getSingleSortResult(rowsRemaining);\r\n\r\n            if (\r\n                this.state.sortingParamsObjectList &&\r\n                this.state.sortingParamsObjectList.length > 0\r\n            ) {\r\n                rowsRemaining = this.groupSort(\r\n                    this.state.sortingParamsObjectList,\r\n                    rowsRemaining\r\n                );\r\n            }\r\n\r\n            const rw = rowsRemaining.slice(\r\n                0,\r\n                this.state.pageIndex * this.state.pageRowCount\r\n            );\r\n            await this.setStateAsync({\r\n                subDataSet: rowsRemaining,\r\n                rows: rw,\r\n                tempRows: rw,\r\n                count: rw.length\r\n            });\r\n            data = rw;\r\n        }\r\n        if (data.length === 0) {\r\n            this.handleWarningStatus();\r\n        } else {\r\n            this.closeWarningStatus(data);\r\n        }\r\n    };\r\n\r\n    isAtBottom = (event) => {\r\n        const { target } = event; // as HTMLDivElement;\r\n        const isbtm =\r\n            target.clientHeight + target.scrollTop >= target.scrollHeight - 10;\r\n        return isbtm;\r\n    };\r\n\r\n    isSubset() {\r\n        if (\r\n            Object.keys(this.state.junk).length > 0 ||\r\n            this.state.sortDirection !== \"NONE\" ||\r\n            this.state.searchValue !== \"\" ||\r\n            (this.state.sortingParamsObjectList &&\r\n                this.state.sortingParamsObjectList.length > 0)\r\n        ) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    loadMoreRows = (from, newRowsCount) => {\r\n        return new Promise((resolve) => {\r\n            // const hasFilter = Object.keys(this.state.junk).length > 0;\r\n            let to = from + newRowsCount;\r\n            if (this.isSubset() && this.state.subDataSet.length > 0) {\r\n                to =\r\n                    to < this.state.subDataSet.length\r\n                        ? to\r\n                        : this.state.subDataSet.length;\r\n                resolve(this.state.subDataSet.slice(from, to));\r\n            } else {\r\n                resolve(this.state.dataSet.slice(from, to));\r\n            }\r\n        });\r\n    };\r\n\r\n    handleScroll = async (event) => {\r\n        if (!this.isAtBottom(event)) return;\r\n        const newRows = await this.loadMoreRows(\r\n            this.state.pageIndex * this.state.pageRowCount,\r\n            this.state.pageRowCount\r\n        );\r\n        if (newRows && newRows.length > 0) {\r\n            let length = 0;\r\n            this.setState((prev) => {\r\n                length = prev.rows.length + newRows.length;\r\n            });\r\n            this.setState({\r\n                rows: [...this.state.rows, ...newRows],\r\n                count: length,\r\n                pageIndex: this.state.pageIndex + 1\r\n            });\r\n        }\r\n    };\r\n\r\n    globalSearchLogic = (e, updatedRows) => {\r\n        const searchKey = String(e.target.value).toLowerCase();\r\n        const filteredRows = updatedRows.filter((item) => {\r\n            return Object.values(item)\r\n                .toString()\r\n                .toLowerCase()\r\n                .includes(searchKey);\r\n        });\r\n        if (!filteredRows.length) {\r\n            this.setState({ warningStatus: \"invalid\", rows: [], count: 0 });\r\n        } else {\r\n            const rowSlice = filteredRows.slice(\r\n                0,\r\n                this.state.pageIndex * this.state.pageRowCount\r\n            );\r\n            this.setState({\r\n                warningStatus: \"\",\r\n                rows: rowSlice,\r\n                subDataSet: filteredRows,\r\n                count: rowSlice.length\r\n            });\r\n        }\r\n    };\r\n\r\n    handleWarningStatus = () => {\r\n        this.setState({ warningStatus: \"invalid\" });\r\n    };\r\n\r\n    closeWarningStatus = (val) => {\r\n        let rVal = val;\r\n        if (!rVal) {\r\n            const hasSingleSortkey =\r\n                this.state.sortDirection !== \"NONE\" &&\r\n                this.state.sortColumn !== \"\";\r\n            const hasGropSortKeys =\r\n                this.state.sortingParamsObjectList &&\r\n                this.state.sortingParamsObjectList.length > 0;\r\n\r\n            let dataRows = this.getFilterResult([...this.state.dataSet]);\r\n            if (hasSingleSortkey) {\r\n                dataRows = this.getSingleSortResult(dataRows);\r\n            }\r\n            if (hasGropSortKeys) {\r\n                dataRows = this.groupSort(\r\n                    this.state.sortingParamsObjectList,\r\n                    dataRows\r\n                );\r\n            }\r\n            rVal = dataRows.slice(\r\n                0,\r\n                this.state.pageIndex * this.state.pageRowCount\r\n            );\r\n        }\r\n        this.setState({ warningStatus: \"\", rows: rVal, count: rVal.length });\r\n    };\r\n\r\n    save = () => {\r\n        this.props.saveRows(this.state.dataSet);\r\n    };\r\n\r\n    clearAllFilters = () => {\r\n        const hasSingleSortkey =\r\n            this.state.sortDirection !== \"NONE\" && this.state.sortColumn !== \"\";\r\n        const hasGropSortKeys =\r\n            this.state.sortingParamsObjectList &&\r\n            this.state.sortingParamsObjectList.length > 0;\r\n\r\n        let dtSet = this.getSearchResult(this.state.dataSet);\r\n        if (hasSingleSortkey) {\r\n            dtSet = this.getSingleSortResult(dtSet);\r\n        }\r\n        if (hasGropSortKeys) {\r\n            dtSet = this.groupSort(this.state.sortingParamsObjectList, dtSet);\r\n        }\r\n        const rVal = dtSet.slice(\r\n            0,\r\n            this.state.pageIndex * this.state.pageRowCount\r\n        );\r\n        this.setState({\r\n            rows: rVal,\r\n            count: rVal.length,\r\n            subDataSet: dtSet\r\n        });\r\n    };\r\n    getSearchResult = (data) => {\r\n        let dtSet = data;\r\n        const searchKey = String(this.state.searchValue).toLowerCase();\r\n        if (searchKey !== \"\") {\r\n            dtSet = dtSet.filter((item) => {\r\n                return Object.values(item)\r\n                    .toString()\r\n                    .toLowerCase()\r\n                    .includes(searchKey);\r\n            });\r\n        }\r\n        return dtSet;\r\n    };\r\n    getFilterResult = (data) => {\r\n        let dataRows = [];\r\n        if (Object.keys(this.state.junk).length > 0) {\r\n            const rowsToSplit = [...data];\r\n            const chunks = [];\r\n            while (rowsToSplit.length) {\r\n                chunks.push(rowsToSplit.splice(0, 500));\r\n            }\r\n            chunks.forEach((arr) => {\r\n                const dt = this.getrows(arr, this.state.junk);\r\n                dataRows = [...dataRows, ...dt];\r\n            });\r\n        } else {\r\n            dataRows = [...data];\r\n        }\r\n        return dataRows;\r\n    };\r\n    render() {\r\n        return (\r\n            <div onScroll={this.handleScroll}>\r\n                <div className=\"parentDiv\">\r\n                    <div className=\"totalCount\">\r\n                        Showing <strong> {this.state.count} </strong> records\r\n                    </div>\r\n                    <div className=\"globalSearch\">\r\n                        <i className=\"fa fa-search\" />\r\n                        <FormControl\r\n                            className=\"globalSeachInput\"\r\n                            type=\"text\"\r\n                            placeholder=\"Search\"\r\n                            onChange={(e) => {\r\n                                this.handleSearchValue(e.target.value);\r\n                                const srchRows = this.getSearchRecords(e);\r\n                                this.globalSearchLogic(e, srchRows);\r\n                            }}\r\n                            value={this.state.searchValue}\r\n                        />\r\n                    </div>\r\n                    <div className=\"filterIcons\" onClick={this.save}>\r\n                        <FontAwesomeIcon title=\"Group Sort\" icon={faSave} />\r\n                    </div>\r\n                    <div className=\"filterIcons\" onClick={this.sortingPanel}>\r\n                        <FontAwesomeIcon\r\n                            title=\"Group Sort\"\r\n                            icon={faSortAmountDown}\r\n                        />\r\n                        <FontAwesomeIcon\r\n                            icon={faSortDown}\r\n                            className=\"filterArrow\"\r\n                        />\r\n                    </div>\r\n                    {this.state.sortingPanelComponent}\r\n                    <div\r\n                        className=\"filterIcons\"\r\n                        onClick={this.columnReorderingPannel}\r\n                    >\r\n                        <FontAwesomeIcon\r\n                            title=\"Column Chooser\"\r\n                            icon={faColumns}\r\n                        />\r\n                        <FontAwesomeIcon\r\n                            icon={faSortDown}\r\n                            className=\"filterArrow\"\r\n                        />\r\n                    </div>\r\n                    {this.state.columnReorderingComponent}\r\n                    <div className=\"filterIcons\">\r\n                        <FontAwesomeIcon\r\n                            title=\"Export\"\r\n                            icon={faShareAlt}\r\n                            onClick={this.exportColumnData}\r\n                        />\r\n                    </div>\r\n                    {this.state.exportComponent}\r\n                </div>\r\n                <ErrorMessage\r\n                    className=\"errorDiv\"\r\n                    status={this.state.warningStatus}\r\n                    closeWarningStatus={() => {\r\n                        this.closeWarningStatus();\r\n                    }}\r\n                    clearSearchValue={this.clearSearchValue}\r\n                />\r\n                <ExtDataGrid\r\n                    toolbar={<Toolbar enableFilter />}\r\n                    getValidFilterValues={(columnKey) =>\r\n                        this.getValidFilterValues(\r\n                            this.state.filteringRows,\r\n                            columnKey\r\n                        )\r\n                    }\r\n                    minHeight={this.state.height}\r\n                    columns={this.state.columns}\r\n                    rowGetter={(i) => this.state.rows[i]}\r\n                    rowsCount={this.state.rows.length}\r\n                    onGridRowsUpdated={this.onGridRowsUpdated}\r\n                    enableCellSelect\r\n                    onClearFilters={() => {\r\n                        this.setState({ junk: {} });\r\n                        this.clearAllFilters();\r\n                    }}\r\n                    onColumnResize={(idx, width) =>\r\n                        console.log(\r\n                            `Column ${idx} has been resized to ${width}`\r\n                        )\r\n                    }\r\n                    onAddFilter={(filter) => this.handleFilterChange(filter)}\r\n                    rowSelection={{\r\n                        showCheckbox: true,\r\n                        enableShiftSelect: true,\r\n                        onRowsSelected: this.onRowsSelected,\r\n                        onRowsDeselected: this.onRowsDeselected,\r\n                        selectBy: {\r\n                            indexes: this.state.selectedIndexes\r\n                        }\r\n                    }}\r\n                    onGridSort={(sortColumn, sortDirection) =>\r\n                        this.sortRows(\r\n                            this.state.filteringRows,\r\n                            sortColumn,\r\n                            sortDirection\r\n                        )\r\n                    }\r\n                    globalSearch={this.globalSearchLogic}\r\n                    handleWarningStatus={this.handleWarningStatus}\r\n                    closeWarningStatus={this.closeWarningStatus}\r\n                    // cellRangeSelection={{\r\n                    //   onComplete: this.setSelection,\r\n                    // }}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n/**\r\n * Global Method To Sort The Grid.\r\n */\r\nlet sortBy;\r\n(function () {\r\n    // utility functions\r\n    const defaultCmp = function (a, b) {\r\n        if (a === b) return 0;\r\n        return a < b ? -1 : 1;\r\n    };\r\n    const getCmpFunc = function (primer, reverse) {\r\n        let cmp = defaultCmp;\r\n        if (primer) {\r\n            cmp = function (a, b) {\r\n                return defaultCmp(primer(a), primer(b));\r\n            };\r\n        }\r\n        if (reverse) {\r\n            return function (a, b) {\r\n                return -1 * cmp(a, b);\r\n            };\r\n        }\r\n        return cmp;\r\n    };\r\n\r\n    // actual implementation\r\n    sortBy = function () {\r\n        const fields = [];\r\n        const nFields = arguments.length;\r\n        let field;\r\n        let name;\r\n        let cmp;\r\n\r\n        // preprocess sorting options\r\n        for (let i = 0; i < nFields; i++) {\r\n            // eslint-disable-next-line prefer-rest-params\r\n            field = arguments[i];\r\n            if (typeof field === \"string\") {\r\n                name = field;\r\n                cmp = defaultCmp;\r\n            } else {\r\n                name = field.name;\r\n                cmp = getCmpFunc(field.primer, field.reverse);\r\n            }\r\n            fields.push({\r\n                name,\r\n                cmp\r\n            });\r\n        }\r\n\r\n        return function (A, B) {\r\n            let result;\r\n            for (let i = 0, l = nFields; i < l; i++) {\r\n                result = 0;\r\n                field = fields[i];\r\n                name = field.name;\r\n                cmp = field.cmp;\r\n\r\n                result = cmp(A[name], B[name]);\r\n                if (result !== 0) break;\r\n            }\r\n            return result;\r\n        };\r\n    };\r\n})();\r\n\r\nSpreadsheet.propTypes = {\r\n    airportCodes: PropTypes.any,\r\n    rows: PropTypes.any,\r\n    columns: PropTypes.any,\r\n    status: PropTypes.any,\r\n    count: PropTypes.any,\r\n    updateCellData: PropTypes.any,\r\n    selectBulkData: PropTypes.any,\r\n    pinnedReorder: PropTypes.any,\r\n    maxLeftPinnedColumn: PropTypes.any,\r\n    globalSearchLogic: PropTypes.any,\r\n    closeWarningStatus: PropTypes.any,\r\n    dataSet: PropTypes.any,\r\n    pageSize: PropTypes.any\r\n};\r\n\r\nexport default Spreadsheet;\r\n"],"names":["ExtDataGrid","ReactDataGrid","componentDidMount","_mounted","dataGridComponent","document","getElementsByClassName","window","addEventListener","metricsUpdated","componentWillUnmount","removeEventListener","applyFormula","obj","columnName","val","item","toString","charAt","operation","split","value","substring","length","reduce","a","b","Number","Math","min","apply","max","console","log","DatePicker","React","Component","constructor","props","state","Date","input","getInputNode","bind","getValue","onValueChanged","ev","setState","target","updated","date","dateTimeFormat","Intl","DateTimeFormat","year","month","day","formatToParts","column","key","render","ref","propTypes","PropTypes","string","SEARCH_NOT_FOUNT_ERROR","ErrorMessage","status","setStatus","useState","useEffect","faTimes","closeWarningStatus","clearSearchValue","ItemTypes","COLUMN","style","cursor","ColumnItem","id","text","moveColumn","findColumn","originalIndex","index","isDragging","drag","useDrag","type","collect","monitor","end","dropResult","droppedId","getItem","didDrop","drop","useDrop","accept","canDrop","hover","draggedId","overIndex","opacity","node","any","ColumnsList","columns","setColumns","columnsArray","filter","c","indexOf","atIndex","update","$splice","values","temp","forEach","push","handleReorderList","display","flexWrap","map","ColumnReordering","resetColumnReorderList","columnReorderEntityList","name","leftPinnedColumList","isAllSelected","selectAllToColumnReOrderList","existingColumnReorderEntityList","isExistingAllSelect","addToColumnReorderEntityList","typeToBeAdded","existingLeftPinnedList","includes","indexOfInsertion","columnSelectList","findIndex","splice","filterColumnReorderList","e","searchKey","String","toLowerCase","existingList","filtererdColumnReorderList","createColumnsArrayFromProps","colsList","faAlignJustify","maxLeftPinnedColumn","reArrangeLeftPinnedColumn","columHeaderName","unshift","subItem","reordered","handleheaderNameList","headerKeys","existingPinnedHeadersList","setWrapperRef","handleClickOutside","wrapperRef","event","contains","closeColumnReOrdering","color","TouchBackend","enableMouseEvents","updateTableAsPerRowChooser","CARD","Card","moveCard","findCard","SortingList","cards","setCards","sortsArray","card","handleReorderListOfSort","App","add","rowList","existingSortingOrderList","sortingOrderList","sortBy","columnFieldValue","order","sortOn","copy","i","JSON","parse","stringify","clearAll","errorMessage","clearAllSortingParams","remove","rowsValue","row","captureSortingFeildValues","faCopy","faTrash","sortingKey","undefined","updateTableAsPerSortCondition","unique","Set","showError","some","element","size","setTableAsPerSortingParams","reOrderedIndexList","handleTableSortSwap","sortingParamsObjectList","closeSorting","faPlus","downLaodFileType","ExportData","resetColumnExportList","columnEntityList","selectAllToColumnList","columnsList","addToColumnEntityList","existingColumnEntityList","selectDownLoadType","checked","exportRowData","columnVlaueList","rows","keys","Object","getOwnPropertyNames","filteredColumnVal","filteredRow","downloadPDF","downloadXLSFile","downloadCSVFile","unit","orientation","marginLeft","doc","JSPDF","setFontSize","title","headers","dataValues","content","startY","head","body","autoTable","save","fileType","fileExtension","fileName","ws","XLSX","json_to_sheet","wb","Sheets","data","SheetNames","excelBuffer","bookType","Blob","FileSaver","columnSearchLogic","filteredRows","columnValueList","exportValidation","columnLength","fileLength","clickTag","warning","closeExport","faFilePdf","faFileExcel","faFileCsv","DropDownEditor","Editors","selectors","Data","Selectors","swapList","swapSortList","AutoCompleteFilter","NumericFilter","Filters","Spreadsheet","reorderedSwap","inComingColumnsHeaderList","pinnedColumnsList","existingColumnsHeaderList","rePositionedArray","singleHeaderOneList","slice","reverse","arrayMove","headerItem","frozen","toTop","sort","tempList","pinnedReorder","arr","oldIndex","newIndex","k","columnReorderingPannel","selectedIndexes","headerNameList","columnReorderingComponent","handleSearchValue","searchValue","filteringRows","sortingPanel","columnField","sortingPanelComponent","Sorting","args","sortingOrderSwapList","hasSingleSortkey","sortDirection","sortColumn","dataRows","getFilterResult","dataSet","getSingleSortResult","pageIndex","pageRowCount","subDataSet","exportColumnData","exportData","isSubset","exportComponent","tableSortList","hasFilter","junk","hasSearchKey","existingRows","sortingOrderNameList","nameOfItem","rowItem","toCamelCase","typeOfItem","primer","parseInt","existingSortingOrderSwapList","stringOfItemIndex","join","groupSort","str","replace","$1","toUpperCase","comparer","sortRows","hasGropSortKeys","dtRows","result","getSlicedRows","filters","rowsToSplit","firstResult","chunks","getRowsAsync","then","dt","dtSet","rw","setStateAsync","tempRows","count","handleWarningStatus","filterVal","getRows","getrows","onRowsDeselected","rowIndexes","r","rowIdx","onGridRowsUpdated","fromRow","toRow","action","formulaAppliedCols","updateCellData","onRowsSelected","concat","selectBulkData","handleFilterChange","filterTerm","firstPage","rowsRemaining","isAtBottom","isbtm","clientHeight","scrollTop","scrollHeight","loadMoreRows","from","newRowsCount","Promise","resolve","to","handleScroll","newRows","prev","globalSearchLogic","updatedRows","warningStatus","rowSlice","rVal","saveRows","clearAllFilters","getSearchResult","pageSize","dataSetVar","height","colItem","editor","dataSource","filterType","filterRenderer","formulaApplicable","UNSAFE_componentWillReceiveProps","stateObj","getValidFilterValues","columnId","componentDidUpdate","resizeEvent","createEvent","initEvent","dispatchEvent","getSearchRecords","rowsToSearch","startsWith","srchRows","faSave","faSortAmountDown","faSortDown","faColumns","faShareAlt","columnKey","idx","width","showCheckbox","enableShiftSelect","selectBy","indexes","defaultCmp","getCmpFunc","cmp","fields","nFields","arguments","field","A","B","l","airportCodes"],"mappings":"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"}