{"version":3,"file":"index.js","sources":["../src/common/extDataGrid.js","../src/utilities/utils.js","../src/functions/DatePicker.js","../src/common/ErrorConstants.js","../src/common/ErrorMessage.js","../src/overlays/column_chooser/ItemTypes.js","../src/overlays/column_chooser/columnItem.js","../src/overlays/column_chooser/columnsList.js","../src/overlays/column_chooser/Chooser.js","../src/overlays/sorting/ItemTypes.js","../src/overlays/sorting/SortItem.js","../src/overlays/sorting/SortingList.js","../src/overlays/sorting/Sorting.js","../src/overlays/export_data/ExportData.js","../src/index.js"],"sourcesContent":["import ReactDataGrid from \"react-data-grid\";\r\n\r\nclass ExtDataGrid extends ReactDataGrid {\r\n    componentDidMount() {\r\n        this._mounted = true;\r\n        // eslint-disable-next-line prefer-destructuring\r\n        this.dataGridComponent = document.getElementsByClassName(\r\n            \"react-grid-Viewport\"\r\n        )[0];\r\n\r\n        window.addEventListener(\"resize\", this.metricsUpdated);\r\n        if (this.props.cellRangeSelection) {\r\n            // this.dataGridComponent.addEventListener(\"mouseup\", this.onWindowMouseUp);\r\n        }\r\n        this.metricsUpdated();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this._mounted = false;\r\n        window.removeEventListener(\"resize\", this.metricsUpdated);\r\n        // this.dataGridComponent.removeEventListener(\"mouseup\", this.onWindowMouseUp);\r\n    }\r\n}\r\n\r\nexport default ExtDataGrid;\r\n","export const applyFormula = (obj, columnName) => {\r\n    const val = obj;\r\n    const item = val[columnName].toString();\r\n    if (item && item.charAt(0) === \"=\") {\r\n        const operation = item.split(\"(\");\r\n        const value = operation[1]\r\n            .substring(0, operation[1].length - 1)\r\n            .split(/[,:]/);\r\n        switch (operation[0]) {\r\n            case \"=SUM\":\r\n            case \"=ADD\":\r\n            case \"=sum\":\r\n            case \"=add\":\r\n                val[columnName] = value.reduce(function (a, b) {\r\n                    return Number(a) + Number(b);\r\n                });\r\n                break;\r\n            case \"=MUL\":\r\n            case \"=mul\":\r\n                val[columnName] = value.reduce(function (a, b) {\r\n                    return Number(a) * Number(b);\r\n                });\r\n                break;\r\n            case \"=SUB\":\r\n            case \"=sub\":\r\n            case \"=DIFF\":\r\n            case \"=diff\":\r\n                val[columnName] = value.reduce(function (a, b) {\r\n                    return Number(a) - Number(b);\r\n                });\r\n                break;\r\n            case \"=min\":\r\n            case \"=MIN\":\r\n                // eslint-disable-next-line prefer-spread\r\n                val[columnName] = Math.min.apply(Math, value);\r\n                break;\r\n            case \"=max\":\r\n            case \"=MAX\":\r\n                // eslint-disable-next-line prefer-spread\r\n                val[columnName] = Math.max.apply(Math, value);\r\n                break;\r\n            default:\r\n                console.log(\"No Calculation\");\r\n        }\r\n    }\r\n    return val;\r\n};\r\n","/* eslint-disable react/destructuring-assignment */\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default class DatePicker extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            value: new Date()\r\n        };\r\n        // the variable to store component reference\r\n        this.input = null;\r\n\r\n        this.getInputNode = this.getInputNode.bind(this);\r\n        this.getValue = this.getValue.bind(this);\r\n        this.onValueChanged = this.onValueChanged.bind(this);\r\n    }\r\n\r\n    onValueChanged(ev) {\r\n        this.setState({ value: ev.target.value });\r\n    }\r\n\r\n    // returning updated object with the date value in the required format\r\n    getValue() {\r\n        const updated = {};\r\n        const date = new Date(this.state.value);\r\n        const dateTimeFormat = new Intl.DateTimeFormat(\"en-US\", {\r\n            year: \"numeric\",\r\n            month: \"numeric\",\r\n            day: \"2-digit\"\r\n        });\r\n        const [\r\n            { value: month },\r\n            ,\r\n            { value: day },\r\n            ,\r\n            { value: year }\r\n        ] = dateTimeFormat.formatToParts(date);\r\n        updated[this.props.column.key] = `${year}-${month}-${day}`;\r\n        return updated;\r\n    }\r\n\r\n    // returning the component with the reference, input\r\n    getInputNode() {\r\n        return this.input;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <input\r\n                    type=\"date\"\r\n                    ref={(ref) => {\r\n                        this.input = ref;\r\n                    }}\r\n                    value={this.state.value}\r\n                    onChange={this.onValueChanged}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nDatePicker.propTypes = {\r\n    column: PropTypes.string\r\n};\r\n","export const SEARCH_NOT_FOUNT_ERROR = \"No Records found!\";\r\n","/* eslint-disable react/prop-types */\r\n/* eslint-disable react/destructuring-assignment */\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { SEARCH_NOT_FOUNT_ERROR } from \"./ErrorConstants\";\r\n\r\nconst ErrorMessage = (props) => {\r\n    const [status, setStatus] = useState(props.status);\r\n    useEffect(() => {\r\n        setStatus(props.status);\r\n    }, [props.status]);\r\n    if (status === \"invalid\") {\r\n        return (\r\n            <div id=\"errorMsg\">\r\n                <div className=\"alert alert-danger\" role=\"alert\">\r\n                    {SEARCH_NOT_FOUNT_ERROR}\r\n                </div>\r\n                <div className=\"notification-close\">\r\n                    <FontAwesomeIcon\r\n                        icon={faTimes}\r\n                        onClick={() => {\r\n                            props.closeWarningStatus();\r\n                            props.clearSearchValue();\r\n                        }}\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    return <div />;\r\n};\r\nexport default ErrorMessage;\r\n","export const ItemTypes = {\r\n    COLUMN: \"column\"\r\n};\r\n","import React from \"react\";\r\nimport { useDrag, useDrop } from \"react-dnd\";\r\nimport PropTypes from \"prop-types\";\r\nimport { ItemTypes } from \"./ItemTypes\";\r\n\r\nconst style = {\r\n    cursor: \"move\"\r\n};\r\n\r\nconst ColumnItem = ({ id, text, moveColumn, findColumn }) => {\r\n    const originalIndex = findColumn(id).index;\r\n\r\n    const [{ isDragging }, drag] = useDrag({\r\n        item: { type: ItemTypes.COLUMN, id, originalIndex },\r\n        collect: (monitor) => ({\r\n            isDragging: monitor.isDragging()\r\n        }),\r\n        end: (dropResult, monitor) => {\r\n            // eslint-disable-next-line no-shadow\r\n            const { id: droppedId, originalIndex } = monitor.getItem();\r\n            const didDrop = monitor.didDrop();\r\n            if (!didDrop) {\r\n                moveColumn(droppedId, originalIndex);\r\n            }\r\n        }\r\n    });\r\n\r\n    const [, drop] = useDrop({\r\n        accept: ItemTypes.COLUMN,\r\n        canDrop: () => false,\r\n        hover({ id: draggedId }) {\r\n            if (draggedId !== id) {\r\n                const { index: overIndex } = findColumn(id);\r\n                moveColumn(draggedId, overIndex);\r\n            }\r\n        }\r\n    });\r\n\r\n    const opacity = isDragging ? 0.1 : 1;\r\n\r\n    return (\r\n        <div ref={(node) => drag(drop(node))} style={{ ...style, opacity }}>\r\n            {text}\r\n        </div>\r\n    );\r\n};\r\n\r\nColumnItem.propTypes = {\r\n    id: PropTypes.any,\r\n    text: PropTypes.any,\r\n    moveColumn: PropTypes.any,\r\n    findColumn: PropTypes.any\r\n};\r\n\r\nexport default ColumnItem;\r\n","/* eslint-disable react/jsx-fragments */\r\n/* eslint-disable react/destructuring-assignment */\r\nimport React, { useState, Fragment } from \"react\";\r\nimport { useDrop } from \"react-dnd\";\r\nimport update from \"immutability-helper\";\r\nimport PropTypes from \"prop-types\";\r\nimport { ItemTypes } from \"./ItemTypes\";\r\nimport ColumnItem from \"./columnItem\";\r\n\r\nconst ColumnsList = (props) => {\r\n    const [columns, setColumns] = useState([...props.columnsArray]);\r\n\r\n    const findColumn = (id) => {\r\n        const column = columns.filter((c) => `${c.id}` === id)[0];\r\n        return {\r\n            column,\r\n            index: columns.indexOf(column)\r\n        };\r\n    };\r\n\r\n    const moveColumn = (id, atIndex) => {\r\n        const { column, index } = findColumn(id);\r\n        setColumns(\r\n            update(columns, {\r\n                $splice: [\r\n                    [index, 1],\r\n                    [atIndex, 0, column]\r\n                ]\r\n            })\r\n        );\r\n        const values = [];\r\n        let temp = [];\r\n        temp = update(columns, {\r\n            $splice: [\r\n                [index, 1],\r\n                [atIndex, 0, column]\r\n            ]\r\n        });\r\n        temp.forEach((item) => {\r\n            values.push(item.id);\r\n        });\r\n        props.handleReorderList(values);\r\n    };\r\n\r\n    const [, drop] = useDrop({ accept: ItemTypes.COLUMN });\r\n\r\n    React.useEffect(() => {\r\n        setColumns(props.columnsArray);\r\n    }, [props.columnsArray]);\r\n\r\n    return (\r\n        <Fragment>\r\n            <div ref={drop} style={{ display: \"flex\", flexWrap: \"wrap\" }}>\r\n                {columns.map((column) => (\r\n                    <ColumnItem\r\n                        key={column.id}\r\n                        id={`${column.id}`}\r\n                        text={column.text}\r\n                        moveColumn={moveColumn}\r\n                        findColumn={findColumn}\r\n                    />\r\n                ))}\r\n            </div>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nColumnsList.propTypes = {\r\n    columnsArray: PropTypes.any,\r\n    handleReorderList: PropTypes.any\r\n};\r\n\r\nexport default ColumnsList;\r\n","/* eslint-disable react/destructuring-assignment */\r\n/* eslint no-unused-expressions: [\"error\", {\"allowTernary\": true }] */\r\n/* eslint-disable react/no-access-state-in-setstate */\r\n/* eslint-disable no-loop-func */\r\n/* eslint-disable no-else-return */\r\n\r\nimport React from \"react\";\r\nimport { DndProvider } from \"react-dnd\";\r\nimport { TouchBackend } from \"react-dnd-touch-backend\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTimes, faAlignJustify } from \"@fortawesome/free-solid-svg-icons\";\r\nimport PropTypes from \"prop-types\";\r\nimport ColumnsList from \"./columnsList\";\r\n\r\nclass ColumnReordering extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            columnReorderEntityList: this.props.headerKeys,\r\n            columnSelectList: this.props.columns.map((item) => item.name),\r\n            leftPinnedColumList: this.props.existingPinnedHeadersList,\r\n            isAllSelected: true,\r\n            maxLeftPinnedColumn: this.props.maxLeftPinnedColumn\r\n        };\r\n        this.setWrapperRef = this.setWrapperRef.bind(this);\r\n        this.handleClickOutside = this.handleClickOutside.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.addEventListener(\"mousedown\", this.handleClickOutside);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.removeEventListener(\"mousedown\", this.handleClickOutside);\r\n    }\r\n\r\n    setWrapperRef(node) {\r\n        this.wrapperRef = node;\r\n    }\r\n\r\n    /**\r\n     * Method to reset the coloumn list onClick of Reset button\r\n     */\r\n    resetColumnReorderList = () => {\r\n        this.setState({\r\n            columnReorderEntityList: this.props.columns.map(\r\n                (item) => item.name\r\n            ),\r\n            leftPinnedColumList: [],\r\n            isAllSelected: true\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Method to Select all options in the coloumn list onClick of Select All button\r\n     */\r\n    selectAllToColumnReOrderList = () => {\r\n        this.resetColumnReorderList();\r\n        let existingColumnReorderEntityList = this.state\r\n            .columnReorderEntityList;\r\n        let isExistingAllSelect = this.state.isAllSelected;\r\n        if (!isExistingAllSelect) {\r\n            existingColumnReorderEntityList = this.props.columns.map(\r\n                (item) => item.name\r\n            );\r\n            isExistingAllSelect = true;\r\n        } else {\r\n            existingColumnReorderEntityList = [];\r\n            isExistingAllSelect = false;\r\n        }\r\n        this.setState({\r\n            columnReorderEntityList: existingColumnReorderEntityList,\r\n            isAllSelected: isExistingAllSelect,\r\n            leftPinnedColumList: []\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Method To add a column to columnReorderEntityList when selected.\r\n     * @param {String} typeToBeAdded\r\n     */\r\n    addToColumnReorderEntityList = (typeToBeAdded) => {\r\n        let existingColumnReorderEntityList = this.state\r\n            .columnReorderEntityList;\r\n        let existingLeftPinnedList = this.state.leftPinnedColumList;\r\n        if (!existingColumnReorderEntityList.includes(typeToBeAdded)) {\r\n            let indexOfInsertion = this.state.columnSelectList.findIndex(\r\n                (item) => item === typeToBeAdded\r\n            );\r\n            while (indexOfInsertion > 0) {\r\n                if (\r\n                    existingColumnReorderEntityList.includes(\r\n                        this.state.columnSelectList[indexOfInsertion - 1]\r\n                    )\r\n                ) {\r\n                    if (\r\n                        !existingLeftPinnedList.includes(\r\n                            this.state.columnSelectList[indexOfInsertion - 1]\r\n                        )\r\n                    ) {\r\n                        indexOfInsertion = existingColumnReorderEntityList.findIndex(\r\n                            (item) =>\r\n                                item ===\r\n                                this.state.columnSelectList[\r\n                                    indexOfInsertion - 1\r\n                                ]\r\n                        );\r\n                        indexOfInsertion += 1;\r\n                        break;\r\n                    } else {\r\n                        indexOfInsertion -= 1;\r\n                    }\r\n                } else {\r\n                    indexOfInsertion -= 1;\r\n                }\r\n            }\r\n            existingColumnReorderEntityList.splice(\r\n                indexOfInsertion,\r\n                0,\r\n                typeToBeAdded\r\n            );\r\n        } else {\r\n            existingColumnReorderEntityList = existingColumnReorderEntityList.filter(\r\n                (item) => {\r\n                    if (item !== typeToBeAdded) return item;\r\n                    else return \"\";\r\n                }\r\n            );\r\n            if (existingLeftPinnedList.includes(typeToBeAdded)) {\r\n                existingLeftPinnedList = existingLeftPinnedList.filter(\r\n                    (item) => item !== typeToBeAdded\r\n                );\r\n            }\r\n        }\r\n        this.setState({\r\n            columnReorderEntityList: existingColumnReorderEntityList,\r\n            isAllSelected: false,\r\n            leftPinnedColumList: existingLeftPinnedList\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Method to handle the like-search on key stroke.\r\n     * @param {Event} e\r\n     */\r\n    filterColumnReorderList = (e) => {\r\n        const searchKey = String(e.target.value).toLowerCase();\r\n        const existingList = this.props.columns.map((item) => item.name);\r\n        let filtererdColumnReorderList = [];\r\n        if (searchKey.length > 0) {\r\n            filtererdColumnReorderList = existingList.filter((item) => {\r\n                return item.toLowerCase().includes(searchKey);\r\n            });\r\n        } else {\r\n            filtererdColumnReorderList = this.props.columns.map(\r\n                (item) => item.name\r\n            );\r\n        }\r\n        this.setState({\r\n            columnSelectList: filtererdColumnReorderList\r\n        });\r\n    };\r\n\r\n    createColumnsArrayFromProps = (colsList) => {\r\n        return colsList.map((item) => {\r\n            return {\r\n                id: item,\r\n                text: (\r\n                    <div className=\"column__reorder\" key={item}>\r\n                        <div className=\"\">\r\n                            <FontAwesomeIcon icon={faAlignJustify} />\r\n                        </div>\r\n                        <div className=\"column__reorder__name\">{item}</div>\r\n                        <div className=\"column__wrap\">\r\n                            <div className=\"column__checkbox\">\r\n                                <input\r\n                                    role=\"button\"\r\n                                    type=\"checkbox\"\r\n                                    id={`checkBoxToPinLeft_${item}`}\r\n                                    checked={this.state.leftPinnedColumList.includes(\r\n                                        item\r\n                                    )}\r\n                                    disabled={\r\n                                        this.state.maxLeftPinnedColumn -\r\n                                            this.state.leftPinnedColumList\r\n                                                .length <=\r\n                                        0\r\n                                            ? !this.state.leftPinnedColumList.includes(\r\n                                                  item\r\n                                              )\r\n                                            : false\r\n                                    }\r\n                                    onChange={() =>\r\n                                        this.reArrangeLeftPinnedColumn(item)\r\n                                    }\r\n                                />\r\n                            </div>\r\n                            <div className=\"column__txt\">Pin Left</div>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            };\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Method to handle the position of columns Names when left pinned in coloumn selector view.\r\n     * @param {String} columHeaderName\r\n     */\r\n    reArrangeLeftPinnedColumn = (columHeaderName) => {\r\n        let existingLeftPinnedList = this.state.leftPinnedColumList;\r\n        let existingColumnReorderEntityList = this.state\r\n            .columnReorderEntityList;\r\n        if (!existingLeftPinnedList.includes(columHeaderName)) {\r\n            existingLeftPinnedList.unshift(columHeaderName);\r\n        } else {\r\n            existingLeftPinnedList = existingLeftPinnedList.filter(\r\n                (item) => item !== columHeaderName\r\n            );\r\n        }\r\n        this.setState({\r\n            leftPinnedColumList: existingLeftPinnedList\r\n        });\r\n\r\n        existingLeftPinnedList.forEach((item) => {\r\n            existingColumnReorderEntityList = existingColumnReorderEntityList.filter(\r\n                (subItem) => subItem !== item\r\n            );\r\n            existingColumnReorderEntityList.unshift(item);\r\n            return null;\r\n        });\r\n        this.setState({\r\n            columnReorderEntityList: existingColumnReorderEntityList\r\n        });\r\n    };\r\n\r\n    handleReorderList = (reordered) => {\r\n        this.props.handleheaderNameList(reordered);\r\n    };\r\n\r\n    handleClickOutside(event) {\r\n        if (this.wrapperRef && !this.wrapperRef.contains(event.target)) {\r\n            this.props.closeColumnReOrdering();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"columns--grid\" ref={this.setWrapperRef}>\r\n                <div className=\"column__grid\">\r\n                    <div className=\"column__chooser\">\r\n                        <div className=\"column__header\">\r\n                            <div className=\"\">\r\n                                <strong>Column Chooser</strong>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"column__body\">\r\n                            <div>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    placeholder=\"Search column\"\r\n                                    className=\"custom__ctrl\"\r\n                                    onChange={this.filterColumnReorderList}\r\n                                />\r\n                            </div>\r\n                            <div className=\"column__wrap column__headertxt\">\r\n                                <div className=\"column__checkbox\">\r\n                                    <input\r\n                                        type=\"checkbox\"\r\n                                        id=\"selectallcolumncheckbox\"\r\n                                        onChange={() =>\r\n                                            this.selectAllToColumnReOrderList()\r\n                                        }\r\n                                        checked={\r\n                                            this.state.columnReorderEntityList\r\n                                                .length ===\r\n                                            this.props.columns.length\r\n                                        }\r\n                                    />\r\n                                </div>\r\n                                <div className=\"column__txt\">Select all</div>\r\n                            </div>\r\n                            {this.state.columnSelectList.map((item) => {\r\n                                return (\r\n                                    <div className=\"column__wrap\" key={item}>\r\n                                        <div className=\"column__checkbox\">\r\n                                            <input\r\n                                                type=\"checkbox\"\r\n                                                id={`checkboxtoselectreorder_${item}`}\r\n                                                checked={this.state.columnReorderEntityList.includes(\r\n                                                    item\r\n                                                )}\r\n                                                onChange={() =>\r\n                                                    this.addToColumnReorderEntityList(\r\n                                                        item\r\n                                                    )\r\n                                                }\r\n                                            />\r\n                                        </div>\r\n                                        <div className=\"column__txt\">\r\n                                            {item}\r\n                                        </div>\r\n                                    </div>\r\n                                );\r\n                            })}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"column__settings\">\r\n                        <div className=\"column__header\">\r\n                            <div className=\"column__headerTxt\">\r\n                                <strong>Column Setting</strong>\r\n                            </div>\r\n                            <div className=\"column__close\">\r\n                                <FontAwesomeIcon\r\n                                    className=\"icon-close\"\r\n                                    icon={faTimes}\r\n                                    onClick={() =>\r\n                                        this.props.closeColumnReOrdering()\r\n                                    }\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"column__header\">\r\n                            <div className=\"column__headerTxt\">\r\n                                <strong>\r\n                                    &nbsp; &nbsp; Selected Column Count :{\" \"}\r\n                                    {this.state.columnReorderEntityList.length}\r\n                                </strong>\r\n                            </div>\r\n                            <div className=\"column__headerTxt\">\r\n                                {this.state.maxLeftPinnedColumn -\r\n                                    this.state.leftPinnedColumList.length >\r\n                                0 ? (\r\n                                    <strong>\r\n                                        &nbsp; &nbsp; Left Pinned Column Count\r\n                                        Remaining :{\" \"}\r\n                                        {this.state.maxLeftPinnedColumn -\r\n                                            this.state.leftPinnedColumList\r\n                                                .length}\r\n                                    </strong>\r\n                                ) : (\r\n                                    <strong style={{ color: \"red\" }}>\r\n                                        &nbsp; &nbsp; Maximum Count Of Left Pin\r\n                                        Columns REACHED\r\n                                    </strong>\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"column__body\">\r\n                            <DndProvider\r\n                                backend={TouchBackend}\r\n                                options={{ enableMouseEvents: true }}\r\n                            >\r\n                                <ColumnsList\r\n                                    columnsArray={this.createColumnsArrayFromProps(\r\n                                        this.state.columnReorderEntityList\r\n                                    )}\r\n                                    handleReorderList={this.handleReorderList}\r\n                                />\r\n                            </DndProvider>\r\n                        </div>\r\n                        <div className=\"column__footer\">\r\n                            <div className=\"column__btns\">\r\n                                <button\r\n                                    type=\"button\"\r\n                                    className=\"btns\"\r\n                                    onClick={() =>\r\n                                        this.resetColumnReorderList()\r\n                                    }\r\n                                >\r\n                                    Reset\r\n                                </button>\r\n                                <button\r\n                                    type=\"button\"\r\n                                    className=\"btns\"\r\n                                    onClick={() =>\r\n                                        this.props.closeColumnReOrdering()\r\n                                    }\r\n                                >\r\n                                    Cancel\r\n                                </button>\r\n                                <button\r\n                                    type=\"button\"\r\n                                    className=\"btns btns__save\"\r\n                                    onClick={() =>\r\n                                        this.props.updateTableAsPerRowChooser(\r\n                                            this.state.columnReorderEntityList,\r\n                                            this.state.leftPinnedColumList\r\n                                        )\r\n                                    }\r\n                                >\r\n                                    Save\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nColumnReordering.propTypes = {\r\n    headerKeys: PropTypes.any,\r\n    columns: PropTypes.any,\r\n    existingPinnedHeadersList: PropTypes.any,\r\n    maxLeftPinnedColumn: PropTypes.any,\r\n    closeColumnReOrdering: PropTypes.any,\r\n    handleheaderNameList: PropTypes.any,\r\n    updateTableAsPerRowChooser: PropTypes.any\r\n};\r\n\r\nexport default ColumnReordering;\r\n","export const ItemTypes = {\r\n    CARD: \"sort\"\r\n};\r\n","import React from \"react\";\r\nimport { useDrag, useDrop } from \"react-dnd\";\r\nimport PropTypes from \"prop-types\";\r\nimport { ItemTypes } from \"./ItemTypes\";\r\n\r\nconst style = {\r\n    cursor: \"move\"\r\n};\r\n\r\nconst Card = ({ id, text, moveCard, findCard }) => {\r\n    const originalIndex = findCard(id).index;\r\n\r\n    const [{ isDragging }, drag] = useDrag({\r\n        item: { type: ItemTypes.CARD, id, originalIndex },\r\n        collect: (monitor) => ({\r\n            isDragging: monitor.isDragging()\r\n        }),\r\n        end: (dropResult, monitor) => {\r\n            // eslint-disable-next-line no-shadow\r\n            const { id: droppedId, originalIndex } = monitor.getItem();\r\n            const didDrop = monitor.didDrop();\r\n            if (!didDrop) {\r\n                moveCard(droppedId, originalIndex);\r\n            }\r\n        }\r\n    });\r\n\r\n    const [, drop] = useDrop({\r\n        accept: ItemTypes.CARD,\r\n        canDrop: () => false,\r\n        hover({ id: draggedId }) {\r\n            if (draggedId !== id) {\r\n                const { index: overIndex } = findCard(id);\r\n                moveCard(draggedId, overIndex);\r\n            }\r\n        }\r\n    });\r\n\r\n    const opacity = isDragging ? 0.5 : 1;\r\n\r\n    return (\r\n        <div ref={(node) => drag(drop(node))} style={{ ...style, opacity }}>\r\n            {text}\r\n        </div>\r\n    );\r\n};\r\n\r\nCard.propTypes = {\r\n    id: PropTypes.any,\r\n    text: PropTypes.any,\r\n    moveCard: PropTypes.any,\r\n    findCard: PropTypes.any\r\n};\r\n\r\nexport default Card;\r\n","/* eslint-disable react/jsx-fragments */\r\n/* eslint-disable react/destructuring-assignment */\r\nimport React, { useState, Fragment } from \"react\";\r\nimport { useDrop } from \"react-dnd\";\r\nimport update from \"immutability-helper\";\r\nimport PropTypes from \"prop-types\";\r\nimport Card from \"./SortItem\";\r\nimport { ItemTypes } from \"./ItemTypes\";\r\n\r\nconst SortingList = (props) => {\r\n    const [cards, setCards] = useState([...props.sortsArray]);\r\n\r\n    const findCard = (id) => {\r\n        const card = cards.filter((c) => `${c.id}` === id)[0];\r\n        return {\r\n            card,\r\n            index: cards.indexOf(card)\r\n        };\r\n    };\r\n\r\n    const moveCard = (id, atIndex) => {\r\n        const { card, index } = findCard(id);\r\n        setCards(\r\n            update(cards, {\r\n                $splice: [\r\n                    [index, 1],\r\n                    [atIndex, 0, card]\r\n                ]\r\n            })\r\n        );\r\n\r\n        const values = [];\r\n        let temp = [];\r\n        temp = update(cards, {\r\n            $splice: [\r\n                [index, 1],\r\n                [atIndex, 0, card]\r\n            ]\r\n        });\r\n        temp.forEach((item) => {\r\n            values.push(item.id);\r\n        });\r\n        props.handleReorderListOfSort(values);\r\n    };\r\n\r\n    const [, drop] = useDrop({ accept: ItemTypes.CARD });\r\n\r\n    React.useEffect(() => {\r\n        setCards(props.sortsArray);\r\n    }, [props.sortsArray]);\r\n\r\n    return (\r\n        <Fragment>\r\n            <div ref={drop} style={{ display: \"flex\", flexWrap: \"wrap\" }}>\r\n                {cards.map((card) => (\r\n                    <Card\r\n                        key={card.id}\r\n                        id={`${card.id}`}\r\n                        text={card.text}\r\n                        moveCard={moveCard}\r\n                        findCard={findCard}\r\n                    />\r\n                ))}\r\n            </div>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nSortingList.propTypes = {\r\n    sortsArray: PropTypes.any,\r\n    handleReorderListOfSort: PropTypes.any\r\n};\r\n\r\nexport default SortingList;\r\n","/* eslint-disable react/destructuring-assignment */\r\n/* eslint no-unused-expressions: [\"error\", {\"allowTernary\": true }] */\r\n/* eslint-disable react/no-access-state-in-setstate */\r\nimport React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n    faTimes,\r\n    faAlignJustify,\r\n    faTrash,\r\n    faPlus,\r\n    faCopy\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { DndProvider } from \"react-dnd\";\r\nimport { TouchBackend } from \"react-dnd-touch-backend\";\r\nimport PropTypes from \"prop-types\";\r\nimport SortingList from \"./SortingList\";\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            rowList: [true],\r\n            sortingOrderList:\r\n                this.props.sortingParamsObjectList === undefined\r\n                    ? []\r\n                    : this.props.sortingParamsObjectList,\r\n            errorMessage: false\r\n        };\r\n        this.setWrapperRef = this.setWrapperRef.bind(this);\r\n        this.handleClickOutside = this.handleClickOutside.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.addEventListener(\"mousedown\", this.handleClickOutside);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.removeEventListener(\"mousedown\", this.handleClickOutside);\r\n    }\r\n\r\n    setWrapperRef(node) {\r\n        this.wrapperRef = node;\r\n    }\r\n\r\n    add = () => {\r\n        const rowList = [...this.state.rowList];\r\n        rowList.push(true);\r\n        const existingSortingOrderList = this.state.sortingOrderList;\r\n        existingSortingOrderList.push({\r\n            sortBy: this.props.columnFieldValue[0],\r\n            order: \"Ascending\",\r\n            sortOn: \"Value\"\r\n        });\r\n        this.setState({\r\n            rowList,\r\n            sortingOrderList: existingSortingOrderList\r\n        });\r\n    };\r\n\r\n    copy = (i) => {\r\n        const rowList = [...this.state.sortingOrderList];\r\n        rowList.push(JSON.parse(JSON.stringify(rowList[i])));\r\n        this.setState({ sortingOrderList: rowList });\r\n    };\r\n\r\n    clearAll = () => {\r\n        this.setState({ sortingOrderList: [], errorMessage: false });\r\n        this.props.clearAllSortingParams();\r\n    };\r\n\r\n    remove = (i) => {\r\n        const sortingOrderList = [...this.state.sortingOrderList];\r\n        sortingOrderList.splice(i, 1);\r\n        this.setState({ sortingOrderList });\r\n        if (sortingOrderList.length <= 1) {\r\n            this.setState({ errorMessage: false });\r\n        }\r\n    };\r\n\r\n    createColumnsArrayFromProps = (rowsValue) => {\r\n        return rowsValue.map((row, index) => {\r\n            return {\r\n                id: index,\r\n                text: (\r\n                    <div className=\"sort__bodyContent\" key={row}>\r\n                        <div className=\"sort__reorder\">\r\n                            <div className=\"\">\r\n                                <div>&nbsp;</div>\r\n                            </div>\r\n\r\n                            <div className=\"sort__icon\">\r\n                                <FontAwesomeIcon icon={faAlignJustify} />\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"sort__reorder\">\r\n                            <div className=\"\">\r\n                                <div>Sort by</div>\r\n                            </div>\r\n\r\n                            <div className=\"sort__file\">\r\n                                <select\r\n                                    className=\"custom__ctrl\"\r\n                                    name=\"sortBy\"\r\n                                    onChange={(e) =>\r\n                                        this.captureSortingFeildValues(\r\n                                            e,\r\n                                            index,\r\n                                            \"sortBy\"\r\n                                        )\r\n                                    }\r\n                                    value={row.sortBy}\r\n                                >\r\n                                    {this.props.columnFieldValue.map((item) => (\r\n                                        <option key={item}>{item}</option>\r\n                                    ))}\r\n                                </select>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"sort__reorder\">\r\n                            <div className=\"\">\r\n                                <div>Sort on</div>\r\n                            </div>\r\n\r\n                            <div className=\"sort__file\">\r\n                                <select\r\n                                    className=\"custom__ctrl\"\r\n                                    name=\"sortOn\"\r\n                                    onChange={(e) =>\r\n                                        this.captureSortingFeildValues(\r\n                                            e,\r\n                                            index,\r\n                                            \"sortOn\"\r\n                                        )\r\n                                    }\r\n                                    value={row.sortOn}\r\n                                >\r\n                                    <option>Value</option>\r\n                                </select>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"sort__reorder\">\r\n                            <div className=\"\">\r\n                                <div>Order</div>\r\n                            </div>\r\n\r\n                            <div className=\"sort__file\">\r\n                                <select\r\n                                    className=\"custom__ctrl\"\r\n                                    name=\"order\"\r\n                                    onChange={(e) =>\r\n                                        this.captureSortingFeildValues(\r\n                                            e,\r\n                                            index,\r\n                                            \"order\"\r\n                                        )\r\n                                    }\r\n                                    value={row.order}\r\n                                >\r\n                                    <option>Ascending</option>\r\n                                    <option>Descending</option>\r\n                                </select>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"sort__reorder\">\r\n                            <div className=\"\">\r\n                                <div>&nbsp;</div>\r\n                            </div>\r\n\r\n                            <div className=\"sort__icon\">\r\n                                <FontAwesomeIcon\r\n                                    icon={faCopy}\r\n                                    title=\"Copy\"\r\n                                    onClick={() => this.copy(index)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"sort__reorder\">\r\n                            <div className=\"\">\r\n                                <div>&nbsp;</div>\r\n                            </div>\r\n\r\n                            <div className=\"sort__icon\">\r\n                                <FontAwesomeIcon\r\n                                    icon={faTrash}\r\n                                    title=\"Delete\"\r\n                                    onClick={() => this.remove(index)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            };\r\n        });\r\n    };\r\n\r\n    captureSortingFeildValues = (event, index, sortingKey) => {\r\n        const existingSortingOrderList = this.state.sortingOrderList;\r\n\r\n        if (sortingKey === \"sortBy\") {\r\n            existingSortingOrderList[index].sortBy = event.target.value;\r\n        }\r\n        if (sortingKey === \"order\") {\r\n            existingSortingOrderList[index].order = event.target.value;\r\n        }\r\n        if (\r\n            existingSortingOrderList[index].sortOn === \"\" ||\r\n            existingSortingOrderList[index].sortOn === undefined\r\n        ) {\r\n            existingSortingOrderList[index].sortOn = \"Value\";\r\n        }\r\n        this.setState({\r\n            sortingOrderList: existingSortingOrderList\r\n        });\r\n    };\r\n\r\n    updateTableAsPerSortCondition = () => {\r\n        const unique = new Set();\r\n        const showError = this.state.sortingOrderList.some(\r\n            (element) => unique.size === unique.add(element.sortBy).size\r\n        );\r\n        showError\r\n            ? this.setState({\r\n                  errorMessage: true\r\n              })\r\n            : this.setState({\r\n                  errorMessage: false\r\n              });\r\n        if (!showError) {\r\n            this.props.setTableAsPerSortingParams(this.state.sortingOrderList);\r\n        }\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @param {*} reOrderedSortingList\r\n     */\r\n    handleReorderListOfSort = (reOrderedIndexList) => {\r\n        this.props.handleTableSortSwap(reOrderedIndexList);\r\n    };\r\n\r\n    handleClickOutside(event) {\r\n        if (this.wrapperRef && !this.wrapperRef.contains(event.target)) {\r\n            this.props.closeSorting();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"sorts--grid\" ref={this.setWrapperRef}>\r\n                <div className=\"sort__grid\">\r\n                    <div className=\"sort__settings\">\r\n                        <div className=\"sort__header\">\r\n                            <div className=\"sort__headerTxt\">\r\n                                <strong>Sort </strong>\r\n                            </div>\r\n\r\n                            <div className=\"sort__close\">\r\n                                <FontAwesomeIcon\r\n                                    className=\"icon-close\"\r\n                                    icon={faTimes}\r\n                                    onClick={() => this.props.closeSorting()}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"sort__body\">\r\n                            <DndProvider\r\n                                backend={TouchBackend}\r\n                                options={{ enableMouseEvents: true }}\r\n                            >\r\n                                <SortingList\r\n                                    handleReorderListOfSort={\r\n                                        this.handleReorderListOfSort\r\n                                    }\r\n                                    sortsArray={this.createColumnsArrayFromProps(\r\n                                        this.state.sortingOrderList\r\n                                    )}\r\n                                />\r\n                            </DndProvider>\r\n                            <div className=\"sort-warning\">\r\n                                {this.state.errorMessage ? (\r\n                                    <span className=\"alert alert-danger\">\r\n                                        Sort by opted are same, Please choose\r\n                                        different one.\r\n                                    </span>\r\n                                ) : (\r\n                                    \"\"\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"sort__new\">\r\n                            <div className=\"sort__section\">\r\n                                <FontAwesomeIcon\r\n                                    icon={faPlus}\r\n                                    className=\"sort__icon\"\r\n                                />\r\n                                <div\r\n                                    role=\"button\"\r\n                                    tabIndex={0}\r\n                                    className=\"sort__txt\"\r\n                                    onClick={() => this.add()}\r\n                                    onKeyDown={() => this.add()}\r\n                                >\r\n                                    New Sort\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"sort__footer\">\r\n                            <div className=\"sort__btns\">\r\n                                <button\r\n                                    type=\"button\"\r\n                                    className=\"btns\"\r\n                                    onClick={this.clearAll}\r\n                                >\r\n                                    Clear All\r\n                                </button>\r\n\r\n                                <button\r\n                                    type=\"button\"\r\n                                    className=\"btns btns__save\"\r\n                                    onClick={() =>\r\n                                        this.updateTableAsPerSortCondition()\r\n                                    }\r\n                                >\r\n                                    Ok\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nApp.propTypes = {\r\n    sortingParamsObjectList: PropTypes.any,\r\n    closeSorting: PropTypes.any,\r\n    columnFieldValue: PropTypes.any,\r\n    clearAllSortingParams: PropTypes.any,\r\n    setTableAsPerSortingParams: PropTypes.any,\r\n    handleTableSortSwap: PropTypes.any\r\n};\r\n\r\nexport default App;\r\n","/* eslint-disable react/destructuring-assignment */\r\nimport React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n    faTimes,\r\n    faFilePdf,\r\n    faFileExcel,\r\n    faFileCsv\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport JSPDF from \"jspdf\";\r\nimport \"jspdf-autotable\";\r\nimport * as FileSaver from \"file-saver\";\r\nimport * as XLSX from \"xlsx\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nlet downLaodFileType = [];\r\nclass ExportData extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            columnValueList: this.props.columnsList,\r\n            columnEntityList: this.props.columnsList,\r\n            isAllSelected: true,\r\n            downLaodFileType: [],\r\n            filteredRow: [],\r\n            warning: \"\",\r\n            clickTag: \"none\"\r\n        };\r\n        this.setWrapperRef = this.setWrapperRef.bind(this);\r\n        this.handleClickOutside = this.handleClickOutside.bind(this);\r\n        this.selectDownLoadType = this.selectDownLoadType.bind(this);\r\n        this.exportValidation = this.exportValidation.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.addEventListener(\"mousedown\", this.handleClickOutside);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.removeEventListener(\"mousedown\", this.handleClickOutside);\r\n    }\r\n\r\n    setWrapperRef(node) {\r\n        this.wrapperRef = node;\r\n    }\r\n\r\n    resetColumnExportList = () => {\r\n        this.setState({\r\n            columnEntityList: [],\r\n            isAllSelected: false\r\n        });\r\n    };\r\n\r\n    selectAllToColumnList = () => {\r\n        this.resetColumnExportList();\r\n        this.setState({\r\n            // eslint-disable-next-line react/no-access-state-in-setstate\r\n            columnEntityList: !this.state.isAllSelected\r\n                ? this.props.columnsList\r\n                : [],\r\n            // eslint-disable-next-line react/no-access-state-in-setstate\r\n            isAllSelected: !this.state.isAllSelected\r\n        });\r\n    };\r\n\r\n    addToColumnEntityList = (typeToBeAdded) => {\r\n        // eslint-disable-next-line react/no-access-state-in-setstate\r\n        let existingColumnEntityList = this.state.columnEntityList;\r\n        if (!existingColumnEntityList.includes(typeToBeAdded)) {\r\n            existingColumnEntityList.push(typeToBeAdded);\r\n        } else {\r\n            existingColumnEntityList = existingColumnEntityList.filter(\r\n                (item) => {\r\n                    return item !== typeToBeAdded;\r\n                }\r\n            );\r\n        }\r\n        this.setState({\r\n            columnEntityList: existingColumnEntityList,\r\n            isAllSelected: false\r\n        });\r\n    };\r\n\r\n    selectDownLoadType = (event) => {\r\n        if (\r\n            event.target.checked &&\r\n            !this.state.downLaodFileType.includes(event.target.value)\r\n        ) {\r\n            downLaodFileType.push(event.target.value);\r\n            this.setState({ downLaodFileType });\r\n        } else {\r\n            downLaodFileType.forEach(function (value, index) {\r\n                if (value === event.target.value) {\r\n                    downLaodFileType = downLaodFileType.splice(index, value);\r\n                }\r\n            });\r\n            this.setState({ downLaodFileType });\r\n        }\r\n    };\r\n\r\n    exportRowData = () => {\r\n        const columnVlaueList = this.state.columnEntityList;\r\n        if (\r\n            columnVlaueList.length > 0 &&\r\n            this.state.downLaodFileType.length > 0\r\n        ) {\r\n            this.props.rows.forEach((row) => {\r\n                const keys = Object.getOwnPropertyNames(row);\r\n                const filteredColumnVal = {};\r\n                keys.forEach(function (key) {\r\n                    columnVlaueList.forEach((columnName) => {\r\n                        if (columnName.key === key)\r\n                            filteredColumnVal[key] = row[key];\r\n                    });\r\n                });\r\n                this.state.filteredRow.push(filteredColumnVal);\r\n            });\r\n\r\n            this.state.downLaodFileType.forEach((item) => {\r\n                if (item === \"pdf\") this.downloadPDF();\r\n                else if (item === \"excel\") this.downloadXLSFile();\r\n                else this.downloadCSVFile();\r\n            });\r\n        }\r\n    };\r\n\r\n    downloadPDF = () => {\r\n        const unit = \"pt\";\r\n        const size = \"A4\"; // Use A1, A2, A3 or A4\r\n        const orientation = \"landscape\"; // portrait or landscape\r\n\r\n        const marginLeft = 300;\r\n        const doc = new JSPDF(orientation, unit, size);\r\n\r\n        doc.setFontSize(15);\r\n\r\n        const title = \"iCargo Report\";\r\n        const headers = [\r\n            this.state.columnEntityList.map((column) => {\r\n                return column.name;\r\n            })\r\n        ];\r\n        const dataValues = [];\r\n        this.props.rows.forEach((row) => {\r\n            const keys = Object.keys(row);\r\n            const filteredColumnVal = [];\r\n            this.state.columnEntityList.forEach((columnName) => {\r\n                keys.forEach((key) => {\r\n                    if (columnName.key === key)\r\n                        filteredColumnVal.push(row[key]);\r\n                });\r\n            });\r\n            dataValues.push(filteredColumnVal);\r\n        });\r\n\r\n        const content = {\r\n            startY: 50,\r\n            head: headers,\r\n            body: dataValues\r\n        };\r\n\r\n        doc.text(title, marginLeft, 40);\r\n        doc.autoTable(content);\r\n        doc.save(\"report.pdf\");\r\n    };\r\n\r\n    downloadCSVFile = () => {\r\n        const fileType =\r\n            \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\r\n        const fileExtension = \".csv\";\r\n        const fileName = \"CSVDownload\";\r\n        const ws = XLSX.utils.json_to_sheet(this.state.filteredRow);\r\n        const wb = { Sheets: { data: ws }, SheetNames: [\"data\"] };\r\n        const excelBuffer = XLSX.write(wb, { bookType: \"csv\", type: \"array\" });\r\n        const data = new Blob([excelBuffer], { type: fileType });\r\n        FileSaver.saveAs(data, fileName + fileExtension);\r\n    };\r\n\r\n    downloadXLSFile = () => {\r\n        const fileType =\r\n            \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\r\n        const fileExtension = \".xlsx\";\r\n        const fileName = \"XLSXDownload\";\r\n        const ws = XLSX.utils.json_to_sheet(this.state.filteredRow);\r\n        const wb = { Sheets: { data: ws }, SheetNames: [\"data\"] };\r\n        const excelBuffer = XLSX.write(wb, { bookType: \"xlsx\", type: \"array\" });\r\n        const data = new Blob([excelBuffer], { type: fileType });\r\n        FileSaver.saveAs(data, fileName + fileExtension);\r\n    };\r\n\r\n    columnSearchLogic = (e) => {\r\n        const searchKey = String(e.target.value).toLowerCase();\r\n        const filteredRows = this.props.columnsList.filter((item) => {\r\n            return item.name.toLowerCase().includes(searchKey);\r\n        });\r\n        if (!filteredRows.length) {\r\n            this.setState({ columnValueList: this.props.columnsList });\r\n        } else {\r\n            this.setState({ columnValueList: filteredRows });\r\n        }\r\n    };\r\n\r\n    exportValidation = () => {\r\n        const columnLength = this.state.columnEntityList.length;\r\n        const fileLength = this.state.downLaodFileType.length;\r\n        if (columnLength > 0 && fileLength > 0) {\r\n            this.exportRowData();\r\n            this.setState({ clickTag: \"none\" });\r\n        } else if (columnLength === 0) {\r\n            this.setState({ warning: \"Column\" });\r\n            this.setState({ clickTag: \"\" });\r\n        } else if (fileLength === 0) {\r\n            this.setState({ warning: \"File Type\" });\r\n            this.setState({ clickTag: \"\" });\r\n        }\r\n        if (columnLength === 0 && fileLength === 0) {\r\n            this.setState({ warning: \"File Type & Column\" });\r\n            this.setState({ clickTag: \"\" });\r\n        }\r\n    };\r\n\r\n    handleClickOutside(event) {\r\n        if (this.wrapperRef && !this.wrapperRef.contains(event.target)) {\r\n            this.props.closeExport();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"exports--grid\" ref={this.setWrapperRef}>\r\n                <div className=\"export__grid\">\r\n                    <div className=\"export__chooser\">\r\n                        <div className=\"export__header\">\r\n                            <div className=\"\">\r\n                                <strong>Export Data</strong>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"export__body\">\r\n                            <div>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    placeholder=\"Search export\"\r\n                                    className=\"custom__ctrl\"\r\n                                    onChange={this.columnSearchLogic}\r\n                                />\r\n                            </div>\r\n                            <div className=\"export__wrap export__headertxt\">\r\n                                <div className=\"export__checkbox\">\r\n                                    <input\r\n                                        className=\"selectColumn\"\r\n                                        type=\"checkbox\"\r\n                                        onChange={() =>\r\n                                            this.selectAllToColumnList()\r\n                                        }\r\n                                        checked={this.state.isAllSelected}\r\n                                    />\r\n                                </div>\r\n                                <div className=\"export__txt\">Select All</div>\r\n                            </div>\r\n                            {this.state.columnValueList &&\r\n                            this.state.columnValueList.length > 0\r\n                                ? this.state.columnValueList.map((column) => {\r\n                                      return (\r\n                                          <div\r\n                                              className=\"export__wrap\"\r\n                                              key={column.key}\r\n                                          >\r\n                                              <div className=\"export__checkbox\">\r\n                                                  <input\r\n                                                      type=\"checkbox\"\r\n                                                      checked={this.state.columnEntityList.includes(\r\n                                                          column\r\n                                                      )}\r\n                                                      onChange={() =>\r\n                                                          this.addToColumnEntityList(\r\n                                                              column\r\n                                                          )\r\n                                                      }\r\n                                                  />\r\n                                              </div>\r\n                                              <div className=\"export__txt\">\r\n                                                  {column.name}\r\n                                              </div>\r\n                                          </div>\r\n                                      );\r\n                                  })\r\n                                : \"\"}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"export__settings\">\r\n                        <div className=\"export__header\">\r\n                            <div className=\"export__headerTxt\" />\r\n                            <div className=\"export__close\">\r\n                                <FontAwesomeIcon\r\n                                    icon={faTimes}\r\n                                    className=\"icon-close\"\r\n                                    onClick={this.props.closeExport}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"export__as\">Export as</div>\r\n                        <div className=\"export__body\">\r\n                            <div className=\"export__reorder\">\r\n                                <div className=\"\">\r\n                                    <input\r\n                                        type=\"checkbox\"\r\n                                        name=\"pdf\"\r\n                                        value=\"pdf\"\r\n                                        onChange={this.selectDownLoadType}\r\n                                    />\r\n                                </div>\r\n                                <div className=\"export__file\">\r\n                                    <FontAwesomeIcon\r\n                                        icon={faFilePdf}\r\n                                        className=\"temp\"\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"export__reorder\">\r\n                                <div className=\"\">\r\n                                    <input\r\n                                        type=\"checkbox\"\r\n                                        name=\"excel\"\r\n                                        value=\"excel\"\r\n                                        onChange={this.selectDownLoadType}\r\n                                    />\r\n                                </div>\r\n                                <div className=\"export__file\">\r\n                                    <FontAwesomeIcon\r\n                                        icon={faFileExcel}\r\n                                        className=\"temp\"\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"export__reorder\">\r\n                                <div className=\"\">\r\n                                    <input\r\n                                        type=\"checkbox\"\r\n                                        name=\"csv\"\r\n                                        value=\"csv\"\r\n                                        onChange={this.selectDownLoadType}\r\n                                    />\r\n                                </div>\r\n                                <div className=\"export__file\">\r\n                                    <FontAwesomeIcon\r\n                                        icon={faFileCsv}\r\n                                        className=\"temp\"\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"exportWarning\">\r\n                                <span\r\n                                    style={{ display: this.state.clickTag }}\r\n                                    className=\"alert alert-danger\"\r\n                                >\r\n                                    You have not selected{\" \"}\r\n                                    <strong>{this.state.warning}</strong>\r\n                                </span>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"export__footer\">\r\n                            <div className=\"export__btns\">\r\n                                <button\r\n                                    type=\"button\"\r\n                                    className=\"btns\"\r\n                                    onClick={() => this.props.closeExport()}\r\n                                >\r\n                                    Cancel\r\n                                </button>\r\n                                <button\r\n                                    type=\"button\"\r\n                                    className=\"btns btns__save\"\r\n                                    onClick={() => {\r\n                                        this.exportValidation();\r\n                                    }}\r\n                                >\r\n                                    Export\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nExportData.propTypes = {\r\n    columnsList: PropTypes.any,\r\n    closeExport: PropTypes.any,\r\n    rows: PropTypes.any\r\n};\r\n\r\nexport default ExportData;\r\n","/* eslint-disable lines-between-class-members */\r\n/* eslint-disable react/no-access-state-in-setstate */\r\n/* eslint-disable jsx-a11y/click-events-have-key-events */\r\n/* eslint-disable jsx-a11y/no-static-element-interactions */\r\n/* eslint-disable react/destructuring-assignment */\r\nimport React, { Component } from \"react\";\r\n\r\nimport { Toolbar, Data, Filters, Editors } from \"react-data-grid-addons\";\r\nimport { FormControl } from \"react-bootstrap\";\r\nimport {\r\n    faSortAmountDown,\r\n    faColumns,\r\n    faShareAlt,\r\n    faSortDown,\r\n    faSave\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport PropTypes from \"prop-types\";\r\nimport ExtDataGrid from \"./common/extDataGrid\";\r\nimport { applyFormula } from \"./utilities/utils\";\r\nimport DatePicker from \"./functions/DatePicker\";\r\nimport ErrorMessage from \"./common/ErrorMessage\";\r\nimport ColumnReordering from \"./overlays/column_chooser/Chooser\";\r\nimport Sorting from \"./overlays/sorting/Sorting\";\r\nimport ExportData from \"./overlays/export_data/ExportData\";\r\n\r\nconst { DropDownEditor } = Editors;\r\nconst selectors = Data.Selectors;\r\nlet swapList = [];\r\nlet swapSortList = [];\r\nconst { AutoCompleteFilter, NumericFilter } = Filters;\r\n\r\nclass Spreadsheet extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        const airportCodes = [];\r\n        const { dataSet, pageSize } = this.props;\r\n        // this.props.airportCodes.forEach((item) => {\r\n        //     airportCodes.push({ id: item, value: item });\r\n        // });\r\n        const dataSetVar = JSON.parse(JSON.stringify(dataSet));\r\n        this.state = {\r\n            warningStatus: \"\",\r\n            height: 680,\r\n            // displayNoRows: \"none\",\r\n            // searchIconDisplay: \"\",\r\n            searchValue: \"\",\r\n            sortColumn: \"\",\r\n            sortDirection: \"NONE\",\r\n            // filter: {},\r\n            pageRowCount: pageSize,\r\n            pageIndex: 1,\r\n            dataSet: dataSetVar,\r\n            subDataSet: [],\r\n            rows: dataSetVar ? dataSetVar.slice(0, 500) : [],\r\n            selectedIndexes: [],\r\n            junk: {},\r\n            // topLeft: {},\r\n            columnReorderingComponent: null,\r\n            exportComponent: null,\r\n            filteringRows: this.props.rows,\r\n            tempRows: this.props.rows,\r\n            sortingPanelComponent: null,\r\n            count: this.props.rows.length,\r\n            sortingOrderSwapList: [],\r\n            sortingParamsObjectList: [],\r\n            // eslint-disable-next-line react/no-unused-state\r\n            pinnedReorder: false,\r\n            columns: this.props.columns.map((item) => {\r\n                const colItem = item;\r\n                if (colItem.editor === \"DatePicker\") {\r\n                    colItem.editor = DatePicker;\r\n                } else if (\r\n                    colItem.editor === \"DropDown\" &&\r\n                    colItem.dataSource\r\n                ) {\r\n                    colItem.editor = (\r\n                        <DropDownEditor options={colItem.dataSource} />\r\n                    );\r\n                } else if (colItem.editor === \"Text\") {\r\n                    colItem.editor = \"text\";\r\n                } else {\r\n                    colItem.editor = null;\r\n                }\r\n                if (colItem.filterType === \"numeric\") {\r\n                    colItem.filterRenderer = NumericFilter;\r\n                } else {\r\n                    colItem.filterRenderer = AutoCompleteFilter;\r\n                }\r\n                return colItem;\r\n            })\r\n        };\r\n        // document.addEventListener(\"copy\", this.handleCopy);\r\n        // document.addEventListener(\"paste\", this.handlePaste);\r\n        this.handleSearchValue = this.handleSearchValue.bind(this);\r\n        this.clearSearchValue = this.clearSearchValue.bind(this);\r\n        this.handleFilterChange = this.handleFilterChange.bind(this);\r\n\r\n        this.formulaAppliedCols = this.props.columns.filter((item) => {\r\n            return item.formulaApplicable;\r\n        });\r\n    }\r\n\r\n    // updateRows = (startIdx, newRows) => {\r\n    //   this.setState((state) => {\r\n    //     const rows = state.rows.slice();\r\n    //     for (let i = 0; i < newRows.length; i++) {\r\n    //       if (startIdx + i < rows.length) {\r\n    //         rows[startIdx + i] = {\r\n    //           ...rows[startIdx + i],\r\n    //           ...newRows[i],\r\n    //         };\r\n    //       }\r\n    //     }\r\n    //     return {\r\n    //       rows,\r\n    //     };\r\n    //   });\r\n    // };\r\n\r\n    // rowGetter = (i) => {\r\n    // console.log(i)\r\n    //   const { rows } = this.state;\r\n    //   return rows[i];\r\n    // };\r\n\r\n    // handleCopy = (e) => {\r\n    //   e.preventDefault();\r\n    //   const { topLeft, botRight } = this.state;\r\n    //   const text = range(topLeft.rowIdx, botRight.rowIdx + 1)\r\n    //     .map((rowIdx) =>\r\n    //       this.state.columns\r\n    //         .slice(topLeft.colIdx - 1, botRight.colIdx)\r\n    //         .map((col) => this.rowGetter(rowIdx)[col.key])\r\n    //         .join(\"\\t\")\r\n    //     )\r\n    //     .join(\"\\n\");\r\n    //   e.clipboardData.setData(\"text/plain\", text);\r\n    // };\r\n\r\n    // handlePaste = (e) => {\r\n    //   e.preventDefault();\r\n    //   const { topLeft } = this.state;\r\n    //   const newRows = [];\r\n    //   const pasteData = defaultParsePaste(e.clipboardData.getData(\"text/plain\"));\r\n    //   pasteData.forEach((row) => {\r\n    //     const rowData = {};\r\n    //     // Merge the values from pasting and the keys from the columns\r\n    //     this.state.columns\r\n    //       .slice(topLeft.colIdx - 1, topLeft.colIdx - 1 + row.length)\r\n    //       .forEach((col, j) => {\r\n    //         rowData[col.key] = row[j];\r\n    //       });\r\n    //     newRows.push(rowData);\r\n    //   });\r\n    //   this.updateRows(topLeft.rowIdx, newRows);\r\n    // };\r\n\r\n    // setSelection = (args) => {\r\n    //   this.setState({\r\n    //     topLeft: {\r\n    //       rowIdx: args.topLeft.rowIdx,\r\n    //       colIdx: args.topLeft.idx,\r\n    //     },\r\n    //     botRight: {\r\n    //       rowIdx: args.bottomRight.rowIdx,\r\n    //       colIdx: args.bottomRight.idx,\r\n    //     },\r\n    //   });\r\n    // };\r\n\r\n    // eslint-disable-next-line camelcase\r\n    UNSAFE_componentWillReceiveProps(props) {\r\n        this.setState({\r\n            rows: props.rows,\r\n            count: props.count,\r\n            warningStatus: props.status\r\n        });\r\n    }\r\n\r\n    setStateAsync(stateObj) {\r\n        return new Promise((resolve) => {\r\n            this.setState(stateObj, resolve);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Method To render the filter values for filtering rows\r\n     * @param {*} rows is the row data to be considered for filtering\r\n     * @param {*} columnId is the specific columnId for which the row datas are being considered\r\n     */\r\n    getValidFilterValues(rows, columnId) {\r\n        this.setState({ selectedIndexes: [] });\r\n        return rows\r\n            .map((r) => r[columnId])\r\n            .filter((item, i, a) => {\r\n                return i === a.indexOf(item);\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Method To swap the columns\r\n     * @param {*} source is source column\r\n     * @param {*} target is the target column\r\n     */\r\n    // onHeaderDrop = (source, target) => {\r\n    //   const stateCopy = Object.assign({}, this.state);\r\n    //   const columnSourceIndex = this.state.columns.findIndex(\r\n    //     (i) => i.key === source\r\n    //   );\r\n    //   const columnTargetIndex = this.state.columns.findIndex(\r\n    //     (i) => i.key === target\r\n    //   );\r\n\r\n    //   stateCopy.columns.splice(\r\n    //     columnTargetIndex,\r\n    //     0,\r\n    //     stateCopy.columns.splice(columnSourceIndex, 1)[0]\r\n    //   );\r\n\r\n    //   const emptyColumns = Object.assign({}, this.state, {\r\n    //     columns: [],\r\n    //   });\r\n    //   this.setState(emptyColumns);\r\n\r\n    //   const reorderedColumns = Object.assign({}, this.state, {\r\n    //     columns: stateCopy.columns,\r\n    //   });\r\n    //   this.setState(reorderedColumns);\r\n    // };\r\n\r\n    // eslint-disable-next-line react/sort-comp\r\n    handleTableSortSwap = (reorderedSwap) => {\r\n        swapSortList = reorderedSwap;\r\n    };\r\n\r\n    updateTableAsPerRowChooser = (\r\n        inComingColumnsHeaderList,\r\n        pinnedColumnsList\r\n    ) => {\r\n        let existingColumnsHeaderList = this.props.columns;\r\n        existingColumnsHeaderList = existingColumnsHeaderList.filter((item) => {\r\n            return inComingColumnsHeaderList.includes(item.name);\r\n        });\r\n        let rePositionedArray = existingColumnsHeaderList;\r\n        let singleHeaderOneList;\r\n        if (pinnedColumnsList.length > 0) {\r\n            pinnedColumnsList\r\n                .slice(0)\r\n                .reverse()\r\n                .forEach((item, index) => {\r\n                    singleHeaderOneList = existingColumnsHeaderList.filter(\r\n                        (subItem) => item === subItem.name\r\n                    );\r\n                    rePositionedArray = this.arrayMove(\r\n                        existingColumnsHeaderList,\r\n                        existingColumnsHeaderList.indexOf(\r\n                            singleHeaderOneList[0]\r\n                        ),\r\n                        index\r\n                    );\r\n                });\r\n        }\r\n        if (swapList.length > 0) {\r\n            swapList.slice(0).forEach((item, index) => {\r\n                singleHeaderOneList = existingColumnsHeaderList.filter(\r\n                    (subItem) => {\r\n                        return item === subItem.name;\r\n                    }\r\n                );\r\n                rePositionedArray = this.arrayMove(\r\n                    existingColumnsHeaderList,\r\n                    existingColumnsHeaderList.indexOf(singleHeaderOneList[0]),\r\n                    index\r\n                );\r\n            });\r\n        }\r\n\r\n        existingColumnsHeaderList = rePositionedArray;\r\n        /**\r\n       making all the frozen attribute as false for all the columns and then \r\n       setting items of pinnedColumnsList as frozen = true\r\n       */\r\n        existingColumnsHeaderList.forEach((headerItem, index) => {\r\n            if (headerItem.frozen !== undefined && headerItem.frozen === true) {\r\n                existingColumnsHeaderList[index].frozen = false;\r\n            }\r\n            if (pinnedColumnsList.includes(headerItem.name)) {\r\n                existingColumnsHeaderList[index].frozen = true;\r\n            }\r\n        });\r\n\r\n        const toTop = (key, value) => (a, b) =>\r\n            (b[key] === value) - (a[key] === value);\r\n        existingColumnsHeaderList.sort(toTop(\"frozen\", true));\r\n\r\n        this.setState({\r\n            columns: existingColumnsHeaderList\r\n        });\r\n\r\n        const tempList = [];\r\n        existingColumnsHeaderList.forEach((item) => {\r\n            tempList.push(item.name);\r\n        });\r\n\r\n        if (swapList.length > 0) {\r\n            for (let i = 0; i < tempList.length; i++) {\r\n                if (tempList[i] === swapList[i])\r\n                    // eslint-disable-next-line react/no-unused-state\r\n                    this.setState({ pinnedReorder: true });\r\n            }\r\n        }\r\n        this.closeColumnReOrdering();\r\n        swapList = [];\r\n        // eslint-disable-next-line react/no-unused-state\r\n        this.setState({ pinnedReorder: false });\r\n    };\r\n\r\n    /**\r\n     * Method To re-position a particular object in an Array from oldIndex to newIndex\r\n     * @param {*} arr inComing array\r\n     * @param {*} oldIndex initial index\r\n     * @param {*} newIndex final index\r\n     */\r\n    arrayMove = (arr, oldIndex, newIndex) => {\r\n        if (newIndex >= arr.length) {\r\n            let k = newIndex - arr.length + 1;\r\n            while (k--) {\r\n                arr.push(undefined);\r\n            }\r\n        }\r\n        arr.splice(newIndex, 0, arr.splice(oldIndex, 1)[0]);\r\n        return arr;\r\n    };\r\n\r\n    /**\r\n     * Method to render the column Selector Pannel\r\n     */\r\n    columnReorderingPannel = () => {\r\n        this.setState({ selectedIndexes: [] });\r\n        const headerNameList = [];\r\n        const existingPinnedHeadersList = [];\r\n        this.state.columns\r\n            .filter((item) => item.frozen !== undefined && item.frozen === true)\r\n            .map((item) => existingPinnedHeadersList.push(item.name));\r\n        this.state.columns.map((item) => headerNameList.push(item.name));\r\n        this.setState({\r\n            columnReorderingComponent: (\r\n                <ColumnReordering\r\n                    maxLeftPinnedColumn={this.props.maxLeftPinnedColumn}\r\n                    updateTableAsPerRowChooser={this.updateTableAsPerRowChooser}\r\n                    headerKeys={headerNameList}\r\n                    closeColumnReOrdering={this.closeColumnReOrdering}\r\n                    existingPinnedHeadersList={existingPinnedHeadersList}\r\n                    handleheaderNameList={this.handleheaderNameList}\r\n                    {...this.props}\r\n                />\r\n            )\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Method to stop the render the column Selector Pannel\r\n     */\r\n    closeColumnReOrdering = () => {\r\n        this.setState({\r\n            columnReorderingComponent: null\r\n        });\r\n    };\r\n\r\n    handleSearchValue = (value) => {\r\n        this.setState({ searchValue: value });\r\n    };\r\n\r\n    clearSearchValue = () => {\r\n        this.setState({ searchValue: \"\" });\r\n        this.setState({ filteringRows: this.state.filteringRows });\r\n    };\r\n\r\n    sortingPanel = () => {\r\n        this.setState({ selectedIndexes: [] });\r\n        const columnField = [];\r\n        this.state.columns.map((item) => columnField.push(item.name));\r\n        this.setState({\r\n            sortingPanelComponent: (\r\n                <Sorting\r\n                    setTableAsPerSortingParams={(args) =>\r\n                        this.setTableAsPerSortingParams(args)\r\n                    }\r\n                    sortingParamsObjectList={this.state.sortingParamsObjectList}\r\n                    handleTableSortSwap={this.handleTableSortSwap}\r\n                    clearAllSortingParams={this.clearAllSortingParams}\r\n                    columnFieldValue={columnField}\r\n                    closeSorting={this.closeSorting}\r\n                />\r\n            )\r\n        });\r\n    };\r\n\r\n    closeSorting = () => {\r\n        this.setState({\r\n            sortingPanelComponent: null,\r\n            sortingOrderSwapList: []\r\n        });\r\n        swapSortList = [];\r\n    };\r\n\r\n    clearAllSortingParams = () => {\r\n        const hasSingleSortkey =\r\n            this.state.sortDirection !== \"NONE\" && this.state.sortColumn !== \"\";\r\n\r\n        let dataRows = this.getFilterResult([...this.state.dataSet]);\r\n        if (this.state.searchValue !== \"\") {\r\n            const searchKey = String(this.state.searchValue).toLowerCase();\r\n            dataRows = dataRows.filter((item) => {\r\n                return Object.values(item)\r\n                    .toString()\r\n                    .toLowerCase()\r\n                    .includes(searchKey);\r\n            });\r\n        }\r\n        if (hasSingleSortkey) {\r\n            dataRows = this.getSingleSortResult(dataRows);\r\n        }\r\n        this.setState({\r\n            rows: dataRows.slice(\r\n                0,\r\n                this.state.pageIndex * this.state.pageRowCount\r\n            ),\r\n            subDataSet: dataRows\r\n        });\r\n    };\r\n\r\n    // Export Data Logic\r\n    exportColumnData = () => {\r\n        let exportData = this.state.dataSet;\r\n        if (this.isSubset()) {\r\n            exportData = this.state.subDataSet;\r\n        }\r\n        this.setState({ selectedIndexes: [] });\r\n        this.setState({\r\n            exportComponent: (\r\n                <ExportData\r\n                    rows={exportData}\r\n                    columnsList={this.state.columns}\r\n                    closeExport={this.closeExport}\r\n                />\r\n            )\r\n        });\r\n    };\r\n\r\n    closeExport = () => {\r\n        this.setState({\r\n            exportComponent: null\r\n        });\r\n    };\r\n\r\n    setTableAsPerSortingParams = (tableSortList) => {\r\n        const hasFilter = Object.keys(this.state.junk).length > 0;\r\n        const hasSearchKey =\r\n            String(this.state.searchValue).toLowerCase() !== \"\";\r\n        const hasSingleSortkey =\r\n            this.state.sortDirection !== \"NONE\" && this.state.sortColumn !== \"\";\r\n        let existingRows = [...this.state.dataSet];\r\n        if (hasFilter || hasSearchKey || hasSingleSortkey) {\r\n            existingRows = [...this.state.subDataSet];\r\n        }\r\n\r\n        let sortingOrderNameList = [];\r\n        tableSortList.forEach((item) => {\r\n            let nameOfItem = \"\";\r\n            Object.keys(this.state.rows[0]).forEach((rowItem) => {\r\n                if (\r\n                    rowItem.toLowerCase() ===\r\n                    this.toCamelCase(item.sortBy).toLowerCase()\r\n                ) {\r\n                    nameOfItem = rowItem;\r\n                }\r\n            });\r\n            const typeOfItem = this.state.rows[0][item.sortBy === nameOfItem];\r\n            if (typeof typeOfItem === \"number\") {\r\n                sortingOrderNameList.push({\r\n                    name: nameOfItem,\r\n                    primer: parseInt,\r\n                    reverse: item.order !== \"Ascending\"\r\n                });\r\n            } else {\r\n                sortingOrderNameList.push({\r\n                    name: nameOfItem,\r\n                    reverse: item.order !== \"Ascending\"\r\n                });\r\n            }\r\n        });\r\n\r\n        if (swapSortList.length > 0) {\r\n            const existingSortingOrderSwapList = this.state\r\n                .sortingOrderSwapList;\r\n            swapSortList.forEach((item, index) => {\r\n                const stringOfItemIndex = `${item}${index}`;\r\n                if (\r\n                    item !== index &&\r\n                    !existingSortingOrderSwapList.includes(\r\n                        stringOfItemIndex.split(\"\").reverse().join(\"\")\r\n                    )\r\n                ) {\r\n                    existingSortingOrderSwapList.push(stringOfItemIndex);\r\n                    sortingOrderNameList = this.arrayMove(\r\n                        sortingOrderNameList,\r\n                        item,\r\n                        index\r\n                    );\r\n                    // eslint-disable-next-line no-param-reassign\r\n                    tableSortList = this.arrayMove(tableSortList, item, index);\r\n                }\r\n                this.setState({\r\n                    sortingOrderSwapList: existingSortingOrderSwapList\r\n                });\r\n            });\r\n        }\r\n\r\n        // eslint-disable-next-line no-use-before-define\r\n        existingRows.sort(sortBy(...sortingOrderNameList));\r\n        this.setState({\r\n            rows: existingRows.slice(\r\n                0,\r\n                this.state.pageIndex * this.state.pageRowCount\r\n            ),\r\n            subDataSet: existingRows,\r\n            sortingParamsObjectList: tableSortList\r\n        });\r\n\r\n        this.closeSorting();\r\n    };\r\n\r\n    // Group sort - while updating conditions like search, filter or sorting; copy of setTableAsPerSortingParams.\r\n    groupSort = (tableSortList, existingRows) => {\r\n        let sortingOrderNameList = [];\r\n        tableSortList.forEach((item) => {\r\n            let nameOfItem = \"\";\r\n            Object.keys(this.state.rows[0]).forEach((rowItem) => {\r\n                if (\r\n                    rowItem.toLowerCase() ===\r\n                    this.toCamelCase(item.sortBy).toLowerCase()\r\n                ) {\r\n                    nameOfItem = rowItem;\r\n                }\r\n            });\r\n            const typeOfItem = this.state.rows[0][item.sortBy === nameOfItem];\r\n            if (typeof typeOfItem === \"number\") {\r\n                sortingOrderNameList.push({\r\n                    name: nameOfItem,\r\n                    primer: parseInt,\r\n                    reverse: item.order !== \"Ascending\"\r\n                });\r\n            } else {\r\n                sortingOrderNameList.push({\r\n                    name: nameOfItem,\r\n                    reverse: item.order !== \"Ascending\"\r\n                });\r\n            }\r\n        });\r\n\r\n        if (swapSortList.length > 0) {\r\n            const existingSortingOrderSwapList = this.state\r\n                .sortingOrderSwapList;\r\n            swapSortList.forEach((item, index) => {\r\n                const stringOfItemIndex = `${item}${index}`;\r\n                if (\r\n                    item !== index &&\r\n                    !existingSortingOrderSwapList.includes(\r\n                        stringOfItemIndex.split(\"\").reverse().join(\"\")\r\n                    )\r\n                ) {\r\n                    existingSortingOrderSwapList.push(stringOfItemIndex);\r\n                    sortingOrderNameList = this.arrayMove(\r\n                        sortingOrderNameList,\r\n                        item,\r\n                        index\r\n                    );\r\n                    // eslint-disable-next-line no-param-reassign\r\n                    tableSortList = this.arrayMove(tableSortList, item, index);\r\n                }\r\n                this.setState({\r\n                    sortingOrderSwapList: existingSortingOrderSwapList\r\n                });\r\n            });\r\n        }\r\n\r\n        // eslint-disable-next-line no-use-before-define\r\n        return existingRows.sort(sortBy(...sortingOrderNameList));\r\n    };\r\n\r\n    toCamelCase = (str) => {\r\n        return str\r\n            .replace(/\\s(.)/g, function ($1) {\r\n                return $1.toUpperCase();\r\n            })\r\n            .replace(/\\s/g, \"\")\r\n            .replace(/^(.)/, function ($1) {\r\n                return $1.toLowerCase();\r\n            });\r\n    };\r\n\r\n    // eslint-disable-next-line react/sort-comp\r\n    componentDidUpdate() {\r\n        // Fix for column re-order and pin left issue (functionality was working only after doing a window re-size)\r\n        const resizeEvent = document.createEvent(\"HTMLEvents\");\r\n        resizeEvent.initEvent(\"resize\", true, false);\r\n        window.dispatchEvent(resizeEvent);\r\n    }\r\n\r\n    getSearchRecords(e) {\r\n        const searchKey = String(e.target.value).toLowerCase();\r\n        const hasFilter = Object.keys(this.state.junk).length > 0;\r\n        const hasSingleSortkey =\r\n            this.state.sortDirection !== \"NONE\" && this.state.sortColumn !== \"\";\r\n        const hasGropSortKeys =\r\n            this.state.sortingParamsObjectList &&\r\n            this.state.sortingParamsObjectList.length > 0;\r\n        let rowsToSearch = [];\r\n        // Remove search key\r\n        if (this.state.searchValue.startsWith(searchKey) || searchKey === \"\") {\r\n            rowsToSearch = this.getFilterResult([...this.state.dataSet]);\r\n            if (hasSingleSortkey) {\r\n                rowsToSearch = this.getSingleSortResult(rowsToSearch);\r\n            }\r\n            if (hasGropSortKeys) {\r\n                rowsToSearch = this.groupSort(\r\n                    this.state.sortingParamsObjectList,\r\n                    rowsToSearch\r\n                );\r\n            }\r\n            return rowsToSearch;\r\n        }\r\n        // Set search key\r\n\r\n        if (\r\n            hasFilter ||\r\n            hasSingleSortkey ||\r\n            searchKey.length > 1 ||\r\n            hasGropSortKeys\r\n        )\r\n            return this.state.subDataSet;\r\n        return this.state.dataSet;\r\n    }\r\n\r\n    /**\r\n     * Method To dynamically swap the column from column chooser\r\n     * @param {*} reordered is the swapped array of columns\r\n     */\r\n    handleheaderNameList = (reordered) => {\r\n        swapList = reordered;\r\n    };\r\n\r\n    getSingleSortResult = (data) => {\r\n        if (\r\n            this.state.sortDirection !== \"NONE\" &&\r\n            this.state.sortColumn !== \"\"\r\n        ) {\r\n            // eslint-disable-next-line prefer-destructuring\r\n            const sortColumn = this.state.sortColumn;\r\n            // eslint-disable-next-line prefer-destructuring\r\n            const sortDirection = this.state.sortDirection;\r\n            this.setState({ selectedIndexes: [] });\r\n            const comparer = (a, b) => {\r\n                if (sortDirection === \"ASC\") {\r\n                    return a[sortColumn] > b[sortColumn] ? 1 : -1;\r\n                }\r\n                if (sortDirection === \"DESC\") {\r\n                    return a[sortColumn] < b[sortColumn] ? 1 : -1;\r\n                }\r\n                return 0;\r\n            };\r\n            return sortDirection === \"NONE\" ? data : [...data].sort(comparer);\r\n        }\r\n        return data;\r\n    };\r\n\r\n    /**\r\n     * Method To sort the rows for a particular column\r\n     * @param {*} data is the row datas to be considered for sorting\r\n     * @param {*} sortColumn is the specific column for which the row sort is being triggered\r\n     * @param {*} sortDirection is the type of sort\r\n     */\r\n    sortRows = (data, sortColumn, sortDirection) => {\r\n        this.setState({ selectedIndexes: [] });\r\n        // eslint-disable-next-line consistent-return\r\n        const comparer = (a, b) => {\r\n            if (sortDirection === \"ASC\") {\r\n                return a[sortColumn] > b[sortColumn] ? 1 : -1;\r\n            }\r\n            if (sortDirection === \"DESC\") {\r\n                return a[sortColumn] < b[sortColumn] ? 1 : -1;\r\n            }\r\n        };\r\n        const hasFilter = Object.keys(this.state.junk).length > 0;\r\n        const hasSearchKey =\r\n            String(this.state.searchValue).toLowerCase() !== \"\";\r\n        const hasGropSortKeys =\r\n            this.state.sortingParamsObjectList &&\r\n            this.state.sortingParamsObjectList.length > 0;\r\n        let dtRows = [];\r\n        if (hasFilter || hasSearchKey || hasGropSortKeys) {\r\n            dtRows = this.state.subDataSet;\r\n        } else {\r\n            dtRows = this.state.dataSet;\r\n        }\r\n        const result = [...dtRows].sort(comparer);\r\n        this.setState({\r\n            rows: result.slice(\r\n                0,\r\n                this.state.pageIndex * this.state.pageRowCount\r\n            ),\r\n            subDataSet: result,\r\n            selectedIndexes: [],\r\n            sortColumn: sortDirection === \"NONE\" ? \"\" : sortColumn,\r\n            sortDirection\r\n        });\r\n        return sortDirection === \"NONE\" ? data : this.state.rows;\r\n    };\r\n\r\n    getSlicedRows = async (filters, rowsToSplit, firstResult) => {\r\n        let data = [];\r\n        if (rowsToSplit.length > 0) {\r\n            const chunks = [];\r\n            while (rowsToSplit.length) {\r\n                chunks.push(rowsToSplit.splice(0, 500));\r\n            }\r\n            let index = 0;\r\n            chunks.forEach(async (arr) => {\r\n                this.getRowsAsync(arr, filters).then(async (dt) => {\r\n                    index++;\r\n                    data = [...data, ...dt];\r\n                    if (index === chunks.length) {\r\n                        let dtSet = [...firstResult, ...data];\r\n                        if (this.state.searchValue !== \"\") {\r\n                            const searchKey = String(\r\n                                this.state.searchValue\r\n                            ).toLowerCase();\r\n                            dtSet = dtSet.filter((item) => {\r\n                                return Object.values(item)\r\n                                    .toString()\r\n                                    .toLowerCase()\r\n                                    .includes(searchKey);\r\n                            });\r\n                        }\r\n\r\n                        dtSet = this.getSingleSortResult(dtSet);\r\n                        if (\r\n                            this.state.sortingParamsObjectList &&\r\n                            this.state.sortingParamsObjectList.length > 0\r\n                        ) {\r\n                            dtSet = this.groupSort(\r\n                                this.state.sortingParamsObjectList,\r\n                                dtSet\r\n                            );\r\n                        }\r\n                        const rw = dtSet.slice(\r\n                            0,\r\n                            this.state.pageIndex * this.state.pageRowCount\r\n                        );\r\n                        await this.setStateAsync({\r\n                            subDataSet: dtSet,\r\n                            rows: rw,\r\n                            tempRows: rw,\r\n                            count: rw.length\r\n                        });\r\n                        if (dtSet.length === 0) {\r\n                            this.handleWarningStatus();\r\n                        } else {\r\n                            this.closeWarningStatus(rw);\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n        }\r\n    };\r\n\r\n    getRowsAsync = async (rows, filters) => {\r\n        let filterVal = { ...filters };\r\n        if (Object.keys(filters).length <= 0) {\r\n            filterVal = {};\r\n        }\r\n        selectors.getRows({ rows: [], filters: {} });\r\n        // eslint-disable-next-line object-shorthand\r\n        return selectors.getRows({ rows: rows, filters: filterVal });\r\n    };\r\n\r\n    getrows = (rows, filters) => {\r\n        let filterVal = { ...filters };\r\n        if (Object.keys(filters).length <= 0) {\r\n            filterVal = {};\r\n        }\r\n        selectors.getRows({ rows: [], filters: {} });\r\n        // eslint-disable-next-line object-shorthand\r\n        return selectors.getRows({ rows: rows, filters: filterVal });\r\n    };\r\n\r\n    /**\r\n     * Method To bulk/individual deselect of rows\r\n     * @param {*} rows is the deselected row\r\n     */\r\n    onRowsDeselected = (rows) => {\r\n        const rowIndexes = rows.map((r) => r.rowIdx);\r\n        this.setState({\r\n            selectedIndexes: this.state.selectedIndexes.filter(\r\n                (i) => rowIndexes.indexOf(i) === -1\r\n            )\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Method To update the cell/cells with the edited values\r\n     * @param {*} fromRow is the row from which this edit is performed\r\n     * @param {*} toRow is the row upto which this edit is performed\r\n     * @param {*} updated is the value of change\r\n     * @param {*} action is type of edit action performed\r\n     */\r\n    onGridRowsUpdated = ({ fromRow, toRow, updated, action }) => {\r\n        let columnName = \"\";\r\n        const filter = this.formulaAppliedCols.filter((item) => {\r\n            if (updated[item.key] !== null && updated[item.key] !== undefined) {\r\n                columnName = item.key;\r\n                return true;\r\n            }\r\n            return false;\r\n        });\r\n\r\n        if (filter.length > 0) {\r\n            // eslint-disable-next-line no-param-reassign\r\n            updated = applyFormula(updated, columnName);\r\n        }\r\n\r\n        if (action !== \"COPY_PASTE\") {\r\n            this.setState((state) => {\r\n                const rows = state.rows.slice();\r\n                for (let i = fromRow; i <= toRow; i++) {\r\n                    rows[i] = {\r\n                        ...rows[i],\r\n                        ...updated\r\n                    };\r\n                }\r\n\r\n                return {\r\n                    rows\r\n                };\r\n            });\r\n            this.setState((state) => {\r\n                const dataSet = state.dataSet.slice();\r\n                for (let i = fromRow; i <= toRow; i++) {\r\n                    dataSet[i] = {\r\n                        ...dataSet[i],\r\n                        ...updated\r\n                    };\r\n                }\r\n\r\n                return {\r\n                    dataSet\r\n                };\r\n            });\r\n\r\n            this.setState((state) => {\r\n                const filteringRows = state.filteringRows.slice();\r\n                for (let i = fromRow; i <= toRow; i++) {\r\n                    filteringRows[i] = {\r\n                        ...filteringRows[i],\r\n                        ...updated\r\n                    };\r\n                }\r\n\r\n                return {\r\n                    filteringRows\r\n                };\r\n            });\r\n            this.setState((state) => {\r\n                const tempRows = state.tempRows.slice();\r\n                for (let i = fromRow; i <= toRow; i++) {\r\n                    tempRows[i] = {\r\n                        ...tempRows[i],\r\n                        ...updated\r\n                    };\r\n                }\r\n\r\n                return {\r\n                    tempRows\r\n                };\r\n            });\r\n        }\r\n        if (this.props.updateCellData) {\r\n            this.props.updateCellData(\r\n                this.state.tempRows[fromRow],\r\n                this.state.tempRows[toRow],\r\n                updated,\r\n                action\r\n            );\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Method To bulk/individual select of rows\r\n     * @param {*} rows is the selected row\r\n     */\r\n    onRowsSelected = (rows) => {\r\n        this.setState({\r\n            selectedIndexes: this.state.selectedIndexes.concat(\r\n                rows.map((r) => r.rowIdx)\r\n            )\r\n        });\r\n        if (this.props.selectBulkData) {\r\n            this.props.selectBulkData(rows);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Method To filter the multiple columns\r\n     * @param {*} value is the  incoming filtering event\r\n     */\r\n    handleFilterChange = async (value) => {\r\n        const { junk } = this.state;\r\n        if (!(value.filterTerm == null) && !(value.filterTerm.length <= 0)) {\r\n            junk[value.column.key] = value;\r\n        } else {\r\n            delete junk[value.column.key];\r\n        }\r\n        this.setState({ junk });\r\n        const hasFilter = Object.keys(junk).length > 0;\r\n        const firstPage = this.state.dataSet.slice(0, this.state.pageRowCount);\r\n        let data = this.getrows(firstPage, this.state.junk);\r\n        await this.setStateAsync({\r\n            rows: data,\r\n            tempRows: data,\r\n            count: data.length,\r\n            subDataSet: hasFilter ? data : [],\r\n            pageIndex: hasFilter ? this.state.pageIndex : 1\r\n        });\r\n        if (hasFilter) {\r\n            const rowsRemaining = this.state.dataSet.slice(\r\n                this.state.pageRowCount,\r\n                this.state.dataSet.length\r\n            );\r\n            this.getSlicedRows(this.state.junk, rowsRemaining, data);\r\n        } else {\r\n            let rowsRemaining = this.state.dataSet; // .slice(this.state.pageRowCount, this.state.dataSet.length);\r\n            if (this.state.searchValue !== \"\") {\r\n                const searchKey = String(this.state.searchValue).toLowerCase();\r\n                rowsRemaining = rowsRemaining.filter((item) => {\r\n                    return Object.values(item)\r\n                        .toString()\r\n                        .toLowerCase()\r\n                        .includes(searchKey);\r\n                });\r\n            }\r\n            rowsRemaining = this.getSingleSortResult(rowsRemaining);\r\n\r\n            if (\r\n                this.state.sortingParamsObjectList &&\r\n                this.state.sortingParamsObjectList.length > 0\r\n            ) {\r\n                rowsRemaining = this.groupSort(\r\n                    this.state.sortingParamsObjectList,\r\n                    rowsRemaining\r\n                );\r\n            }\r\n\r\n            const rw = rowsRemaining.slice(\r\n                0,\r\n                this.state.pageIndex * this.state.pageRowCount\r\n            );\r\n            await this.setStateAsync({\r\n                subDataSet: rowsRemaining,\r\n                rows: rw,\r\n                tempRows: rw,\r\n                count: rw.length\r\n            });\r\n            data = rw;\r\n        }\r\n        if (data.length === 0) {\r\n            this.handleWarningStatus();\r\n        } else {\r\n            this.closeWarningStatus(data);\r\n        }\r\n    };\r\n\r\n    isAtBottom = (event) => {\r\n        const { target } = event; // as HTMLDivElement;\r\n        const isbtm =\r\n            target.clientHeight + target.scrollTop >= target.scrollHeight - 10;\r\n        return isbtm;\r\n    };\r\n\r\n    isSubset() {\r\n        if (\r\n            Object.keys(this.state.junk).length > 0 ||\r\n            this.state.sortDirection !== \"NONE\" ||\r\n            this.state.searchValue !== \"\" ||\r\n            (this.state.sortingParamsObjectList &&\r\n                this.state.sortingParamsObjectList.length > 0)\r\n        ) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    loadMoreRows = (from, newRowsCount) => {\r\n        return new Promise((resolve) => {\r\n            // const hasFilter = Object.keys(this.state.junk).length > 0;\r\n            let to = from + newRowsCount;\r\n            if (this.isSubset() && this.state.subDataSet.length > 0) {\r\n                to =\r\n                    to < this.state.subDataSet.length\r\n                        ? to\r\n                        : this.state.subDataSet.length;\r\n                resolve(this.state.subDataSet.slice(from, to));\r\n            } else {\r\n                resolve(this.state.dataSet.slice(from, to));\r\n            }\r\n        });\r\n    };\r\n\r\n    handleScroll = async (event) => {\r\n        if (!this.isAtBottom(event)) return;\r\n        const newRows = await this.loadMoreRows(\r\n            this.state.pageIndex * this.state.pageRowCount,\r\n            this.state.pageRowCount\r\n        );\r\n        if (newRows && newRows.length > 0) {\r\n            let length = 0;\r\n            this.setState((prev) => {\r\n                length = prev.rows.length + newRows.length;\r\n            });\r\n            this.setState({\r\n                rows: [...this.state.rows, ...newRows],\r\n                count: length,\r\n                pageIndex: this.state.pageIndex + 1\r\n            });\r\n        }\r\n    };\r\n\r\n    globalSearchLogic = (e, updatedRows) => {\r\n        const searchKey = String(e.target.value).toLowerCase();\r\n        const filteredRows = updatedRows.filter((item) => {\r\n            return Object.values(item)\r\n                .toString()\r\n                .toLowerCase()\r\n                .includes(searchKey);\r\n        });\r\n        if (!filteredRows.length) {\r\n            this.setState({ warningStatus: \"invalid\", rows: [], count: 0 });\r\n        } else {\r\n            const rowSlice = filteredRows.slice(\r\n                0,\r\n                this.state.pageIndex * this.state.pageRowCount\r\n            );\r\n            this.setState({\r\n                warningStatus: \"\",\r\n                rows: rowSlice,\r\n                subDataSet: filteredRows,\r\n                count: rowSlice.length\r\n            });\r\n        }\r\n    };\r\n\r\n    handleWarningStatus = () => {\r\n        this.setState({ warningStatus: \"invalid\" });\r\n    };\r\n\r\n    closeWarningStatus = (val) => {\r\n        let rVal = val;\r\n        if (!rVal) {\r\n            const hasSingleSortkey =\r\n                this.state.sortDirection !== \"NONE\" &&\r\n                this.state.sortColumn !== \"\";\r\n            const hasGropSortKeys =\r\n                this.state.sortingParamsObjectList &&\r\n                this.state.sortingParamsObjectList.length > 0;\r\n\r\n            let dataRows = this.getFilterResult([...this.state.dataSet]);\r\n            if (hasSingleSortkey) {\r\n                dataRows = this.getSingleSortResult(dataRows);\r\n            }\r\n            if (hasGropSortKeys) {\r\n                dataRows = this.groupSort(\r\n                    this.state.sortingParamsObjectList,\r\n                    dataRows\r\n                );\r\n            }\r\n            rVal = dataRows.slice(\r\n                0,\r\n                this.state.pageIndex * this.state.pageRowCount\r\n            );\r\n        }\r\n        this.setState({ warningStatus: \"\", rows: rVal, count: rVal.length });\r\n    };\r\n\r\n    save = () => {\r\n        this.props.saveRows(this.state.dataSet);\r\n    };\r\n\r\n    clearAllFilters = () => {\r\n        const hasSingleSortkey =\r\n            this.state.sortDirection !== \"NONE\" && this.state.sortColumn !== \"\";\r\n        const hasGropSortKeys =\r\n            this.state.sortingParamsObjectList &&\r\n            this.state.sortingParamsObjectList.length > 0;\r\n\r\n        let dtSet = this.getSearchResult(this.state.dataSet);\r\n        if (hasSingleSortkey) {\r\n            dtSet = this.getSingleSortResult(dtSet);\r\n        }\r\n        if (hasGropSortKeys) {\r\n            dtSet = this.groupSort(this.state.sortingParamsObjectList, dtSet);\r\n        }\r\n        const rVal = dtSet.slice(\r\n            0,\r\n            this.state.pageIndex * this.state.pageRowCount\r\n        );\r\n        this.setState({\r\n            rows: rVal,\r\n            count: rVal.length,\r\n            subDataSet: dtSet\r\n        });\r\n    };\r\n    getSearchResult = (data) => {\r\n        let dtSet = data;\r\n        const searchKey = String(this.state.searchValue).toLowerCase();\r\n        if (searchKey !== \"\") {\r\n            dtSet = dtSet.filter((item) => {\r\n                return Object.values(item)\r\n                    .toString()\r\n                    .toLowerCase()\r\n                    .includes(searchKey);\r\n            });\r\n        }\r\n        return dtSet;\r\n    };\r\n    getFilterResult = (data) => {\r\n        let dataRows = [];\r\n        if (Object.keys(this.state.junk).length > 0) {\r\n            const rowsToSplit = [...data];\r\n            const chunks = [];\r\n            while (rowsToSplit.length) {\r\n                chunks.push(rowsToSplit.splice(0, 500));\r\n            }\r\n            chunks.forEach((arr) => {\r\n                const dt = this.getrows(arr, this.state.junk);\r\n                dataRows = [...dataRows, ...dt];\r\n            });\r\n        } else {\r\n            dataRows = [...data];\r\n        }\r\n        return dataRows;\r\n    };\r\n    render() {\r\n        return (\r\n            <div onScroll={this.handleScroll}>\r\n                <div className=\"parentDiv\">\r\n                    <div className=\"totalCount\">\r\n                        Showing <strong> {this.state.count} </strong> records\r\n                    </div>\r\n                    <div className=\"globalSearch\">\r\n                        <i className=\"fa fa-search\" />\r\n                        <FormControl\r\n                            className=\"globalSeachInput\"\r\n                            type=\"text\"\r\n                            placeholder=\"Search\"\r\n                            onChange={(e) => {\r\n                                this.handleSearchValue(e.target.value);\r\n                                const srchRows = this.getSearchRecords(e);\r\n                                this.globalSearchLogic(e, srchRows);\r\n                            }}\r\n                            value={this.state.searchValue}\r\n                        />\r\n                    </div>\r\n                    <div className=\"filterIcons\" onClick={this.save}>\r\n                        <FontAwesomeIcon title=\"Group Sort\" icon={faSave} />\r\n                    </div>\r\n                    <div className=\"filterIcons\" onClick={this.sortingPanel}>\r\n                        <FontAwesomeIcon\r\n                            title=\"Group Sort\"\r\n                            icon={faSortAmountDown}\r\n                        />\r\n                        <FontAwesomeIcon\r\n                            icon={faSortDown}\r\n                            className=\"filterArrow\"\r\n                        />\r\n                    </div>\r\n                    {this.state.sortingPanelComponent}\r\n                    <div\r\n                        className=\"filterIcons\"\r\n                        onClick={this.columnReorderingPannel}\r\n                    >\r\n                        <FontAwesomeIcon\r\n                            title=\"Column Chooser\"\r\n                            icon={faColumns}\r\n                        />\r\n                        <FontAwesomeIcon\r\n                            icon={faSortDown}\r\n                            className=\"filterArrow\"\r\n                        />\r\n                    </div>\r\n                    {this.state.columnReorderingComponent}\r\n                    <div className=\"filterIcons\">\r\n                        <FontAwesomeIcon\r\n                            title=\"Export\"\r\n                            icon={faShareAlt}\r\n                            onClick={this.exportColumnData}\r\n                        />\r\n                    </div>\r\n                    {this.state.exportComponent}\r\n                </div>\r\n                <ErrorMessage\r\n                    className=\"errorDiv\"\r\n                    status={this.state.warningStatus}\r\n                    closeWarningStatus={() => {\r\n                        this.closeWarningStatus();\r\n                    }}\r\n                    clearSearchValue={this.clearSearchValue}\r\n                />\r\n                <ExtDataGrid\r\n                    toolbar={<Toolbar enableFilter />}\r\n                    getValidFilterValues={(columnKey) =>\r\n                        this.getValidFilterValues(\r\n                            this.state.filteringRows,\r\n                            columnKey\r\n                        )\r\n                    }\r\n                    minHeight={this.state.height}\r\n                    columns={this.state.columns}\r\n                    rowGetter={(i) => this.state.rows[i]}\r\n                    rowsCount={this.state.rows.length}\r\n                    onGridRowsUpdated={this.onGridRowsUpdated}\r\n                    enableCellSelect\r\n                    onClearFilters={() => {\r\n                        this.setState({ junk: {} });\r\n                        this.clearAllFilters();\r\n                    }}\r\n                    onColumnResize={(idx, width) =>\r\n                        console.log(\r\n                            `Column ${idx} has been resized to ${width}`\r\n                        )\r\n                    }\r\n                    onAddFilter={(filter) => this.handleFilterChange(filter)}\r\n                    rowSelection={{\r\n                        showCheckbox: true,\r\n                        enableShiftSelect: true,\r\n                        onRowsSelected: this.onRowsSelected,\r\n                        onRowsDeselected: this.onRowsDeselected,\r\n                        selectBy: {\r\n                            indexes: this.state.selectedIndexes\r\n                        }\r\n                    }}\r\n                    onGridSort={(sortColumn, sortDirection) =>\r\n                        this.sortRows(\r\n                            this.state.filteringRows,\r\n                            sortColumn,\r\n                            sortDirection\r\n                        )\r\n                    }\r\n                    globalSearch={this.globalSearchLogic}\r\n                    handleWarningStatus={this.handleWarningStatus}\r\n                    closeWarningStatus={this.closeWarningStatus}\r\n                    // cellRangeSelection={{\r\n                    //   onComplete: this.setSelection,\r\n                    // }}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n/**\r\n * Global Method To Sort The Grid.\r\n */\r\nlet sortBy;\r\n(function () {\r\n    // utility functions\r\n    const defaultCmp = function (a, b) {\r\n        if (a === b) return 0;\r\n        return a < b ? -1 : 1;\r\n    };\r\n    const getCmpFunc = function (primer, reverse) {\r\n        let cmp = defaultCmp;\r\n        if (primer) {\r\n            cmp = function (a, b) {\r\n                return defaultCmp(primer(a), primer(b));\r\n            };\r\n        }\r\n        if (reverse) {\r\n            return function (a, b) {\r\n                return -1 * cmp(a, b);\r\n            };\r\n        }\r\n        return cmp;\r\n    };\r\n\r\n    // actual implementation\r\n    sortBy = function () {\r\n        const fields = [];\r\n        const nFields = arguments.length;\r\n        let field;\r\n        let name;\r\n        let cmp;\r\n\r\n        // preprocess sorting options\r\n        for (let i = 0; i < nFields; i++) {\r\n            // eslint-disable-next-line prefer-rest-params\r\n            field = arguments[i];\r\n            if (typeof field === \"string\") {\r\n                name = field;\r\n                cmp = defaultCmp;\r\n            } else {\r\n                name = field.name;\r\n                cmp = getCmpFunc(field.primer, field.reverse);\r\n            }\r\n            fields.push({\r\n                name,\r\n                cmp\r\n            });\r\n        }\r\n\r\n        return function (A, B) {\r\n            let result;\r\n            for (let i = 0, l = nFields; i < l; i++) {\r\n                result = 0;\r\n                field = fields[i];\r\n                name = field.name;\r\n                cmp = field.cmp;\r\n\r\n                result = cmp(A[name], B[name]);\r\n                if (result !== 0) break;\r\n            }\r\n            return result;\r\n        };\r\n    };\r\n})();\r\n\r\nSpreadsheet.propTypes = {\r\n    airportCodes: PropTypes.any,\r\n    rows: PropTypes.any,\r\n    columns: PropTypes.any,\r\n    status: PropTypes.any,\r\n    count: PropTypes.any,\r\n    updateCellData: PropTypes.any,\r\n    selectBulkData: PropTypes.any,\r\n    pinnedReorder: PropTypes.any,\r\n    maxLeftPinnedColumn: PropTypes.any,\r\n    globalSearchLogic: PropTypes.any,\r\n    closeWarningStatus: PropTypes.any,\r\n    dataSet: PropTypes.any,\r\n    pageSize: PropTypes.any\r\n};\r\n\r\nexport default Spreadsheet;\r\n"],"names":["ExtDataGrid","componentDidMount","_mounted","dataGridComponent","document","getElementsByClassName","window","addEventListener","metricsUpdated","componentWillUnmount","removeEventListener","ReactDataGrid","applyFormula","obj","columnName","val","item","toString","charAt","operation","split","value","substring","length","reduce","a","b","Number","Math","min","apply","max","console","log","DatePicker","props","state","Date","input","getInputNode","bind","getValue","onValueChanged","ev","setState","target","updated","date","dateTimeFormat","Intl","DateTimeFormat","year","month","day","formatToParts","column","key","render","React","ref","Component","propTypes","PropTypes","string","SEARCH_NOT_FOUNT_ERROR","ErrorMessage","useState","status","setStatus","useEffect","FontAwesomeIcon","faTimes","closeWarningStatus","clearSearchValue","ItemTypes","COLUMN","style","cursor","ColumnItem","id","text","moveColumn","findColumn","originalIndex","index","useDrag","type","collect","monitor","isDragging","end","dropResult","getItem","droppedId","didDrop","drag","useDrop","accept","canDrop","hover","draggedId","overIndex","drop","opacity","node","any","ColumnsList","columnsArray","columns","setColumns","filter","c","indexOf","atIndex","update","$splice","values","temp","forEach","push","handleReorderList","Fragment","display","flexWrap","map","ColumnReordering","resetColumnReorderList","columnReorderEntityList","name","leftPinnedColumList","isAllSelected","selectAllToColumnReOrderList","existingColumnReorderEntityList","isExistingAllSelect","addToColumnReorderEntityList","typeToBeAdded","existingLeftPinnedList","includes","indexOfInsertion","columnSelectList","findIndex","splice","filterColumnReorderList","e","searchKey","String","toLowerCase","existingList","filtererdColumnReorderList","createColumnsArrayFromProps","colsList","faAlignJustify","maxLeftPinnedColumn","reArrangeLeftPinnedColumn","columHeaderName","unshift","subItem","reordered","handleheaderNameList","headerKeys","existingPinnedHeadersList","setWrapperRef","handleClickOutside","wrapperRef","event","contains","closeColumnReOrdering","color","DndProvider","TouchBackend","enableMouseEvents","updateTableAsPerRowChooser","CARD","Card","moveCard","findCard","SortingList","sortsArray","cards","setCards","card","handleReorderListOfSort","App","add","rowList","existingSortingOrderList","sortingOrderList","sortBy","columnFieldValue","order","sortOn","copy","i","JSON","parse","stringify","clearAll","errorMessage","clearAllSortingParams","remove","rowsValue","row","captureSortingFeildValues","faCopy","faTrash","sortingKey","undefined","updateTableAsPerSortCondition","unique","Set","showError","some","element","size","setTableAsPerSortingParams","reOrderedIndexList","handleTableSortSwap","sortingParamsObjectList","closeSorting","faPlus","downLaodFileType","ExportData","resetColumnExportList","columnEntityList","selectAllToColumnList","columnsList","addToColumnEntityList","existingColumnEntityList","selectDownLoadType","checked","exportRowData","columnVlaueList","rows","keys","Object","getOwnPropertyNames","filteredColumnVal","filteredRow","downloadPDF","downloadXLSFile","downloadCSVFile","unit","orientation","marginLeft","doc","JSPDF","setFontSize","title","headers","dataValues","content","startY","head","body","autoTable","save","fileType","fileExtension","fileName","ws","XLSX","json_to_sheet","wb","Sheets","data","SheetNames","excelBuffer","bookType","Blob","FileSaver","columnSearchLogic","filteredRows","columnValueList","exportValidation","columnLength","fileLength","clickTag","warning","closeExport","faFilePdf","faFileExcel","faFileCsv","DropDownEditor","Editors","selectors","Data","Selectors","swapList","swapSortList","AutoCompleteFilter","Filters","NumericFilter","Spreadsheet","reorderedSwap","inComingColumnsHeaderList","pinnedColumnsList","existingColumnsHeaderList","rePositionedArray","singleHeaderOneList","slice","reverse","arrayMove","headerItem","frozen","toTop","sort","tempList","pinnedReorder","arr","oldIndex","newIndex","k","columnReorderingPannel","selectedIndexes","headerNameList","columnReorderingComponent","handleSearchValue","searchValue","filteringRows","sortingPanel","columnField","sortingPanelComponent","Sorting","args","sortingOrderSwapList","hasSingleSortkey","sortDirection","sortColumn","dataRows","getFilterResult","dataSet","getSingleSortResult","pageIndex","pageRowCount","subDataSet","exportColumnData","exportData","isSubset","exportComponent","tableSortList","hasFilter","junk","hasSearchKey","existingRows","sortingOrderNameList","nameOfItem","rowItem","toCamelCase","typeOfItem","primer","parseInt","existingSortingOrderSwapList","stringOfItemIndex","join","groupSort","str","replace","$1","toUpperCase","comparer","sortRows","hasGropSortKeys","dtRows","result","getSlicedRows","filters","rowsToSplit","firstResult","chunks","getRowsAsync","then","dt","dtSet","rw","setStateAsync","tempRows","count","handleWarningStatus","filterVal","getRows","getrows","onRowsDeselected","rowIndexes","r","rowIdx","onGridRowsUpdated","fromRow","toRow","action","formulaAppliedCols","updateCellData","onRowsSelected","concat","selectBulkData","handleFilterChange","filterTerm","firstPage","rowsRemaining","isAtBottom","isbtm","clientHeight","scrollTop","scrollHeight","loadMoreRows","from","newRowsCount","Promise","resolve","to","handleScroll","newRows","prev","globalSearchLogic","updatedRows","warningStatus","rowSlice","rVal","saveRows","clearAllFilters","getSearchResult","pageSize","dataSetVar","height","colItem","editor","dataSource","filterType","filterRenderer","formulaApplicable","UNSAFE_componentWillReceiveProps","stateObj","getValidFilterValues","columnId","componentDidUpdate","resizeEvent","createEvent","initEvent","dispatchEvent","getSearchRecords","rowsToSearch","startsWith","FormControl","srchRows","faSave","faSortAmountDown","faSortDown","faColumns","faShareAlt","Toolbar","columnKey","idx","width","showCheckbox","enableShiftSelect","selectBy","indexes","defaultCmp","getCmpFunc","cmp","fields","nFields","arguments","field","A","B","l","airportCodes"],"mappings":"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"}