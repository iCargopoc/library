{"version":3,"file":"index.js","sources":["../src/Functions/RowSelector.js","../src/Functions/DefaultColumnFilter.js","../src/Functions/GlobalFilter.js","../src/Images/RowDelete.svg","../src/Images/RowEdit.svg","../src/Images/RowPin.png","../src/Functions/RowOptions.js","../src/Overlays/managecolumns/ItemTypes.js","../src/Overlays/managecolumns/columnItem.js","../src/Overlays/managecolumns/columnsList.js","../src/Overlays/managecolumns/index.js","../src/Customgrid.js","../src/index.js"],"sourcesContent":["import React, { forwardRef, useRef, useEffect, useState, memo } from \"react\";\r\n\r\nconst RowSelector = memo(\r\n    forwardRef(({ indeterminate, ...rest }, ref) => {\r\n        const [checkValue, setCheckValue] = useState(indeterminate);\r\n        const defaultRef = useRef();\r\n        const resolvedRef = ref || defaultRef;\r\n        const onChange = () => {\r\n            setCheckValue(!indeterminate);\r\n        };\r\n        useEffect(() => {\r\n            resolvedRef.current.indeterminate = indeterminate;\r\n        }, [resolvedRef, indeterminate]);\r\n        return (\r\n            <div className=\"check-wrap\">\r\n                <input type=\"checkbox\" checked={checkValue} onChange={onChange} ref={resolvedRef} {...rest} />\r\n            </div>\r\n        );\r\n    })\r\n);\r\n\r\nexport default RowSelector;\r\n","import React, { memo } from \"react\";\r\n\r\nconst DefaultColumnFilter = memo(({ column: { filterValue, setFilter } }) => {\r\n    return (\r\n        <input\r\n            className=\"txt\"\r\n            value={filterValue || \"\"}\r\n            onChange={(e) => {\r\n                setFilter(e.target.value || undefined);\r\n            }}\r\n            placeholder=\"Search\"\r\n        />\r\n    );\r\n});\r\n\r\nexport default DefaultColumnFilter;\r\n","import React, { memo, useState } from \"react\";\r\nimport { useAsyncDebounce } from \"react-table\";\r\n\r\nconst GlobalFilter = memo(({ globalFilter, setGlobalFilter }) => {\r\n    const [value, setValue] = useState(globalFilter);\r\n\r\n    const onChange = useAsyncDebounce((value) => {\r\n        setGlobalFilter(value || undefined);\r\n    }, 200);\r\n\r\n    return (\r\n        <div className=\"txt-wrap\">\r\n            <input\r\n                type=\"text\"\r\n                value={value || \"\"}\r\n                onChange={(e) => {\r\n                    setValue(e.target.value);\r\n                    onChange(e.target.value);\r\n                }}\r\n                className=\"txt\"\r\n                placeholder=\"Search\"\r\n            />\r\n            <i className=\"fa fa-search fa-6\" aria-hidden=\"true\"></i>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default GlobalFilter;\r\n","/* loaded by smart-asset */\nexport default require(\"./RowDelete~RKolkpAF.svg\")","/* loaded by smart-asset */\nexport default require(\"./RowEdit~BuKwAcSl.svg\")","/* loaded by smart-asset */\nexport default require(\"./RowPin~qQRdvcXq.png\")","import React, { useState, memo } from \"react\";\r\nimport ClickAwayListener from \"react-click-away-listener\";\r\nimport RowDelete from \"../Images/RowDelete.svg\";\r\nimport RowEdit from \"../Images/RowEdit.svg\";\r\nimport RowPin from \"../Images/RowPin.png\";\r\n\r\nconst RowOptions = memo((props) => {\r\n    const { row, DeletePopUpOverLay, deleteRowFromGrid } = props;\r\n\r\n    const [isRowOptionsOpen, setRowOptionsOpen] = useState(false);\r\n    const [isDeleteOverlayOpen, setDeleteOverlayOpen] = useState(false);\r\n\r\n    const openRowOptionsOverlay = () => {\r\n        setRowOptionsOpen(true);\r\n    };\r\n\r\n    const closeRowOptionsOverlay = () => {\r\n        setRowOptionsOpen(false);\r\n    };\r\n\r\n    const openDeleteOverlay = () => {\r\n        setRowOptionsOpen(false);\r\n        setDeleteOverlayOpen(true);\r\n    };\r\n\r\n    const closeDeleteOverlay = () => {\r\n        setDeleteOverlayOpen(false);\r\n    };\r\n\r\n    const deleteRow = () => {\r\n        deleteRowFromGrid(row);\r\n    };\r\n\r\n    return (\r\n        <div className=\"row-options-edit-wrap\">\r\n            <span className=\"icon-row-options\" onClick={openRowOptionsOverlay}>\r\n                <i></i>\r\n                <i></i>\r\n                <i></i>\r\n            </span>\r\n            {isRowOptionsOpen ? (\r\n                <div className={`row-options-edit ${isRowOptionsOpen ? \"open\" : \"close\"}`}>\r\n                    <ul>\r\n                        <li>\r\n                            <span>\r\n                                <i>\r\n                                    <img src={RowEdit} alt=\"cargo\" />\r\n                                </i>\r\n                                <span>Edit</span>\r\n                            </span>\r\n                        </li>\r\n                        <li>\r\n                            <span>\r\n                                <i>\r\n                                    <img src={RowPin} alt=\"cargo\" width=\"15\" height=\"15\" />\r\n                                </i>\r\n                                <span>Pin This row</span>\r\n                            </span>\r\n                        </li>\r\n                        <li>\r\n                            <span onClick={openDeleteOverlay}>\r\n                                <i>\r\n                                    <img src={RowDelete} alt=\"cargo\" />\r\n                                </i>\r\n                                <span>Delete</span>\r\n                            </span>\r\n                        </li>\r\n                    </ul>\r\n                    <span className=\"close\" onClick={closeRowOptionsOverlay}>\r\n                        <i className=\"fa fa-close\"></i>\r\n                    </span>\r\n                </div>\r\n            ) : null}\r\n            {isDeleteOverlayOpen ? <DeletePopUpOverLay closeDeleteOverlay={closeDeleteOverlay} deleteRow={deleteRow} /> : null}\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default RowOptions;\r\n","export const ItemTypes = {\r\n    COLUMN: \"column\"\r\n};\r\n","import React from \"react\";\r\nimport { useDrag, useDrop } from \"react-dnd\";\r\nimport { ItemTypes } from \"./ItemTypes\";\r\n\r\nconst ColumnItem = ({ id, name, moveColumn, findColumn, innerCells }) => {\r\n    const originalIndex = findColumn(id).index;\r\n\r\n    const [{ isDragging }, drag] = useDrag({\r\n        item: { type: ItemTypes.COLUMN, id, originalIndex },\r\n        collect: (monitor) => ({\r\n            isDragging: monitor.isDragging()\r\n        }),\r\n        end: (dropResult, monitor) => {\r\n            const { id: droppedId, originalIndex } = monitor.getItem();\r\n            const didDrop = monitor.didDrop();\r\n            if (!didDrop) {\r\n                moveColumn(droppedId, originalIndex);\r\n            }\r\n        }\r\n    });\r\n\r\n    const [, drop] = useDrop({\r\n        accept: ItemTypes.COLUMN,\r\n        canDrop: () => false,\r\n        hover({ id: draggedId }) {\r\n            if (draggedId !== id) {\r\n                const { index: overIndex } = findColumn(id);\r\n                moveColumn(draggedId, overIndex);\r\n            }\r\n        }\r\n    });\r\n\r\n    const opacity = isDragging ? 0.1 : 1;\r\n\r\n    return (\r\n        <div style={{ opacity }}>\r\n            <div className=\"column__reorder\">\r\n                <div ref={(node) => drag(drop(node))} style={{ cursor: \"move\" }} className=\"\">\r\n                    <i className=\"fa fa-align-justify\" aria-hidden=\"true\"></i>\r\n                </div>\r\n                <div className=\"\">{name}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ColumnItem;\r\n","import React, { useState } from \"react\";\r\nimport { useDrop } from \"react-dnd\";\r\nimport update from \"immutability-helper\";\r\nimport { ItemTypes } from \"./ItemTypes\";\r\nimport ColumnItem from \"./columnItem\";\r\n\r\nconst ColumnsList = (props) => {\r\n\r\n    const moveColumn = (columnId, atIndex) => {\r\n        const { column, index } = findColumn(columnId);\r\n        props.updateColumnsInState(\r\n            update(props.columnsToManage, {\r\n                $splice: [\r\n                    [index, 1],\r\n                    [atIndex, 0, column]\r\n                ]\r\n            })\r\n        );\r\n    };\r\n\r\n    const findColumn = (columnId) => {\r\n        const column = props.columnsToManage.filter((c) => `${c.columnId}` === columnId)[0];\r\n        return {\r\n            column,\r\n            index: props.columnsToManage.indexOf(column)\r\n        };\r\n    };\r\n\r\n    const [, drop] = useDrop({ accept: ItemTypes.COLUMN });\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div ref={drop} style={{ display: \"flex\", flexWrap: \"wrap\" }}>\r\n                {props.columnsToManage.map((column, index) => {\r\n                    return (\r\n                        <ColumnItem\r\n                            key={index}\r\n                            id={`${column.columnId}`}\r\n                            name={`${column.Header}`}\r\n                            moveColumn={moveColumn}\r\n                            findColumn={findColumn}\r\n                            innerCells={column.innerCells}\r\n                        />\r\n                    );\r\n                })}\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default ColumnsList;\r\n","import React, { memo, useState, useEffect } from \"react\";\r\nimport { DndProvider } from \"react-dnd\";\r\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\r\nimport { TouchBackend } from \"react-dnd-touch-backend\";\r\nimport MultiBackend, { TouchTransition } from \"react-dnd-multi-backend\";\r\nimport ColumnsList from \"./columnsList\";\r\n\r\nconst ColumnReordering = memo((props) => {\r\n    const { isManageColumnOpen, toggleManageColumns, originalColumns } = props;\r\n\r\n    const [managedColumns, setManagedColumns] = useState(originalColumns);\r\n\r\n    const HTML5toTouch = {\r\n        backends: [\r\n            {\r\n                backend: HTML5Backend\r\n            },\r\n            {\r\n                backend: TouchBackend,\r\n                options: { enableMouseEvents: true },\r\n                preview: true,\r\n                transition: TouchTransition\r\n            }\r\n        ]\r\n    };\r\n\r\n    const updateColumnsInState = (columns) => {\r\n        setManagedColumns(columns);\r\n    };\r\n\r\n    const isCheckboxSelected = (header) => {\r\n        if (header === \"Select All\") {\r\n            return managedColumns.length === originalColumns.length;\r\n        } else {\r\n            const selectedColumn = managedColumns.filter((column) => {\r\n                return column.Header === header;\r\n            });\r\n            return selectedColumn && selectedColumn.length > 0;\r\n        }\r\n    };\r\n\r\n    const selectAllColumns = (event) => {\r\n        if (event.currentTarget.checked) {\r\n            setManagedColumns(originalColumns);\r\n        } else {\r\n            setManagedColumns([]);\r\n        }\r\n    };\r\n\r\n    const selectSingleColumn = (event) => {\r\n        const { currentTarget } = event;\r\n        const { checked, value } = currentTarget;\r\n\r\n        //If column checkbox is checked\r\n        if (checked) {\r\n            //Find the index of selected column from original column array and also find the user selected column\r\n            let indexOfColumnToAdd = originalColumns.findIndex((column) => {\r\n                return column.Header == value;\r\n            });\r\n            const itemToAdd = originalColumns[indexOfColumnToAdd];\r\n\r\n            //Loop through the managedColumns array to find the position of the column that is present previous to the user selected column\r\n            //Find index of that previous column and push the new column to add in that position\r\n            let prevItemIndex = -1;\r\n            while (indexOfColumnToAdd > 0 && prevItemIndex === -1) {\r\n                prevItemIndex = managedColumns.findIndex((column) => {\r\n                    return column.Header == originalColumns[indexOfColumnToAdd - 1].Header;\r\n                });\r\n                indexOfColumnToAdd = indexOfColumnToAdd - 1;\r\n            }\r\n\r\n            const newColumnsList = managedColumns.slice(0); //Copying state value\r\n            newColumnsList.splice(prevItemIndex + 1, 0, itemToAdd);\r\n            setManagedColumns(newColumnsList);\r\n        } else {\r\n            setManagedColumns(\r\n                managedColumns.filter((column) => {\r\n                    return column.Header !== value;\r\n                })\r\n            );\r\n        }\r\n    };\r\n\r\n    const doColumnUpdate = () => {\r\n        props.updateColumnStructure(managedColumns);\r\n    };\r\n\r\n    const resetColumnUpdate = () => {\r\n        setManagedColumns(originalColumns);\r\n        props.updateColumnStructure(originalColumns);\r\n    };\r\n\r\n    if (isManageColumnOpen) {\r\n        return (\r\n            <div className=\"columns--grid\">\r\n                <div className=\"column__grid\">\r\n                    <div className=\"column__chooser\">\r\n                        <div className=\"column__header\">\r\n                            <div className=\"\">\r\n                                <strong>Column Chooser</strong>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"column__body\">\r\n                            <div>\r\n                                <input type=\"text\" placeholder=\"Search column\" className=\"custom__ctrl\"></input>\r\n                            </div>\r\n                            <div className=\"column__selectAll\">\r\n                                <div className=\"column__checkbox\">\r\n                                    <input\r\n                                        type=\"checkbox\"\r\n                                        value=\"Select All\"\r\n                                        checked={isCheckboxSelected(\"Select All\")}\r\n                                        onChange={selectAllColumns}\r\n                                    ></input>\r\n                                </div>\r\n                                <div className=\"column__selectTxt\">Select All</div>\r\n                            </div>\r\n                            {originalColumns.map((column, index) => {\r\n                                return (\r\n                                    <div className=\"column__wrap\" key={index}>\r\n                                        <div className=\"column__checkbox\">\r\n                                            <input\r\n                                                type=\"checkbox\"\r\n                                                value={column.Header}\r\n                                                checked={isCheckboxSelected(column.Header)}\r\n                                                onChange={selectSingleColumn}\r\n                                            ></input>\r\n                                        </div>\r\n                                        <div className=\"column__txt\">{column.Header}</div>\r\n                                    </div>\r\n                                );\r\n                            })}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"column__settings\">\r\n                        <div className=\"column__header\">\r\n                            <div className=\"column__headerTxt\">\r\n                                <strong>Column Setting</strong>\r\n                            </div>\r\n                            <div className=\"column__close\" onClick={toggleManageColumns}>\r\n                                <i className=\"fa fa-times\" aria-hidden=\"true\"></i>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"column__body\">\r\n                            <DndProvider backend={MultiBackend} options={HTML5toTouch}>\r\n                                <ColumnsList columnsToManage={managedColumns} updateColumnsInState={updateColumnsInState} />\r\n                            </DndProvider>\r\n                        </div>\r\n                        <div className=\"column__footer\">\r\n                            <div className=\"column__btns\">\r\n                                <button className=\"btns\" onClick={resetColumnUpdate}>\r\n                                    Reset\r\n                                </button>\r\n                                <button className=\"btns\" onClick={toggleManageColumns}>\r\n                                    Cancel\r\n                                </button>\r\n                                <button className=\"btns btns__save\" onClick={doColumnUpdate}>\r\n                                    Save\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    } else {\r\n        return <div></div>;\r\n    }\r\n});\r\n\r\nexport default ColumnReordering;\r\n","import React, { useCallback, useState, memo, useEffect, createRef, useMemo } from \"react\";\r\nimport {\r\n    useTable,\r\n    useResizeColumns,\r\n    useFlexLayout,\r\n    useRowSelect,\r\n    useSortBy,\r\n    useFilters,\r\n    useGlobalFilter,\r\n    useExpanded\r\n} from \"react-table\";\r\nimport { VariableSizeList as List } from \"react-window\";\r\nimport AutoSizer from \"react-virtualized-auto-sizer\";\r\nimport InfiniteLoader from \"react-window-infinite-loader\";\r\nimport RowSelector from \"./Functions/RowSelector\";\r\nimport DefaultColumnFilter from \"./Functions/DefaultColumnFilter\";\r\nimport GlobalFilter from \"./Functions/GlobalFilter\";\r\nimport RowOptions from \"./Functions/RowOptions\";\r\nimport ColumnReordering from \"./Overlays/managecolumns\";\r\n\r\nconst listRef = createRef(null);\r\n\r\nconst Customgrid = memo((props) => {\r\n    const {\r\n        title,\r\n        gridHeight,\r\n        gridWidth,\r\n        managableColumns,\r\n        originalColumns,\r\n        data,\r\n        deletePopUpOverLay,\r\n        deleteRowFromGrid,\r\n        globalSearchLogic,\r\n        updateCellData,\r\n        selectBulkData,\r\n        calculateRowHeight,\r\n        renderExpandedContent,\r\n        hasNextPage,\r\n        isNextPageLoading,\r\n        loadNextPage\r\n    } = props;\r\n\r\n    //Local state value for holding columns configuration\r\n    const [columns, setColumns] = useState(managableColumns);\r\n\r\n    //Display error message if data or columns configuration is missing.\r\n    if (!(data && data.length > 0) || !(columns && columns.length > 0)) {\r\n        return <h2 style={{ marginTop: \"50px\", textAlign: \"center\" }}>Invalid Data or Columns Configuration</h2>;\r\n    }\r\n\r\n    //Variables used for handling infinite loading\r\n    const itemCount = hasNextPage ? data.length + 1 : data.length;\r\n    const loadMoreItems = isNextPageLoading ? () => {} : loadNextPage ? loadNextPage : () => {};\r\n    const isItemLoaded = (index) => !hasNextPage || index < data.length;\r\n\r\n    //Local state value for checking if column filter is open/closed\r\n    const [isFilterOpen, setFilterOpen] = useState(false);\r\n\r\n    //Toggle column filter state value based on UI clicks\r\n    const toggleColumnFilter = () => {\r\n        setFilterOpen(!isFilterOpen);\r\n    };\r\n\r\n    //Local state value for hiding/unhiding column management overlay\r\n    const [isManageColumnOpen, setManageColumnOpen] = useState(false);\r\n\r\n    //Toggle column manage overlay show/hide state value based on UI clicks\r\n    const toggleManageColumns = () => {\r\n        setManageColumnOpen(!isManageColumnOpen);\r\n    };\r\n\r\n    //Callback method from column manage overlay to update the column structure of the grid\r\n    const updateColumnStructure = (newColumnStructure) => {\r\n        setColumns(newColumnStructure);\r\n        toggleManageColumns();\r\n    };\r\n\r\n    //Column filter added for all columns by default\r\n    const defaultColumn = useMemo(\r\n        () => ({\r\n            Filter: DefaultColumnFilter\r\n        }),\r\n        []\r\n    );\r\n\r\n    //Initialize react-table instance with the values received through properties\r\n    const {\r\n        getTableProps,\r\n        getTableBodyProps,\r\n        headerGroups,\r\n        rows,\r\n        prepareRow,\r\n        selectedFlatRows,\r\n        state,\r\n        setGlobalFilter\r\n    } = useTable(\r\n        {\r\n            columns,\r\n            data,\r\n            defaultColumn,\r\n            updateCellData,\r\n            globalFilter: (rows, columns, filterValue) => {\r\n                //Call global search function defined in application, if it is present\r\n                if (globalSearchLogic && typeof globalSearchLogic === \"function\") {\r\n                    return globalSearchLogic(rows, columns, filterValue);\r\n                } else {\r\n                    return rows;\r\n                }\r\n            },\r\n            autoResetFilters: false,\r\n            autoResetGlobalFilter: false,\r\n            autoResetSortBy: false,\r\n            autoResetExpanded: false,\r\n            autoResetSelectedRows: false\r\n        },\r\n        useFilters,\r\n        useGlobalFilter,\r\n        useSortBy,\r\n        useExpanded,\r\n        useRowSelect,\r\n        useFlexLayout,\r\n        useResizeColumns,\r\n        (hooks) => {\r\n            //Add checkbox for all rows in grid, with different properties for header row and body rows\r\n            hooks.allColumns.push((columns) => [\r\n                {\r\n                    id: \"selection\",\r\n                    columnId: \"column_custom_0\",\r\n                    disableResizing: true,\r\n                    disableFilters: true,\r\n                    disableSortBy: true,\r\n                    minWidth: 35,\r\n                    width: 35,\r\n                    maxWidth: 35,\r\n                    Header: ({ getToggleAllRowsSelectedProps }) => <RowSelector {...getToggleAllRowsSelectedProps()} />,\r\n                    Cell: ({ row }) => <RowSelector {...row.getToggleRowSelectedProps()} />\r\n                },\r\n                ...columns,\r\n                {\r\n                    id: \"custom\",\r\n                    columnId: \"column_custom_1\",\r\n                    disableResizing: true,\r\n                    disableFilters: true,\r\n                    disableSortBy: true,\r\n                    minWidth: 35,\r\n                    width: 35,\r\n                    maxWidth: 35,\r\n                    Cell: ({ row }) => {\r\n                        return (\r\n                            <div className=\"action\">\r\n                                <RowOptions\r\n                                    row={row}\r\n                                    DeletePopUpOverLay={deletePopUpOverLay}\r\n                                    deleteRowFromGrid={deleteRowFromGrid}\r\n                                />\r\n                                <span className=\"expander\" {...row.getToggleRowExpandedProps()}>\r\n                                    {row.isExpanded ? (\r\n                                        <i className=\"fa fa-angle-up\" aria-hidden=\"true\"></i>\r\n                                    ) : (\r\n                                        <i className=\"fa fa-angle-down\" aria-hidden=\"true\"></i>\r\n                                    )}\r\n                                </span>\r\n                            </div>\r\n                        );\r\n                    }\r\n                }\r\n            ]);\r\n        }\r\n    );\r\n\r\n    //Export selected row data and pass it to the callback method\r\n    const bulkSelector = () => {\r\n        if (selectBulkData) {\r\n            selectBulkData(selectedFlatRows);\r\n        }\r\n    };\r\n\r\n    //This code is to handle the row height calculation while expanding a row or resizing a column\r\n    useEffect(() => {\r\n        if (listRef && listRef.current) {\r\n            listRef.current.resetAfterIndex(0, true);\r\n        }\r\n    });\r\n\r\n    //Render each row and cells in each row, using attributes from react window list.\r\n    const RenderRow = useCallback(\r\n        ({ index, style }) => {\r\n            if (isItemLoaded(index)) {\r\n                const row = rows[index];\r\n                prepareRow(row);\r\n                return (\r\n                    <div {...row.getRowProps({ style })} className=\"table-row tr\">\r\n                        <div className=\"table-row-wrap\">\r\n                            {row.cells.map((cell) => {\r\n                                return (\r\n                                    <div {...cell.getCellProps()} className=\"table-cell td\">\r\n                                        {cell.render(\"Cell\")}\r\n                                    </div>\r\n                                );\r\n                            })}\r\n                        </div>\r\n                        {/*Check if row eapand icon is clicked, and if yes, call function to bind content to the expanded region*/}\r\n                        {row.isExpanded ? (\r\n                            <div className=\"expand\">{renderExpandedContent ? renderExpandedContent(row) : null}</div>\r\n                        ) : null}\r\n                    </div>\r\n                );\r\n            }\r\n        },\r\n        [prepareRow, rows, renderExpandedContent]\r\n    );\r\n\r\n    //Render table title, global search component, button to show/hide column filter, button to export selected row data & the grid\r\n    //Use properties and methods provided by react-table\r\n    //Autosizer used for calculating grid height (don't consider window width and column resizing value changes)\r\n    //Infinite loader used for lazy loading, with the properties passed here and other values calculated at the top\r\n    //React window list is used for implementing virtualization, specifying the item count in a frame and height of each rows in it.\r\n    return (\r\n        <div className=\"wrapper\" style={{ width: gridWidth ? gridWidth : \"100%\" }}>\r\n            <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\" />\r\n            <div className=\"table-filter\">\r\n                <div className=\"results\">\r\n                    <div className=\"name\">\r\n                        <strong>{rows.length}</strong>\r\n                        <span> {title ? title : \"Rows\"}</span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"filter-utilities\">\r\n                    <ColumnReordering\r\n                        isManageColumnOpen={isManageColumnOpen}\r\n                        toggleManageColumns={toggleManageColumns}\r\n                        originalColumns={originalColumns}\r\n                        updateColumnStructure={updateColumnStructure}\r\n                    />\r\n                    <GlobalFilter globalFilter={state.globalFilter} setGlobalFilter={setGlobalFilter} />\r\n                    <div className=\"filter-icon keyword-search\" onClick={toggleColumnFilter}>\r\n                        <i className=\"fa fa-filter\" aria-hidden=\"true\"></i>\r\n                    </div>\r\n                    <div className=\"filter-icon bulk-select\" onClick={bulkSelector}>\r\n                        <i className=\"fa fa-pencil-square-o\" aria-hidden=\"true\"></i>\r\n                    </div>\r\n                    <div className=\"filter-icon manage-columns\" onClick={toggleManageColumns}>\r\n                        <i className=\"fa fa-columns\" aria-hidden=\"true\"></i>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div\r\n                className=\"tableContainer table-outer\"\r\n                style={{ height: gridHeight ? gridHeight : \"50vh\", overflowX: \"auto\", overflowY: \"hidden\" }}\r\n            >\r\n                <AutoSizer disableWidth disableResizing>\r\n                    {({ height }) => (\r\n                        <div {...getTableProps()} className=\"table\">\r\n                            <div className=\"thead table-row table-row--head\">\r\n                                {headerGroups.map((headerGroup) => (\r\n                                    <div {...headerGroup.getHeaderGroupProps()} className=\"tr\">\r\n                                        {headerGroup.headers.map((column) => (\r\n                                            <div {...column.getHeaderProps()} className=\"table-cell column-heading th\">\r\n                                                <div {...column.getSortByToggleProps()}>\r\n                                                    {column.render(\"Header\")}\r\n                                                    <span>\r\n                                                        {column.isSorted ? (\r\n                                                            column.isSortedDesc ? (\r\n                                                                <i className=\"fa fa-sort-desc\" aria-hidden=\"true\"></i>\r\n                                                            ) : (\r\n                                                                <i className=\"fa fa-sort-asc\" aria-hidden=\"true\"></i>\r\n                                                            )\r\n                                                        ) : (\r\n                                                            \"\"\r\n                                                        )}\r\n                                                    </span>\r\n                                                </div>\r\n                                                <div className={`txt-wrap column-filter ${isFilterOpen ? \"open\" : \"\"}`}>\r\n                                                    {!column.disableFilters ? column.render(\"Filter\") : null}\r\n                                                </div>\r\n                                                {column.canResize && <div {...column.getResizerProps()} className=\"resizer\" />}\r\n                                            </div>\r\n                                        ))}\r\n                                    </div>\r\n                                ))}\r\n                            </div>\r\n                            <div {...getTableBodyProps()} className=\"tbody\">\r\n                                <InfiniteLoader isItemLoaded={isItemLoaded} itemCount={itemCount} loadMoreItems={loadMoreItems}>\r\n                                    {({ onItemsRendered, ref }) => (\r\n                                        <List\r\n                                            ref={(list) => {\r\n                                                ref(list);\r\n                                                listRef.current = list;\r\n                                            }}\r\n                                            style={{ overflowX: \"hidden\" }}\r\n                                            height={height - 60}\r\n                                            itemCount={rows.length}\r\n                                            itemSize={(index) => {\r\n                                                if (calculateRowHeight && typeof calculateRowHeight === \"function\") {\r\n                                                    return calculateRowHeight(rows, index, headerGroups);\r\n                                                } else {\r\n                                                    return 70;\r\n                                                }\r\n                                            }}\r\n                                            onItemsRendered={onItemsRendered}\r\n                                            overscanCount={20}\r\n                                        >\r\n                                            {RenderRow}\r\n                                        </List>\r\n                                    )}\r\n                                </InfiniteLoader>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                </AutoSizer>\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default Customgrid;\r\n","import React, { memo, useMemo, useState, useEffect } from \"react\";\r\nimport Customgrid from \"./Customgrid\";\r\n\r\nconst Grid = memo((props) => {\r\n    const {\r\n        title,\r\n        gridHeight,\r\n        gridWidth,\r\n        columns,\r\n        fetchData,\r\n        deletePopUpOverLay,\r\n        deleteRowData,\r\n        globalSearchLogic,\r\n        updateCellData,\r\n        selectBulkData,\r\n        calculateRowHeight,\r\n        renderExpandedContent\r\n    } = props;\r\n\r\n    //Set state value for variable to check if there is anext page available\r\n    const [hasNextPage, setHasNextPage] = useState(true);\r\n    //Set state value for variable to check if the loading process is going on\r\n    const [isNextPageLoading, setIsNextPageLoading] = useState(false);\r\n    //Set state value for variable to hold grid data\r\n    const [items, setItems] = useState([]);\r\n\r\n    let processedColumns = [];\r\n    columns.forEach((column, index) => {\r\n        column.columnId = `column_${index}`;\r\n        processedColumns.push(column);\r\n    });\r\n    const gridColumns = useMemo(() => processedColumns, []);\r\n\r\n    //Gets triggered when one row item is deleted\r\n    const deleteRowFromGrid = (row) => {\r\n        const { index, original } = row;\r\n        const rowIndexToBeDeleted = index;\r\n        setItems((old) =>\r\n            old.filter((row, index) => {\r\n                return index !== rowIndexToBeDeleted;\r\n            })\r\n        );\r\n        deleteRowData(original);\r\n    };\r\n\r\n    //Gets called when page scroll reaches the bottom of the grid.\r\n    //Fetch the next set of data and append it to the variable holding grid data and update the state value.\r\n    //Also update the hasNextPage state value to False once API response is empty, to avoid unwanted API calls.\r\n    const loadNextPage = (...args) => {\r\n        const newIndex = args && args.length > 0 ? args[0] : -1;\r\n        if (newIndex >= 0 && hasNextPage) {\r\n            setIsNextPageLoading(true);\r\n            fetchData(newIndex).then((data) => {\r\n                setHasNextPage(data && data.length > 0);\r\n                setIsNextPageLoading(false);\r\n                setItems(items.concat(data));\r\n            });\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        //Make API call to fetch initial set of data.\r\n        fetchData(0).then((data) => {\r\n            setItems(data);\r\n        });\r\n    }, []);\r\n\r\n    if (items && items.length > 0) {\r\n        return (\r\n            <div>\r\n                <Customgrid\r\n                    title={title}\r\n                    gridHeight={gridHeight}\r\n                    gridWidth={gridWidth}\r\n                    managableColumns={gridColumns}\r\n                    originalColumns={gridColumns}\r\n                    data={items}\r\n                    deletePopUpOverLay={deletePopUpOverLay}\r\n                    deleteRowFromGrid={deleteRowFromGrid}\r\n                    globalSearchLogic={globalSearchLogic}\r\n                    updateCellData={updateCellData}\r\n                    selectBulkData={selectBulkData}\r\n                    calculateRowHeight={calculateRowHeight}\r\n                    renderExpandedContent={renderExpandedContent}\r\n                    hasNextPage={hasNextPage}\r\n                    isNextPageLoading={isNextPageLoading}\r\n                    loadNextPage={loadNextPage}\r\n                />\r\n                {isNextPageLoading ? <h2 style={{ textAlign: \"center\" }}>Loading...</h2> : null}\r\n            </div>\r\n        );\r\n    } else {\r\n        return <h2 style={{ textAlign: \"center\", marginTop: \"70px\" }}>Initializing Grid...</h2>;\r\n    }\r\n});\r\n\r\nexport default Grid;\r\n"],"names":["RowSelector","memo","forwardRef","ref","indeterminate","rest","useState","checkValue","setCheckValue","defaultRef","useRef","resolvedRef","onChange","useEffect","current","React","DefaultColumnFilter","column","filterValue","setFilter","e","target","value","undefined","GlobalFilter","globalFilter","setGlobalFilter","setValue","useAsyncDebounce","require","RowOptions","props","row","DeletePopUpOverLay","deleteRowFromGrid","isRowOptionsOpen","setRowOptionsOpen","isDeleteOverlayOpen","setDeleteOverlayOpen","openRowOptionsOverlay","closeRowOptionsOverlay","openDeleteOverlay","closeDeleteOverlay","deleteRow","RowEdit","RowPin","RowDelete","ItemTypes","COLUMN","ColumnItem","id","name","moveColumn","findColumn","originalIndex","index","useDrag","item","type","collect","monitor","isDragging","end","dropResult","getItem","droppedId","didDrop","drag","useDrop","accept","canDrop","hover","draggedId","overIndex","drop","opacity","node","cursor","ColumnsList","columnId","atIndex","updateColumnsInState","update","columnsToManage","$splice","filter","c","indexOf","display","flexWrap","map","Header","innerCells","ColumnReordering","isManageColumnOpen","toggleManageColumns","originalColumns","managedColumns","setManagedColumns","HTML5toTouch","backends","backend","HTML5Backend","TouchBackend","options","enableMouseEvents","preview","transition","TouchTransition","columns","isCheckboxSelected","header","length","selectedColumn","selectAllColumns","event","currentTarget","checked","selectSingleColumn","indexOfColumnToAdd","findIndex","itemToAdd","prevItemIndex","newColumnsList","slice","splice","doColumnUpdate","updateColumnStructure","resetColumnUpdate","DndProvider","MultiBackend","listRef","createRef","Customgrid","title","gridHeight","gridWidth","managableColumns","data","deletePopUpOverLay","globalSearchLogic","updateCellData","selectBulkData","calculateRowHeight","renderExpandedContent","hasNextPage","isNextPageLoading","loadNextPage","setColumns","marginTop","textAlign","itemCount","loadMoreItems","isItemLoaded","isFilterOpen","setFilterOpen","toggleColumnFilter","setManageColumnOpen","newColumnStructure","defaultColumn","useMemo","Filter","useTable","rows","autoResetFilters","autoResetGlobalFilter","autoResetSortBy","autoResetExpanded","autoResetSelectedRows","useFilters","useGlobalFilter","useSortBy","useExpanded","useRowSelect","useFlexLayout","useResizeColumns","hooks","allColumns","push","disableResizing","disableFilters","disableSortBy","minWidth","width","maxWidth","getToggleAllRowsSelectedProps","Cell","getToggleRowSelectedProps","getToggleRowExpandedProps","isExpanded","getTableProps","getTableBodyProps","headerGroups","prepareRow","selectedFlatRows","state","bulkSelector","resetAfterIndex","RenderRow","useCallback","style","getRowProps","cells","cell","getCellProps","render","height","overflowX","overflowY","headerGroup","getHeaderGroupProps","headers","getHeaderProps","getSortByToggleProps","isSorted","isSortedDesc","canResize","getResizerProps","onItemsRendered","List","list","Grid","fetchData","deleteRowData","setHasNextPage","setIsNextPageLoading","items","setItems","processedColumns","forEach","gridColumns","original","rowIndexToBeDeleted","old","args","newIndex","then","concat"],"mappings":"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"}