{"version":3,"file":"index.modern.js","sources":["../src/Functions/CellDisplayAndEdit.js","../src/Utilities/Columns.js","../src/Functions/RowSelector.js","../src/Functions/DefaultColumnFilter.js","../src/Functions/GlobalFilter.js","../src/Images/RowPin.png","../src/Functions/RowOptions.js","../src/Functions/RowEditOverlay.js","../src/Functions/RowDeleteOverLay.js","../src/Overlays/managecolumns/ItemTypes.js","../src/Overlays/managecolumns/columnItem.js","../src/Overlays/managecolumns/columnsList.js","../src/Overlays/managecolumns/index.js","../src/Overlays/groupsort/ItemTypes.js","../src/Overlays/groupsort/sortingItem.js","../src/Overlays/groupsort/sortingList.js","../src/Overlays/groupsort/index.js","../src/Overlays/exportdata/index.js","../src/Customgrid.js","../src/index.js"],"sourcesContent":["import React, { memo, useState, Fragment } from \"react\";\r\nimport ClickAwayListener from \"react-click-away-listener\";\r\n\r\nconst CellDisplayAndEdit = memo(({ row, columns, updateRowInGrid }) => {\r\n    const { column } = row;\r\n    if (column && row.row) {\r\n        const [isEditOpen, setIsEditOpen] = useState(false);\r\n        const [editedRowValue, setEditedRowValue] = useState(null);\r\n\r\n        const { id } = column;\r\n\r\n        const closeEdit = () => {\r\n            setIsEditOpen(false);\r\n        };\r\n\r\n        const openEdit = () => {\r\n            setIsEditOpen(true);\r\n        };\r\n\r\n        const getUpdatedRowValue = (value) => {\r\n            if (value) {\r\n                setEditedRowValue(value);\r\n            }\r\n        };\r\n\r\n        const saveEdit = () => {\r\n            if (editedRowValue) {\r\n                updateRowInGrid(row.row.original, editedRowValue);\r\n            }\r\n            closeEdit();\r\n        };\r\n\r\n        const DisplayTag = (props) => {\r\n            const { cellKey, columnKey } = props;\r\n            if (columns && columnKey) {\r\n                const selectedColumn = columns.find((col) => col.accessor === columnKey);\r\n                if (checkInnerCells(selectedColumn, cellKey)) {\r\n                    return <Fragment> {props.children}</Fragment>;\r\n                }\r\n            } else if (cellKey) {\r\n                if (checkInnerCells(column, cellKey)) {\r\n                    return <Fragment> {props.children}</Fragment>;\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n\r\n        const checkInnerCells = (column, cellKey) => {\r\n            if (column) {\r\n                const { innerCells } = column;\r\n                if (innerCells) {\r\n                    const innerCellData = innerCells.find((cell) => {\r\n                        return cell.accessor === cellKey;\r\n                    });\r\n                    if (innerCellData) {\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n            return false;\r\n        };\r\n\r\n        const originalRowValue = { ...row.row.original };\r\n        const cellDisplayContent = column.displayCell(originalRowValue, DisplayTag);\r\n        const cellEditContent = column.editCell ? column.editCell(originalRowValue, DisplayTag, getUpdatedRowValue) : null;\r\n        return (\r\n            <ClickAwayListener onClickAway={closeEdit}>\r\n                <div className={`table-cell--content table-cell--content__${id}`}>\r\n                    {cellEditContent ? (\r\n                        <div className=\"cell-edit\" onClick={openEdit}>\r\n                            <i className=\"fa fa-pencil\" aria-hidden=\"true\"></i>\r\n                        </div>\r\n                    ) : null}\r\n                    {cellDisplayContent}\r\n                    {isEditOpen ? (\r\n                        <div className=\"table-cell--content-edit\">\r\n                            {cellEditContent}\r\n                            <button className=\"ok\" onClick={saveEdit} />\r\n                            <button className=\"cancel\" onClick={closeEdit} />\r\n                        </div>\r\n                    ) : null}\r\n                </div>\r\n            </ClickAwayListener>\r\n        );\r\n    }\r\n});\r\n\r\nexport default CellDisplayAndEdit;\r\n","import React from \"react\";\r\nimport CellDisplayAndEdit from \"../Functions/CellDisplayAndEdit\";\r\n\r\nexport const extractColumns = (columns, searchColumn, isDesktop, updateRowInGrid) => {\r\n    //Remove iPad only columns from desktop and vice-versa\r\n    const filteredColumns = columns.filter((column) => {\r\n        return isDesktop ? !column.onlyInTablet : !column.onlyInDesktop;\r\n    });\r\n\r\n    let modifiedColumns = [];\r\n    //Loop through the columns configuration and create required column structure\r\n    filteredColumns.forEach((column, index) => {\r\n        const { innerCells, accessor, sortValue } = column;\r\n        const isInnerCellsPresent = innerCells && innerCells.length > 0;\r\n\r\n        //Add column Id\r\n        column.columnId = `column_${index}`;\r\n\r\n        //Configure Cell function (which is used by react-table component), based on the user defined function displayCell\r\n        if (!column.Cell && column.displayCell) {\r\n            column.Cell = (row) => {\r\n                return <CellDisplayAndEdit row={row} columns={columns} updateRowInGrid={updateRowInGrid} />;\r\n            };\r\n        }\r\n\r\n        //Add logic to sort column if sort is not disabled\r\n        if (!column.disableSortBy) {\r\n            if (isInnerCellsPresent) {\r\n                //If there are inner cells and a sort value specified, do sort on that value\r\n                if (sortValue) {\r\n                    column.sortType = (rowA, rowB) => {\r\n                        return rowA.original[accessor][sortValue] > rowB.original[accessor][sortValue] ? -1 : 1;\r\n                    };\r\n                } else {\r\n                    column.disableSortBy = true;\r\n                }\r\n            } else if (!innerCells) {\r\n                //If no inner cells are there, just do sort on column value\r\n                column.sortType = (rowA, rowB) => {\r\n                    return rowA.original[accessor] > rowB.original[accessor] ? -1 : 1;\r\n                };\r\n            }\r\n        }\r\n\r\n        //Add logic to filter column if column filter is not disabled\r\n        if (!column.disableFilters) {\r\n            column.filter = (rows, id, filterValue) => {\r\n                const searchText = filterValue ? filterValue.toLowerCase() : \"\";\r\n                return rows.filter((row) => {\r\n                    //Find original data value of each row\r\n                    const { original } = row;\r\n                    //Do search for the column\r\n                    return searchColumn(column, original, searchText);\r\n                });\r\n            };\r\n        }\r\n\r\n        modifiedColumns.push(column);\r\n    });\r\n    return modifiedColumns;\r\n};\r\n\r\nexport const extractAdditionalColumn = (additionalColumn, isDesktop) => {\r\n    const { innerCells } = additionalColumn;\r\n    const isInnerCellsPresent = innerCells && innerCells.length > 0;\r\n\r\n    //Add column Id\r\n    additionalColumn.columnId = `ExpandColumn`;\r\n\r\n    //Remove iPad only columns from desktop and vice-versa\r\n    if (isInnerCellsPresent) {\r\n        additionalColumn.innerCells = innerCells.filter((cell) => {\r\n            return isDesktop ? !cell.onlyInTablet : !cell.onlyInDesktop;\r\n        });\r\n    }\r\n    return additionalColumn;\r\n};\r\n","import React, { forwardRef, useRef, useEffect, useState, memo } from \"react\";\r\n\r\nconst RowSelector = memo(\r\n    forwardRef(({ indeterminate, ...rest }, ref) => {\r\n        const [checkValue, setCheckValue] = useState(indeterminate);\r\n        const defaultRef = useRef();\r\n        const resolvedRef = ref || defaultRef;\r\n        const onChange = () => {\r\n            setCheckValue(!indeterminate);\r\n        };\r\n        useEffect(() => {\r\n            resolvedRef.current.indeterminate = indeterminate;\r\n        }, [resolvedRef, indeterminate]);\r\n        return (\r\n            <div className=\"check-wrap\">\r\n                <input type=\"checkbox\" checked={checkValue} onChange={onChange} ref={resolvedRef} {...rest} />\r\n            </div>\r\n        );\r\n    })\r\n);\r\n\r\nexport default RowSelector;\r\n","import React, { memo } from \"react\";\r\n\r\nconst DefaultColumnFilter = memo(({ column: { filterValue, setFilter } }) => {\r\n    return (\r\n        <input\r\n            className=\"txt\"\r\n            value={filterValue || \"\"}\r\n            onChange={(e) => {\r\n                setFilter(e.target.value || undefined);\r\n            }}\r\n            placeholder=\"Search\"\r\n        />\r\n    );\r\n});\r\n\r\nexport default DefaultColumnFilter;\r\n","import React, { memo, useState } from \"react\";\r\nimport { useAsyncDebounce } from \"react-table\";\r\n\r\nconst GlobalFilter = memo(({ globalFilter, setGlobalFilter }) => {\r\n    const [value, setValue] = useState(globalFilter);\r\n\r\n    const onChange = useAsyncDebounce((value) => {\r\n        setGlobalFilter(value || undefined);\r\n    }, 200);\r\n\r\n    return (\r\n        <div className=\"txt-wrap\">\r\n            <input\r\n                type=\"text\"\r\n                value={value || \"\"}\r\n                onChange={(e) => {\r\n                    setValue(e.target.value);\r\n                    onChange(e.target.value);\r\n                }}\r\n                className=\"txt\"\r\n                placeholder=\"Search\"\r\n            />\r\n            <i className=\"fa fa-search fa-6\" aria-hidden=\"true\"></i>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default GlobalFilter;\r\n","/* loaded by smart-asset */\nexport default require(\"./RowPin~qQRdvcXq.png\")","import React, { useState, memo } from \"react\";\r\nimport ClickAwayListener from \"react-click-away-listener\";\r\nimport RowDelete from \"../Images/RowDelete.svg\";\r\nimport RowEdit from \"../Images/RowEdit.svg\";\r\nimport RowPin from \"../Images/RowPin.png\";\r\n\r\nconst RowOptions = memo(({ row, bindRowEditOverlay, bindRowDeleteOverlay }) => {\r\n    const { original } = row;\r\n\r\n    const [isRowOptionsOpen, setRowOptionsOpen] = useState(false);\r\n\r\n    const openRowOptionsOverlay = () => {\r\n        setRowOptionsOpen(true);\r\n    };\r\n\r\n    const closeRowOptionsOverlay = () => {\r\n        setRowOptionsOpen(false);\r\n    };\r\n\r\n    const openRowEditOverlay = () => {\r\n        bindRowEditOverlay(original);\r\n        closeRowOptionsOverlay();\r\n    };\r\n\r\n    const openDeleteOverlay = () => {\r\n        bindRowDeleteOverlay(original);\r\n        closeRowOptionsOverlay();\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"row-options-wrap\">\r\n                <span className=\"icon-row-options\" onClick={openRowOptionsOverlay}>\r\n                    <i></i>\r\n                    <i></i>\r\n                    <i></i>\r\n                </span>\r\n                {isRowOptionsOpen ? (\r\n                    <ClickAwayListener onClickAway={closeRowOptionsOverlay}>\r\n                        <div className=\"row-options-overlay\">\r\n                            <ul>\r\n                                <li>\r\n                                    <span onClick={openRowEditOverlay}>\r\n                                        <i>\r\n                                            <img src={RowEdit} alt=\"cargo\" />\r\n                                        </i>\r\n                                        <span>Edit</span>\r\n                                    </span>\r\n                                </li>\r\n                                <li>\r\n                                    <span>\r\n                                        <i>\r\n                                            <img src={RowPin} alt=\"cargo\" width=\"15\" height=\"15\" />\r\n                                        </i>\r\n                                        <span>Pin This row</span>\r\n                                    </span>\r\n                                </li>\r\n                                <li>\r\n                                    <span onClick={openDeleteOverlay}>\r\n                                        <i>\r\n                                            <img src={RowDelete} alt=\"cargo\" />\r\n                                        </i>\r\n                                        <span>Delete</span>\r\n                                    </span>\r\n                                </li>\r\n                            </ul>\r\n                            <span className=\"close\" onClick={closeRowOptionsOverlay}>\r\n                                <i className=\"fa fa-close\"></i>\r\n                            </span>\r\n                        </div>\r\n                    </ClickAwayListener>\r\n                ) : null}\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default RowOptions;\r\n","import React, { memo, useState, Fragment } from \"react\";\r\nimport ClickAwayListener from \"react-click-away-listener\";\r\n\r\nconst RowEditOverLay = memo(\r\n    ({ row, columns, isRowExpandEnabled, additionalColumn, getRowEditOverlay, closeRowEditOverlay, updateRowInGrid }) => {\r\n        const [editedRowValue, setEditedRowValue] = useState(null);\r\n\r\n        const getUpdatedRowValue = (value) => {\r\n            if (value) {\r\n                setEditedRowValue(value);\r\n            }\r\n        };\r\n\r\n        const saveRowEdit = () => {\r\n            if (editedRowValue) {\r\n                updateRowInGrid(row, editedRowValue);\r\n            }\r\n            closeRowEditOverlay();\r\n        };\r\n\r\n        const DisplayTag = (props) => {\r\n            const { cellKey, columnKey } = props;\r\n            if (columns && columnKey) {\r\n                const selectedColumn = columns.find((col) => col.accessor === columnKey);\r\n                if (selectedColumn && cellKey) {\r\n                    if (checkInnerCells(selectedColumn, cellKey)) {\r\n                        return <Fragment> {props.children}</Fragment>;\r\n                    }\r\n                } else if (!selectedColumn && isRowExpandEnabled && additionalColumn) {\r\n                    if (checkInnerCells(additionalColumn, columnKey)) {\r\n                        return <Fragment> {props.children}</Fragment>;\r\n                    }\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n\r\n        const checkInnerCells = (column, cellKey) => {\r\n            if (column) {\r\n                const { innerCells } = column;\r\n                if (innerCells) {\r\n                    const innerCellData = innerCells.find((cell) => {\r\n                        return cell.accessor === cellKey;\r\n                    });\r\n                    if (innerCellData) {\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n            return false;\r\n        };\r\n\r\n        const originalRowValue = { ...row };\r\n        const rowEditContent = getRowEditOverlay(originalRowValue, DisplayTag, getUpdatedRowValue);\r\n        return (\r\n            <ClickAwayListener onClickAway={closeRowEditOverlay}>\r\n                <div className=\"row-option-action-overlay\">\r\n                    {rowEditContent}\r\n                    <div className=\"cancel-save-buttons\">\r\n                        <button className=\"save-Button\" onClick={saveRowEdit}>\r\n                            Save\r\n                        </button>\r\n                        <button className=\"cancel-Button\" onClick={closeRowEditOverlay}>\r\n                            Cancel\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </ClickAwayListener>\r\n        );\r\n    }\r\n);\r\n\r\nexport default RowEditOverLay;\r\n","import React, { memo } from \"react\";\r\nimport ClickAwayListener from \"react-click-away-listener\";\r\n\r\nconst RowDeleteOverLay = memo(({ row, closeRowDeleteOverlay, deleteRowFromGrid }) => {\r\n    const deleteRow = () => {\r\n        if (row) {\r\n            deleteRowFromGrid(row);\r\n        }\r\n        closeRowDeleteOverlay();\r\n    };\r\n\r\n    return (\r\n        <ClickAwayListener onClickAway={closeRowDeleteOverlay}>\r\n            <div className=\"row-option-action-overlay delete\">\r\n                <div className=\"cancel-save-buttons-delete\">\r\n                    <button className=\"delete-Button\" onClick={deleteRow}>\r\n                        Delete\r\n                    </button>\r\n                    <button className=\"cancel-Button\" onClick={closeRowDeleteOverlay}>\r\n                        Cancel\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </ClickAwayListener>\r\n    );\r\n});\r\n\r\nexport default RowDeleteOverLay;\r\n","export const ItemTypes = {\r\n    COLUMN: \"column\"\r\n};\r\n","import React from \"react\";\r\nimport { useDrag, useDrop } from \"react-dnd\";\r\nimport { ItemTypes } from \"./ItemTypes\";\r\n\r\nconst ColumnItem = ({ id, Header, moveColumn, findColumn, originalInnerCells, isInnerCellSelected, selectInnerCells }) => {\r\n    const originalIndex = findColumn(id).index;\r\n\r\n    const [{ isDragging }, drag] = useDrag({\r\n        item: { type: ItemTypes.COLUMN, id, originalIndex },\r\n        collect: (monitor) => ({\r\n            isDragging: monitor.isDragging()\r\n        }),\r\n        end: (dropResult, monitor) => {\r\n            const { id: droppedId, originalIndex } = monitor.getItem();\r\n            const didDrop = monitor.didDrop();\r\n            if (!didDrop) {\r\n                moveColumn(droppedId, originalIndex);\r\n            }\r\n        }\r\n    });\r\n\r\n    const [, drop] = useDrop({\r\n        accept: ItemTypes.COLUMN,\r\n        canDrop: () => false,\r\n        hover({ id: draggedId }) {\r\n            if (draggedId !== id) {\r\n                const { index: overIndex } = findColumn(id);\r\n                moveColumn(draggedId, overIndex);\r\n            }\r\n        }\r\n    });\r\n\r\n    const opacity = isDragging ? 0.1 : 1;\r\n\r\n    return (\r\n        <div style={{ opacity }}>\r\n            <div className=\"column__reorder\">\r\n                <div ref={(node) => drag(drop(node))} style={{ cursor: \"move\" }} className=\"\">\r\n                    <i className=\"fa fa-align-justify\" aria-hidden=\"true\"></i>\r\n                </div>\r\n                <div className=\"\">{Header}</div>\r\n                <div className=\"column__innerCells__wrap\">\r\n                    {originalInnerCells && originalInnerCells.length > 0\r\n                        ? originalInnerCells.map((cell, index) => {\r\n                              return (\r\n                                  <div className=\"column__wrap\" key={index}>\r\n                                      <div className=\"column__checkbox\">\r\n                                          <input\r\n                                              type=\"checkbox\"\r\n                                              data-columnheader={Header}\r\n                                              value={cell.Header}\r\n                                              checked={isInnerCellSelected(Header, cell.Header)}\r\n                                              onChange={selectInnerCells}\r\n                                          ></input>\r\n                                      </div>\r\n                                      <div className=\"column__txt\">{cell.Header}</div>\r\n                                  </div>\r\n                              );\r\n                          })\r\n                        : null}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ColumnItem;\r\n","import React from \"react\";\r\nimport { useDrop } from \"react-dnd\";\r\nimport update from \"immutability-helper\";\r\nimport { ItemTypes } from \"./ItemTypes\";\r\nimport ColumnItem from \"./columnItem\";\r\n\r\nconst ColumnsList = (props) => {\r\n    const { updateColumnsInState, columnsToManage, isInnerCellSelected, selectInnerCells } = props;\r\n\r\n    const moveColumn = (columnId, atIndex) => {\r\n        const { column, index } = findColumn(columnId);\r\n        updateColumnsInState(\r\n            update(columnsToManage, {\r\n                $splice: [\r\n                    [index, 1],\r\n                    [atIndex, 0, column]\r\n                ]\r\n            })\r\n        );\r\n    };\r\n\r\n    const findColumn = (columnId) => {\r\n        const column = columnsToManage.filter((c) => `${c.columnId}` === columnId)[0];\r\n        return {\r\n            column,\r\n            index: columnsToManage.indexOf(column)\r\n        };\r\n    };\r\n\r\n    const [, drop] = useDrop({ accept: ItemTypes.COLUMN });\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div ref={drop} style={{ display: \"flex\", flexWrap: \"wrap\" }}>\r\n                {columnsToManage.map((column, index) => {\r\n                    return (\r\n                        <ColumnItem\r\n                            key={index}\r\n                            id={`${column.columnId}`}\r\n                            Header={`${column.Header}`}\r\n                            moveColumn={moveColumn}\r\n                            findColumn={findColumn}\r\n                            originalInnerCells={column.originalInnerCells}\r\n                            isInnerCellSelected={isInnerCellSelected}\r\n                            selectInnerCells={selectInnerCells}\r\n                        />\r\n                    );\r\n                })}\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default ColumnsList;\r\n","import React, { memo, useState } from \"react\";\r\nimport { DndProvider } from \"react-dnd\";\r\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\r\nimport { TouchBackend } from \"react-dnd-touch-backend\";\r\nimport MultiBackend, { TouchTransition } from \"react-dnd-multi-backend\";\r\nimport ClickAwayListener from \"react-click-away-listener\";\r\nimport ColumnsList from \"./columnsList\";\r\nimport \"!style-loader!css-loader!sass-loader!./styles/columnreorder.scss\";\r\n\r\nconst ColumnReordering = memo((props) => {\r\n    const { isManageColumnOpen, toggleManageColumns, originalColumns, isExpandContentAvailable, additionalColumn } = props;\r\n\r\n    const additionalColumnHeader = additionalColumn && additionalColumn.length ? additionalColumn[0].Header : \"\";\r\n    const getRemarksColumnIfAvailable = () => {\r\n        return isExpandContentAvailable ? additionalColumn : [];\r\n    };\r\n\r\n    const concatedOriginalColumns = originalColumns.concat(getRemarksColumnIfAvailable());\r\n\r\n    const [managedColumns, setManagedColumns] = useState(originalColumns);\r\n    const [searchedColumns, setSearchedColumns] = useState(concatedOriginalColumns);\r\n    const [remarksColumnToManage, setRemarksColumnToManage] = useState(getRemarksColumnIfAvailable);\r\n    const [isErrorDisplayed, setIsErrorDisplayed] = useState(false);\r\n\r\n    const HTML5toTouch = {\r\n        backends: [\r\n            {\r\n                backend: HTML5Backend\r\n            },\r\n            {\r\n                backend: TouchBackend,\r\n                options: { enableMouseEvents: true },\r\n                preview: true,\r\n                transition: TouchTransition\r\n            }\r\n        ]\r\n    };\r\n\r\n    const filterColumnsList = (event) => {\r\n        let { value } = event ? event.target : \"\";\r\n        value = value ? value.toLowerCase() : \"\";\r\n        if (value != \"\") {\r\n            setSearchedColumns(\r\n                originalColumns\r\n                    .filter((column) => {\r\n                        return column.Header.toLowerCase().includes(value);\r\n                    })\r\n                    .concat(\r\n                        getRemarksColumnIfAvailable().filter((column) => {\r\n                            return column.Header.toLowerCase().includes(value);\r\n                        })\r\n                    )\r\n            );\r\n        } else {\r\n            setSearchedColumns(concatedOriginalColumns);\r\n        }\r\n    };\r\n\r\n    const updateColumnsInState = (columns) => {\r\n        setManagedColumns(columns);\r\n    };\r\n\r\n    const findColumn = (columnList, columnHeader) => {\r\n        return columnList.find((column) => {\r\n            return column.Header === columnHeader;\r\n        });\r\n    };\r\n\r\n    const isItemPresentInList = (list, headerValue) => {\r\n        const filteredList = list.filter((item) => {\r\n            return item.Header === headerValue;\r\n        });\r\n        return filteredList && filteredList.length > 0;\r\n    };\r\n\r\n    const isCheckboxSelected = (header) => {\r\n        if (header === additionalColumnHeader) {\r\n            return remarksColumnToManage.length > 0;\r\n        } else if (header === \"Select All\") {\r\n            return searchedColumns.length === managedColumns.length + remarksColumnToManage.length;\r\n        } else {\r\n            return isItemPresentInList(managedColumns, header);\r\n        }\r\n    };\r\n\r\n    const isInnerCellSelected = (columnHeader, header) => {\r\n        const columnListToSearch = columnHeader === additionalColumnHeader ? remarksColumnToManage : managedColumns;\r\n        const selectedColumn = findColumn(columnListToSearch, columnHeader);\r\n        return isItemPresentInList(selectedColumn.innerCells, header);\r\n    };\r\n\r\n    const findIndexOfItem = (type, columnsList, indexOfColumnToAdd, columnHeader, originalInnerCells) => {\r\n        if (type === \"column\") {\r\n            return columnsList.findIndex((column) => {\r\n                return column.Header === originalColumns[indexOfColumnToAdd].Header;\r\n            });\r\n        } else {\r\n            return findColumn(columnsList, columnHeader).innerCells.findIndex((cell) => {\r\n                return cell.Header === originalInnerCells[indexOfColumnToAdd].Header;\r\n            });\r\n        }\r\n    };\r\n\r\n    const selectAllColumns = (event) => {\r\n        if (event.currentTarget.checked) {\r\n            setManagedColumns(originalColumns);\r\n            setRemarksColumnToManage(getRemarksColumnIfAvailable());\r\n        } else {\r\n            setManagedColumns([]);\r\n            setRemarksColumnToManage([]);\r\n        }\r\n    };\r\n\r\n    const selectSingleColumn = (event) => {\r\n        const { currentTarget } = event;\r\n        const { checked, value } = currentTarget;\r\n\r\n        if (value === additionalColumnHeader) {\r\n            if (checked) {\r\n                setRemarksColumnToManage(additionalColumn);\r\n            } else {\r\n                setRemarksColumnToManage([]);\r\n            }\r\n        } else {\r\n            //If column checkbox is checked\r\n            if (checked) {\r\n                //Find the index of selected column from original column array and also find the user selected column\r\n                let indexOfColumnToAdd = originalColumns.findIndex((column) => {\r\n                    return column.Header === value;\r\n                });\r\n                const itemToAdd = originalColumns[indexOfColumnToAdd];\r\n\r\n                //Loop through the managedColumns array to find the position of the column that is present previous to the user selected column\r\n                //Find index of that previous column in original column list and push the new column next to that position\r\n                let prevItemIndex = -1;\r\n                while (indexOfColumnToAdd > 0 && prevItemIndex === -1) {\r\n                    indexOfColumnToAdd = indexOfColumnToAdd - 1;\r\n                    prevItemIndex = findIndexOfItem(\"column\", managedColumns, indexOfColumnToAdd);\r\n                }\r\n\r\n                const newColumnsList = [...managedColumns];\r\n                newColumnsList.splice(prevItemIndex + 1, 0, itemToAdd);\r\n                setManagedColumns(newColumnsList);\r\n            } else {\r\n                setManagedColumns(\r\n                    managedColumns.filter((column) => {\r\n                        return column.Header !== value;\r\n                    })\r\n                );\r\n            }\r\n        }\r\n    };\r\n\r\n    const findAndSelectInnerCells = (stateColumnList, setStateColumnList, event) => {\r\n        const { currentTarget } = event;\r\n        const { checked, dataset, value } = currentTarget;\r\n        const { columnheader } = dataset;\r\n\r\n        //Find the column in which checked/unchecked inner cell is present\r\n        const selectedColumn = findColumn(stateColumnList, columnheader);\r\n        const { originalInnerCells } = selectedColumn;\r\n        if (originalInnerCells && originalInnerCells.length > 0) {\r\n            if (checked) {\r\n                //Find the index of selected column from original column array and also find the user selected column\r\n                let indexOfColumnToAdd = originalInnerCells.findIndex((column) => {\r\n                    return column.Header === value;\r\n                });\r\n                const itemToAdd = originalInnerCells[indexOfColumnToAdd];\r\n\r\n                //Loop through the stateColumnList array to find the position of the column that is present previous to the user selected column\r\n                //Find index of that previous column and push the new column to add in that position\r\n                let prevItemIndex = -1;\r\n                while (indexOfColumnToAdd > 0 && prevItemIndex === -1) {\r\n                    indexOfColumnToAdd = indexOfColumnToAdd - 1;\r\n                    prevItemIndex = findIndexOfItem(\r\n                        \"innercell\",\r\n                        stateColumnList,\r\n                        indexOfColumnToAdd,\r\n                        columnheader,\r\n                        originalInnerCells\r\n                    );\r\n                }\r\n\r\n                const newColumnsList = [...stateColumnList];\r\n                findColumn(newColumnsList, columnheader).innerCells.splice(prevItemIndex + 1, 0, itemToAdd);\r\n                setStateColumnList(newColumnsList);\r\n            } else {\r\n                setStateColumnList(\r\n                    stateColumnList.map((column) => {\r\n                        if (column.Header === columnheader) {\r\n                            column.innerCells = column.innerCells.filter((cell) => {\r\n                                return cell.Header !== value;\r\n                            });\r\n                        }\r\n                        return column;\r\n                    })\r\n                );\r\n            }\r\n        }\r\n    };\r\n\r\n    const selectInnerCells = (event) => {\r\n        findAndSelectInnerCells(managedColumns, setManagedColumns, event);\r\n    };\r\n\r\n    const selectRemarksInnerCells = (event) => {\r\n        findAndSelectInnerCells(remarksColumnToManage, setRemarksColumnToManage, event);\r\n    };\r\n\r\n    const doColumnUpdate = () => {\r\n        setIsErrorDisplayed(false);\r\n        if (managedColumns && managedColumns.length > 0) {\r\n            setSearchedColumns(concatedOriginalColumns);\r\n            props.updateColumnStructure(managedColumns, remarksColumnToManage);\r\n        } else {\r\n            setIsErrorDisplayed(true);\r\n        }\r\n        toggleManageColumns();\r\n    };\r\n\r\n    const resetInnerCells = (columnList) => {\r\n        if (columnList && columnList.length) {\r\n            return columnList.map((column) => {\r\n                column.innerCells = column.originalInnerCells;\r\n                return column;\r\n            });\r\n        }\r\n        return columnList;\r\n    };\r\n\r\n    const resetColumnUpdate = () => {\r\n        setManagedColumns(resetInnerCells(originalColumns));\r\n        setSearchedColumns(originalColumns.concat(getRemarksColumnIfAvailable()));\r\n        setRemarksColumnToManage(resetInnerCells(getRemarksColumnIfAvailable()));\r\n        props.updateColumnStructure(originalColumns, getRemarksColumnIfAvailable());\r\n    };\r\n\r\n    if (isManageColumnOpen) {\r\n        return (\r\n            <ClickAwayListener onClickAway={toggleManageColumns}>\r\n                <div className=\"columns--grid\">\r\n                    <div className=\"column__grid\">\r\n                        <div className=\"column__chooser\">\r\n                            <div className=\"column__header\">\r\n                                <div className=\"\">\r\n                                    <strong>Column Chooser</strong>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"column__body\">\r\n                                <div>\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        placeholder=\"Search column\"\r\n                                        className=\"custom__ctrl\"\r\n                                        onChange={filterColumnsList}\r\n                                    ></input>\r\n                                </div>\r\n                                <div className=\"column__selectAll\">\r\n                                    <div className=\"column__checkbox\">\r\n                                        <input\r\n                                            type=\"checkbox\"\r\n                                            value=\"Select All\"\r\n                                            checked={isCheckboxSelected(\"Select All\")}\r\n                                            onChange={selectAllColumns}\r\n                                        ></input>\r\n                                    </div>\r\n                                    <div className=\"column__selectTxt\">Select All</div>\r\n                                </div>\r\n                                {searchedColumns.map((column, index) => {\r\n                                    return (\r\n                                        <div className=\"column__wrap\" key={index}>\r\n                                            <div className=\"column__checkbox\">\r\n                                                <input\r\n                                                    type=\"checkbox\"\r\n                                                    value={column.Header}\r\n                                                    checked={isCheckboxSelected(column.Header)}\r\n                                                    onChange={selectSingleColumn}\r\n                                                ></input>\r\n                                            </div>\r\n                                            <div className=\"column__txt\">{column.Header}</div>\r\n                                        </div>\r\n                                    );\r\n                                })}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"column__settings\">\r\n                            <div className=\"column__header\">\r\n                                <div className=\"column__headerTxt\">\r\n                                    <strong>Column Settings</strong>\r\n                                    {isErrorDisplayed ? (\r\n                                        <strong style={{ marginLeft: \"10px\", color: \"red\" }}>\r\n                                            Select at least one column (other than {additionalColumnHeader})\r\n                                        </strong>\r\n                                    ) : null}\r\n                                </div>\r\n                                <div className=\"column__close\" onClick={toggleManageColumns}>\r\n                                    <i className=\"fa fa-times\" aria-hidden=\"true\"></i>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"column__body\">\r\n                                <DndProvider backend={MultiBackend} options={HTML5toTouch}>\r\n                                    <ColumnsList\r\n                                        columnsToManage={managedColumns}\r\n                                        updateColumnsInState={updateColumnsInState}\r\n                                        isInnerCellSelected={isInnerCellSelected}\r\n                                        selectInnerCells={selectInnerCells}\r\n                                    />\r\n                                </DndProvider>\r\n                                {remarksColumnToManage && remarksColumnToManage.length > 0 ? (\r\n                                    <div className=\"column__reorder full-width\">\r\n                                        <div className=\"\">{remarksColumnToManage[0].Header}</div>\r\n                                        <div className=\"column__innerCells__wrap\">\r\n                                            {remarksColumnToManage[0].originalInnerCells &&\r\n                                            remarksColumnToManage[0].originalInnerCells.length > 0\r\n                                                ? remarksColumnToManage[0].originalInnerCells.map((cell, index) => {\r\n                                                      return (\r\n                                                          <div className=\"column__wrap\" key={index}>\r\n                                                              <div className=\"column__checkbox\">\r\n                                                                  <input\r\n                                                                      type=\"checkbox\"\r\n                                                                      data-columnheader={remarksColumnToManage[0].Header}\r\n                                                                      value={cell.Header}\r\n                                                                      checked={isInnerCellSelected(\r\n                                                                          remarksColumnToManage[0].Header,\r\n                                                                          cell.Header\r\n                                                                      )}\r\n                                                                      onChange={selectRemarksInnerCells}\r\n                                                                  ></input>\r\n                                                              </div>\r\n                                                              <div className=\"column__txt\">{cell.Header}</div>\r\n                                                          </div>\r\n                                                      );\r\n                                                  })\r\n                                                : null}\r\n                                        </div>\r\n                                    </div>\r\n                                ) : null}\r\n                            </div>\r\n                            <div className=\"column__footer\">\r\n                                <div className=\"column__btns\">\r\n                                    <button className=\"btns\" onClick={resetColumnUpdate}>\r\n                                        Reset\r\n                                    </button>\r\n                                    <button className=\"btns\" onClick={toggleManageColumns}>\r\n                                        Cancel\r\n                                    </button>\r\n                                    <button className=\"btns btns__save\" onClick={doColumnUpdate}>\r\n                                        Save\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </ClickAwayListener>\r\n        );\r\n    } else {\r\n        return <div></div>;\r\n    }\r\n});\r\n\r\nexport default ColumnReordering;\r\n","export const ItemTypes = {\r\n    SORT_ITEM: \"SORT_ITEM\"\r\n};\r\n","import React from \"react\";\r\nimport { useDrag, useDrop } from \"react-dnd\";\r\nimport { ItemTypes } from \"./ItemTypes\";\r\nimport SortCopy from \"../../Images/SortCopy.svg\";\r\nimport SortDelete from \"../../Images/SortDelete.svg\";\r\n\r\nconst SortItem = ({\r\n    id,\r\n    sortOption,\r\n    originalColumns,\r\n    moveSort,\r\n    findSort,\r\n    updateSingleSortingOption,\r\n    copySortOption,\r\n    deleteSortOption\r\n}) => {\r\n    const originalIndex = findSort(id).index;\r\n\r\n    const [{ isDragging }, drag] = useDrag({\r\n        item: { type: ItemTypes.SORT_ITEM, id, originalIndex },\r\n        collect: (monitor) => ({\r\n            isDragging: monitor.isDragging()\r\n        }),\r\n        end: (dropResult, monitor) => {\r\n            const { id: droppedId, originalIndex } = monitor.getItem();\r\n            const didDrop = monitor.didDrop();\r\n            if (!didDrop) {\r\n                moveSort(droppedId, originalIndex);\r\n            }\r\n        }\r\n    });\r\n\r\n    const [, drop] = useDrop({\r\n        accept: ItemTypes.SORT_ITEM,\r\n        canDrop: () => false,\r\n        hover({ id: draggedId }) {\r\n            if (draggedId !== id) {\r\n                const { index: overIndex } = findSort(id);\r\n                moveSort(draggedId, overIndex);\r\n            }\r\n        }\r\n    });\r\n\r\n    const getInncerCellsOfColumn = (columnAccessor) => {\r\n        return originalColumns.find((column) => {\r\n            return column.accessor === columnAccessor;\r\n        }).innerCells;\r\n    };\r\n\r\n    const changeSortByOptions = (event) => {\r\n        const newSortByValue = event.target.value;\r\n        const innerCellsList = getInncerCellsOfColumn(newSortByValue);\r\n        updateSingleSortingOption(\r\n            id,\r\n            newSortByValue,\r\n            innerCellsList && innerCellsList.length > 0 ? innerCellsList[0].accessor : \"value\",\r\n            sortOption.order\r\n        );\r\n    };\r\n\r\n    const changeSortOnOptions = (event) => {\r\n        const newSortOnValue = event.target.value;\r\n        updateSingleSortingOption(id, sortOption.sortBy, newSortOnValue, sortOption.order);\r\n    };\r\n\r\n    const changeSortOrderOptions = (event) => {\r\n        const newSortOrderValue = event.target.value;\r\n        updateSingleSortingOption(id, sortOption.sortBy, sortOption.sortOn, newSortOrderValue);\r\n    };\r\n\r\n    const copySort = () => {\r\n        copySortOption(id);\r\n    };\r\n\r\n    const deleteSort = () => {\r\n        deleteSortOption(id);\r\n    };\r\n\r\n    const opacity = isDragging ? 0.5 : 1;\r\n\r\n    return (\r\n        <div className=\"sort__bodyContent\" style={{ opacity }}>\r\n            <div className=\"sort__reorder\">\r\n                <div ref={(node) => drag(drop(node))} style={{ cursor: \"move\" }} className=\"\">\r\n                    <i className=\"fa fa-navicon\"></i>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"sort__reorder\">\r\n                <div className=\"sort__file\">\r\n                    <select className=\"custom__ctrl\" onChange={changeSortByOptions} value={sortOption.sortBy}>\r\n                        {originalColumns.map((orgItem, index) => (\r\n                            <option key={index} value={orgItem.accessor}>\r\n                                {orgItem.Header}\r\n                            </option>\r\n                        ))}\r\n                    </select>\r\n                </div>\r\n            </div>\r\n            <div className=\"sort__reorder\">\r\n                <div className=\"sort__file\">\r\n                    <select className=\"custom__ctrl\" onChange={changeSortOnOptions} value={sortOption.sortOn}>\r\n                        {getInncerCellsOfColumn(sortOption.sortBy) && getInncerCellsOfColumn(sortOption.sortBy).length > 0 ? (\r\n                            getInncerCellsOfColumn(sortOption.sortBy).map((innerCellItem, innerCellIndex) => (\r\n                                <option key={innerCellIndex} value={innerCellItem.accessor}>\r\n                                    {innerCellItem.Header}\r\n                                </option>\r\n                            ))\r\n                        ) : (\r\n                            <option key={0} value=\"value\">\r\n                                Value\r\n                            </option>\r\n                        )}\r\n                    </select>\r\n                </div>\r\n            </div>\r\n            <div className=\"sort__reorder\">\r\n                <div className=\"sort__file\">\r\n                    <select className=\"custom__ctrl\" value={sortOption.order} onChange={changeSortOrderOptions}>\r\n                        <option>Ascending</option>\r\n                        <option>Descending</option>\r\n                    </select>\r\n                </div>\r\n            </div>\r\n            <div className=\"sort__reorder\">\r\n                <div className=\"sort__icon\" type={\"button\"} onClick={copySort}>\r\n                    <i>\r\n                        <img src={SortCopy} alt=\"copy sort\" />\r\n                    </i>\r\n                </div>\r\n            </div>\r\n            <div className=\"sort__reorder\">\r\n                <div className=\"sort__icon\" type={\"button\"} onClick={deleteSort}>\r\n                    <i>\r\n                        <img src={SortDelete} alt=\"copy sort\" />\r\n                    </i>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SortItem;\r\n","import React from \"react\";\r\nimport { useDrop } from \"react-dnd\";\r\nimport update from \"immutability-helper\";\r\nimport { ItemTypes } from \"./ItemTypes\";\r\nimport SortItem from \"./sortingItem\";\r\n\r\nconst SortingList = (props) => {\r\n    const { updateSortingOptions, sortOptions } = props;\r\n\r\n    const moveSort = (sortId, atIndex) => {\r\n        const { sort, index } = findSort(sortId);\r\n        updateSortingOptions(\r\n            update(sortOptions, {\r\n                $splice: [\r\n                    [index, 1],\r\n                    [atIndex, 0, sort]\r\n                ]\r\n            })\r\n        );\r\n    };\r\n\r\n    const findSort = (sortId) => {\r\n        const sort = sortOptions.filter((c, index) => index === sortId)[0];\r\n        return {\r\n            sort,\r\n            index: sortOptions.indexOf(sort)\r\n        };\r\n    };\r\n\r\n    const [, drop] = useDrop({ accept: ItemTypes.SORT_ITEM });\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div ref={drop} style={{ display: \"flex\", flexWrap: \"wrap\" }}>\r\n                {sortOptions && sortOptions.length > 0 ? (\r\n                    <ul>\r\n                        <li>Sort By</li>\r\n                        <li>Sort On</li>\r\n                        <li>Order</li>\r\n                    </ul>\r\n                ) : null}\r\n                {sortOptions.map((sortOption, index) => {\r\n                    return (\r\n                        <SortItem\r\n                            id={index}\r\n                            key={index}\r\n                            sortOption={sortOption}\r\n                            originalColumns={props.originalColumns}\r\n                            moveSort={moveSort}\r\n                            findSort={findSort}\r\n                            updateSingleSortingOption={props.updateSingleSortingOption}\r\n                            copySortOption={props.copySortOption}\r\n                            deleteSortOption={props.deleteSortOption}\r\n                        />\r\n                    );\r\n                })}\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default SortingList;\r\n","import React, { memo, useState } from \"react\";\r\nimport { DndProvider } from \"react-dnd\";\r\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\r\nimport { TouchBackend } from \"react-dnd-touch-backend\";\r\nimport MultiBackend, { TouchTransition } from \"react-dnd-multi-backend\";\r\nimport ClickAwayListener from \"react-click-away-listener\";\r\nimport SortingList from \"./sortingList\";\r\nimport \"!style-loader!css-loader!sass-loader!./styles/groupsort.scss\";\r\n\r\nconst GroupSort = memo((props) => {\r\n    const { isGroupSortOverLayOpen, toggleGroupSortOverLay, applyGroupSort, originalColumns } = props;\r\n\r\n    const sortingOrders = [\"Ascending\", \"Descending\"];\r\n    const defaultSortingOption = [\r\n        {\r\n            sortBy: originalColumns[0].accessor,\r\n            sortOn: originalColumns[0].innerCells ? originalColumns[0].innerCells[0].accessor : \"value\",\r\n            order: sortingOrders[0]\r\n        }\r\n    ];\r\n\r\n    const [sortOptions, setSortOptions] = useState([]);\r\n    const [isErrorDisplayed, setIsErrorDisplayed] = useState(false);\r\n\r\n    const HTML5toTouch = {\r\n        backends: [\r\n            {\r\n                backend: HTML5Backend\r\n            },\r\n            {\r\n                backend: TouchBackend,\r\n                options: { enableMouseEvents: true },\r\n                preview: true,\r\n                transition: TouchTransition\r\n            }\r\n        ]\r\n    };\r\n\r\n    const updateSortingOptions = (sortingOptions) => {\r\n        setSortOptions(sortingOptions);\r\n    };\r\n\r\n    const addSortingOptions = () => {\r\n        setSortOptions([...sortOptions, ...defaultSortingOption]);\r\n    };\r\n\r\n    const clearSortingOptions = () => {\r\n        setSortOptions([]);\r\n        applyGroupSort([]);\r\n    };\r\n\r\n    const updateSingleSortingOption = (sortIndex, sortByValue, sortOnValue, sortOrder) => {\r\n        const newOptionsList = sortOptions.slice(0);\r\n        const newSortingOption = {\r\n            sortBy: sortByValue,\r\n            sortOn: sortOnValue,\r\n            order: sortOrder\r\n        };\r\n        const updatedSortOptions = newOptionsList.map((option, index) => (index === sortIndex ? newSortingOption : option));\r\n        updateSortingOptions(updatedSortOptions);\r\n    };\r\n\r\n    const copySortOption = (sortIndex) => {\r\n        const newOption = sortOptions.slice(0)[sortIndex];\r\n        setSortOptions(sortOptions.concat(newOption));\r\n    };\r\n\r\n    const deleteSortOption = (sortIndex) => {\r\n        setSortOptions(\r\n            sortOptions.filter((option, index) => {\r\n                return index !== sortIndex;\r\n            })\r\n        );\r\n    };\r\n\r\n    const applySort = () => {\r\n        let isError = false;\r\n        sortOptions.map((option, index) => {\r\n            const { sortBy, sortOn } = option;\r\n            const optionIndex = index;\r\n            const duplicateSort = sortOptions.find((opt, optIndex) => {\r\n                return sortBy === opt.sortBy && sortOn === opt.sortOn && optionIndex !== optIndex;\r\n            });\r\n            if (duplicateSort) {\r\n                isError = true;\r\n            }\r\n        });\r\n        if (!isError) {\r\n            applyGroupSort(sortOptions);\r\n            toggleGroupSortOverLay();\r\n        }\r\n        setIsErrorDisplayed(isError);\r\n    };\r\n\r\n    if (isGroupSortOverLayOpen) {\r\n        return (\r\n            <ClickAwayListener onClickAway={toggleGroupSortOverLay}>\r\n                <div className=\"sorts--grid\">\r\n                    <div className=\"sort__grid\">\r\n                        <div className=\"sort__settings\">\r\n                            <div className=\"sort__header\">\r\n                                <div className=\"sort__headerTxt\">Sort</div>\r\n                                <div className=\"sort__close\">\r\n                                    <i className=\"fa fa-times\" aria-hidden=\"true\" onClick={toggleGroupSortOverLay}></i>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"sort__body\">\r\n                                <DndProvider backend={MultiBackend} options={HTML5toTouch}>\r\n                                    <SortingList\r\n                                        sortOptions={sortOptions}\r\n                                        originalColumns={originalColumns}\r\n                                        updateSortingOptions={updateSortingOptions}\r\n                                        updateSingleSortingOption={updateSingleSortingOption}\r\n                                        copySortOption={copySortOption}\r\n                                        deleteSortOption={deleteSortOption}\r\n                                    />\r\n                                </DndProvider>\r\n                            </div>\r\n                            <div className=\"sort-warning\">\r\n                                {isErrorDisplayed ? <span>Duplicate sort options found.</span> : null}\r\n                            </div>\r\n                            <div className=\"sort__new\">\r\n                                <div className=\"sort__section\" type=\"button\" onClick={addSortingOptions}>\r\n                                    <span>+</span>\r\n                                    <div className=\"sort__txt\">New Sort</div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"sort__footer\">\r\n                                <div className=\"sort__btns\">\r\n                                    <button className=\"btns\" onClick={clearSortingOptions}>\r\n                                        Clear All\r\n                                    </button>\r\n                                    <button className=\"btns btns__save\" onClick={applySort}>\r\n                                        Ok\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </ClickAwayListener>\r\n        );\r\n    } else {\r\n        return <div></div>;\r\n    }\r\n});\r\n\r\nexport default GroupSort;\r\n","import React, { memo, useState } from \"react\";\r\nimport ClickAwayListener from \"react-click-away-listener\";\r\nimport jsPDF from \"jspdf\";\r\nimport \"jspdf-autotable\";\r\nimport * as FileSaver from \"file-saver\";\r\nimport * as XLSX from \"xlsx\";\r\nimport \"!style-loader!css-loader!sass-loader!./styles/exportdata.scss\";\r\n\r\nconst ExportData = memo((props) => {\r\n    const {\r\n        isExportOverlayOpen,\r\n        toggleExportDataOverlay,\r\n        rows,\r\n        originalColumns,\r\n        isExpandContentAvailable,\r\n        additionalColumn\r\n    } = props;\r\n\r\n    const getRemarksColumnIfAvailable = () => {\r\n        return isExpandContentAvailable ? additionalColumn : [];\r\n    };\r\n\r\n    const updatedColumns = [...originalColumns].concat(getRemarksColumnIfAvailable());\r\n\r\n    const [managedColumns, setManagedColumns] = useState(updatedColumns);\r\n    const [searchedColumns, setSearchedColumns] = useState(updatedColumns);\r\n    const [downloadTypes, setDownloadTypes] = useState([]);\r\n    const [warning, setWarning] = useState(\"\");\r\n\r\n    let isDownload = false;\r\n\r\n    const exportRowData = () => {\r\n        isDownload = true;\r\n        let filteredRow = [];\r\n        let filteredRowValues = [];\r\n\r\n        setWarning(\"\");\r\n\r\n        if (managedColumns.length > 0 && downloadTypes.length > 0) {\r\n            rows.forEach((rowDetails) => {\r\n                let row = rowDetails.original;\r\n                const keys = Object.getOwnPropertyNames(row);\r\n                let filteredColumnVal = {};\r\n                let rowFilteredValues = [];\r\n                keys.forEach(function (key) {\r\n                    managedColumns.forEach((columnName) => {\r\n                        if (\r\n                            columnName.accessor === key ||\r\n                            (columnName.innerCells && columnName.innerCells.length && columnName.innerCells.includes(key))\r\n                        ) {\r\n                            let columnValue = \"\";\r\n                            if (typeof row[key] === \"object\") {\r\n                                if (row[key].length === undefined)\r\n                                    columnValue = Object.values(row[key]).toString().replace(\",\", \" | \");\r\n                                if (row[key].length > 0) {\r\n                                    let arrObj = \"\";\r\n                                    row[key].forEach((item, index) => {\r\n                                        arrObj = index != 0 ? arrObj + \" | \" + Object.values(item) : Object.values(item);\r\n                                    });\r\n                                    columnValue = arrObj;\r\n                                }\r\n                            } else {\r\n                                columnValue = row[key];\r\n                            }\r\n                            filteredColumnVal[key] = columnValue;\r\n                            rowFilteredValues.push(columnValue);\r\n                        }\r\n                    });\r\n                });\r\n                filteredRow.push(filteredColumnVal);\r\n                filteredRowValues.push(rowFilteredValues);\r\n            });\r\n\r\n            downloadTypes.map((item) => {\r\n                if (item === \"pdf\") {\r\n                    downloadPDF(filteredRowValues);\r\n                } else if (item === \"excel\") {\r\n                    downloadXLSFile(filteredRow);\r\n                } else {\r\n                    downloadCSVFile(filteredRow);\r\n                }\r\n            });\r\n        } else {\r\n            if (managedColumns.length === 0 && downloadTypes.length === 0) {\r\n                setWarning(\"Select at least one column and a file type\");\r\n            } else if (managedColumns.length === 0) {\r\n                setWarning(\"Select at least one column\");\r\n            } else if (downloadTypes.length === 0) {\r\n                setWarning(\"Select at least one file type\");\r\n            }\r\n        }\r\n    };\r\n\r\n    const downloadPDF = (rowFilteredValues) => {\r\n        const unit = \"pt\";\r\n        const size = \"A4\"; // Use A1, A2, A3 or A4\r\n        const orientation = \"landscape\"; // portrait or landscape\r\n\r\n        const marginLeft = 300;\r\n        const doc = new jsPDF(orientation, unit, size);\r\n\r\n        doc.setFontSize(15);\r\n\r\n        const title = \"iCargo Neo Report\";\r\n        const headers = [\r\n            managedColumns.map((column) => {\r\n                return column.Header;\r\n            })\r\n        ];\r\n\r\n        let content = {\r\n            startY: 50,\r\n            head: headers,\r\n            body: rowFilteredValues\r\n        };\r\n\r\n        doc.text(title, marginLeft, 40);\r\n        doc.autoTable(content);\r\n        doc.save(\"iCargo Neo Report.pdf\");\r\n\r\n        isDownload = false;\r\n    };\r\n\r\n    const downloadCSVFile = (filteredRowValue) => {\r\n        const fileType = \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\r\n        const fileExtension = \".csv\";\r\n        const fileName = \"iCargo Neo Report\";\r\n        const ws = XLSX.utils.json_to_sheet(filteredRowValue);\r\n        const wb = { Sheets: { data: ws }, SheetNames: [\"data\"] };\r\n        const excelBuffer = XLSX.write(wb, { bookType: \"csv\", type: \"array\" });\r\n        const data = new Blob([excelBuffer], { type: fileType });\r\n        FileSaver.saveAs(data, fileName + fileExtension);\r\n    };\r\n\r\n    const downloadXLSFile = (filteredRowValue) => {\r\n        const fileType = \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\r\n        const fileExtension = \".xlsx\";\r\n        const fileName = \"iCargo Neo Report\";\r\n        const ws = XLSX.utils.json_to_sheet(filteredRowValue);\r\n        const wb = { Sheets: { data: ws }, SheetNames: [\"data\"] };\r\n        const excelBuffer = XLSX.write(wb, { bookType: \"xlsx\", type: \"array\" });\r\n        const data = new Blob([excelBuffer], { type: fileType });\r\n        FileSaver.saveAs(data, fileName + fileExtension);\r\n    };\r\n\r\n    const filterColumnsList = (event) => {\r\n        let { value } = event ? event.target : \"\";\r\n        value = value ? value.toLowerCase() : \"\";\r\n        if (value != \"\") {\r\n            setSearchedColumns(\r\n                originalColumns\r\n                    .filter((column) => {\r\n                        return column.Header.toLowerCase().includes(value);\r\n                    })\r\n                    .concat(\r\n                        getRemarksColumnIfAvailable().filter((column) => {\r\n                            return column.Header.toLowerCase().includes(value);\r\n                        })\r\n                    )\r\n            );\r\n        } else {\r\n            setSearchedColumns(updatedColumns);\r\n        }\r\n    };\r\n\r\n    const isCheckboxSelected = (header) => {\r\n        if (header === \"Select All\") {\r\n            return managedColumns.length === searchedColumns.length;\r\n        } else {\r\n            const selectedColumn = managedColumns.filter((column) => {\r\n                return column.Header === header;\r\n            });\r\n            return selectedColumn && selectedColumn.length > 0;\r\n        }\r\n    };\r\n\r\n    const selectAllColumns = (event) => {\r\n        if (event.target.checked) {\r\n            setManagedColumns(updatedColumns);\r\n        } else {\r\n            setManagedColumns([]);\r\n        }\r\n    };\r\n\r\n    const selectSingleColumn = (event) => {\r\n        const { currentTarget } = event;\r\n        const { checked, value } = currentTarget;\r\n\r\n        //If column checkbox is checked\r\n        if (checked) {\r\n            //Find the index of selected column from original column array and also find the user selected column\r\n            let indexOfColumnToAdd = updatedColumns.findIndex((column) => {\r\n                return column.Header === value;\r\n            });\r\n            const itemToAdd = updatedColumns[indexOfColumnToAdd];\r\n\r\n            //Loop through the managedColumns array to find the position of the column that is present previous to the user selected column\r\n            //Find index of that previous column and push the new column to add in that position\r\n            let prevItemIndex = -1;\r\n            while (indexOfColumnToAdd > 0 && prevItemIndex === -1) {\r\n                prevItemIndex = managedColumns.findIndex((column) => {\r\n                    return column.Header === updatedColumns[indexOfColumnToAdd - 1].Header;\r\n                });\r\n                indexOfColumnToAdd = indexOfColumnToAdd - 1;\r\n            }\r\n\r\n            const newColumnsList = managedColumns.slice(0); //Copying state value\r\n            newColumnsList.splice(prevItemIndex + 1, 0, itemToAdd);\r\n            setManagedColumns(newColumnsList);\r\n        } else {\r\n            setManagedColumns(\r\n                managedColumns.filter((column) => {\r\n                    return column.Header !== value;\r\n                })\r\n            );\r\n        }\r\n    };\r\n\r\n    const changeDownloadType = (event) => {\r\n        const { value, checked } = event ? event.currentTarget : \"\";\r\n        if (checked) {\r\n            setDownloadTypes(downloadTypes.concat([value]));\r\n        } else {\r\n            setDownloadTypes(\r\n                downloadTypes.filter((type) => {\r\n                    return type !== value;\r\n                })\r\n            );\r\n        }\r\n    };\r\n\r\n    if (isExportOverlayOpen) {\r\n        return (\r\n            <ClickAwayListener onClickAway={toggleExportDataOverlay}>\r\n                <div className=\"exports--grid\">\r\n                    <div className=\"export__grid\">\r\n                        <div className=\"export__chooser\">\r\n                            <div className=\"export__header\">\r\n                                <div className=\"\">\r\n                                    <strong>Export Data</strong>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"export__body\">\r\n                                <div>\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        placeholder=\"Search column\"\r\n                                        className=\"custom__ctrl\"\r\n                                        onChange={filterColumnsList}\r\n                                    ></input>\r\n                                </div>\r\n                                <div className=\"export__wrap export__headertxt\">\r\n                                    <div className=\"export__checkbox\">\r\n                                        <input\r\n                                            type=\"checkbox\"\r\n                                            value=\"Select All\"\r\n                                            checked={isCheckboxSelected(\"Select All\")}\r\n                                            onChange={selectAllColumns}\r\n                                        />\r\n                                    </div>\r\n                                    <div className=\"export__txt\">Select All</div>\r\n                                </div>\r\n                                {searchedColumns.map((column, index) => {\r\n                                    return (\r\n                                        <div className=\"export__wrap\" key={index}>\r\n                                            <div className=\"export__checkbox\">\r\n                                                <input\r\n                                                    type=\"checkbox\"\r\n                                                    value={column.Header}\r\n                                                    checked={isCheckboxSelected(column.Header)}\r\n                                                    onChange={selectSingleColumn}\r\n                                                ></input>\r\n                                            </div>\r\n                                            <div className=\"export__txt\">{column.Header}</div>\r\n                                        </div>\r\n                                    );\r\n                                })}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"export__settings\">\r\n                            <div className=\"export__header\">\r\n                                <div className=\"export__headerTxt\"></div>\r\n                                <div className=\"export__close\">\r\n                                    <i className=\"fa fa-times\" aria-hidden=\"true\" onClick={toggleExportDataOverlay}></i>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"export__as\">Export As</div>\r\n                            <div className=\"export__body\">\r\n                                <div className=\"export__reorder\">\r\n                                    <div className=\"check-wrap\">\r\n                                        <input\r\n                                            type=\"checkbox\"\r\n                                            id=\"chk_pdf\"\r\n                                            value=\"pdf\"\r\n                                            checked={downloadTypes.includes(\"pdf\")}\r\n                                            onChange={changeDownloadType}\r\n                                        ></input>\r\n                                    </div>\r\n                                    <div className=\"export__file\">\r\n                                        <i className=\"fa fa-file-pdf-o\" aria-hidden=\"true\"></i>\r\n                                        <br />\r\n                                        <strong>PDF</strong>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"export__reorder\">\r\n                                    <div className=\"check-wrap\">\r\n                                        <input\r\n                                            type=\"checkbox\"\r\n                                            id=\"chk_excel\"\r\n                                            value=\"excel\"\r\n                                            checked={downloadTypes.includes(\"excel\")}\r\n                                            onChange={changeDownloadType}\r\n                                        ></input>\r\n                                    </div>\r\n                                    <div className=\"export__file\">\r\n                                        <i className=\"fa fa-file-excel-o\" aria-hidden=\"true\"></i>\r\n                                        <br />\r\n                                        <strong>Excel</strong>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"export__reorder\">\r\n                                    <div className=\"check-wrap\">\r\n                                        <input\r\n                                            type=\"checkbox\"\r\n                                            id=\"chk_csv\"\r\n                                            value=\"csv\"\r\n                                            checked={downloadTypes.includes(\"csv\")}\r\n                                            onChange={changeDownloadType}\r\n                                        ></input>\r\n                                    </div>\r\n                                    <div className=\"export__file\">\r\n                                        <i className=\"fa fa-file-text-o\" aria-hidden=\"true\"></i>\r\n                                        <br />\r\n                                        <strong>CSV</strong>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"exportWarning\">\r\n                                    <span className=\"alert alert-danger\">\r\n                                        <strong>{warning}</strong>\r\n                                    </span>\r\n                                </div>\r\n                                <div>{isDownload ? <h2 style={{ textAlign: \"center\" }}>Loading...</h2> : null}</div>\r\n                            </div>\r\n                            <div className=\"export__footer\">\r\n                                <div className=\"export__btns\">\r\n                                    <button className=\"btns\" onClick={toggleExportDataOverlay}>\r\n                                        Cancel\r\n                                    </button>\r\n                                    <button className=\"btns btns__save\" onClick={exportRowData}>\r\n                                        Export\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </ClickAwayListener>\r\n        );\r\n    } else {\r\n        return <div></div>;\r\n    }\r\n});\r\n\r\nexport default ExportData;\r\n","import React, { useCallback, useState, memo, useEffect, createRef, useMemo } from \"react\";\r\nimport {\r\n    useTable,\r\n    useResizeColumns,\r\n    useFlexLayout,\r\n    useRowSelect,\r\n    useSortBy,\r\n    useFilters,\r\n    useGlobalFilter,\r\n    useExpanded\r\n} from \"react-table\";\r\nimport { VariableSizeList as List } from \"react-window\";\r\nimport AutoSizer from \"react-virtualized-auto-sizer\";\r\nimport InfiniteLoader from \"react-window-infinite-loader\";\r\nimport RowSelector from \"./Functions/RowSelector\";\r\nimport DefaultColumnFilter from \"./Functions/DefaultColumnFilter\";\r\nimport GlobalFilter from \"./Functions/GlobalFilter\";\r\nimport RowOptions from \"./Functions/RowOptions\";\r\nimport RowEditOverlay from \"./Functions/RowEditOverlay\";\r\nimport RowDeleteOverLay from \"./Functions/RowDeleteOverLay\";\r\nimport ColumnReordering from \"./Overlays/managecolumns\";\r\nimport GroupSort from \"./Overlays/groupsort\";\r\nimport ExportData from \"./Overlays/exportdata\";\r\n\r\nconst listRef = createRef(null);\r\n\r\nconst Customgrid = memo((props) => {\r\n    const {\r\n        title,\r\n        gridHeight,\r\n        gridWidth,\r\n        managableColumns,\r\n        originalColumns,\r\n        additionalColumn,\r\n        data,\r\n        getRowEditOverlay,\r\n        updateRowInGrid,\r\n        deleteRowFromGrid,\r\n        globalSearchLogic,\r\n        selectBulkData,\r\n        calculateRowHeight,\r\n        isExpandContentAvailable,\r\n        displayExpandedContent,\r\n        hasNextPage,\r\n        isNextPageLoading,\r\n        loadNextPage,\r\n        doGroupSort\r\n    } = props;\r\n\r\n    //Local state value for holding columns configuration\r\n    const [columns, setColumns] = useState(managableColumns);\r\n    //Local state value for holding the boolean value to check if row expand is available\r\n    const [isRowExpandEnabled, setIsRowExpandEnabled] = useState(isExpandContentAvailable);\r\n\r\n    //Variables used for handling infinite loading\r\n    const itemCount = hasNextPage ? data.length + 1 : data.length;\r\n    const loadMoreItems = isNextPageLoading ? () => {} : loadNextPage ? loadNextPage : () => {};\r\n    const isItemLoaded = (index) => !hasNextPage || index < data.length;\r\n\r\n    //Local state value for checking if column filter is open/closed\r\n    const [isFilterOpen, setFilterOpen] = useState(false);\r\n    //Toggle column filter state value based on UI clicks\r\n    const toggleColumnFilter = () => {\r\n        setFilterOpen(!isFilterOpen);\r\n    };\r\n\r\n    //Local state value for checking if column filter is open/closed\r\n    const [isRowEditOverlyOpen, setIsRowEditOverlyOpen] = useState(false);\r\n    //Local state value to hold row data that is going to be edited\r\n    const [editedRowData, setEditedRowData] = useState(null);\r\n    //Bind the user defined row edit overlay into Grid\r\n    const bindRowEditOverlay = (rowValue) => {\r\n        setEditedRowData(rowValue);\r\n        setIsRowEditOverlyOpen(true);\r\n    };\r\n    //Close the row edit overlay\r\n    const closeRowEditOverlay = () => {\r\n        setEditedRowData(null);\r\n        setIsRowEditOverlyOpen(false);\r\n    };\r\n\r\n    //Local state value for checking if column filter is open/closed\r\n    const [isRowDeleteOverlyOpen, setIsRowDeleteOverlyOpen] = useState(false);\r\n    //Local state value to hold row data that is going to be deleted\r\n    const [deletedRowData, setDeletedRowData] = useState(null);\r\n    //Bind the user defined row delete overlay into Grid\r\n    const bindRowDeleteOverlay = (rowValue) => {\r\n        setDeletedRowData(rowValue);\r\n        setIsRowDeleteOverlyOpen(true);\r\n    };\r\n    //Close the row edit overlay\r\n    const closeRowDeleteOverlay = () => {\r\n        setDeletedRowData(null);\r\n        setIsRowDeleteOverlyOpen(false);\r\n    };\r\n\r\n    //Local state value for checking if group Sort Overlay is open/closed.\r\n    const [isGroupSortOverLayOpen, setGroupSortOverLay] = useState(false);\r\n\r\n    //Toggle group Sort state value based on UI clicks\r\n    const toggleGroupSortOverLay = () => {\r\n        setGroupSortOverLay(!isGroupSortOverLayOpen);\r\n    };\r\n\r\n    const applyGroupSort = (sortOptions) => {\r\n        doGroupSort(sortOptions);\r\n    };\r\n\r\n    //Local state value for hiding/unhiding column management overlay\r\n    const [isManageColumnOpen, setManageColumnOpen] = useState(false);\r\n\r\n    //Toggle column manage overlay show/hide state value based on UI clicks\r\n    const toggleManageColumns = () => {\r\n        setManageColumnOpen(!isManageColumnOpen);\r\n    };\r\n\r\n    //Callback method from column manage overlay to update the column structure of the grid\r\n    const updateColumnStructure = (newColumnStructure, remarksColumn) => {\r\n        setColumns([...newColumnStructure]);\r\n        setIsRowExpandEnabled(remarksColumn && remarksColumn.length > 0 ? true : false);\r\n    };\r\n\r\n    //Local state value for hiding/unhiding export data overlay\r\n    const [isExportOverlayOpen, setIsExportOverlayOpen] = useState(false);\r\n\r\n    //Toggle export overlay show/hide state value based on UI clicks\r\n    const toggleExportDataOverlay = () => {\r\n        setIsExportOverlayOpen(!isExportOverlayOpen);\r\n    };\r\n\r\n    //Column filter added for all columns by default\r\n    const defaultColumn = useMemo(\r\n        () => ({\r\n            Filter: DefaultColumnFilter\r\n        }),\r\n        []\r\n    );\r\n\r\n    //Initialize react-table instance with the values received through properties\r\n    const {\r\n        getTableProps,\r\n        getTableBodyProps,\r\n        headerGroups,\r\n        rows,\r\n        prepareRow,\r\n        selectedFlatRows,\r\n        state,\r\n        setGlobalFilter\r\n    } = useTable(\r\n        {\r\n            columns,\r\n            data,\r\n            defaultColumn,\r\n            globalFilter: (rows, columns, filterValue) => {\r\n                //Call global search function defined in application, if it is present\r\n                if (globalSearchLogic && typeof globalSearchLogic === \"function\") {\r\n                    return globalSearchLogic(rows, columns, filterValue);\r\n                } else {\r\n                    return rows;\r\n                }\r\n            },\r\n            autoResetFilters: false,\r\n            autoResetGlobalFilter: false,\r\n            autoResetSortBy: false,\r\n            autoResetExpanded: false,\r\n            autoResetSelectedRows: false\r\n        },\r\n        useFilters,\r\n        useGlobalFilter,\r\n        useSortBy,\r\n        useExpanded,\r\n        useRowSelect,\r\n        useFlexLayout,\r\n        useResizeColumns,\r\n        (hooks) => {\r\n            //Add checkbox for all rows in grid, with different properties for header row and body rows\r\n            hooks.allColumns.push((columns) => [\r\n                {\r\n                    id: \"selection\",\r\n                    columnId: \"column_custom_0\",\r\n                    disableResizing: true,\r\n                    disableFilters: true,\r\n                    disableSortBy: true,\r\n                    minWidth: 35,\r\n                    width: 35,\r\n                    maxWidth: 35,\r\n                    Header: ({ getToggleAllRowsSelectedProps }) => <RowSelector {...getToggleAllRowsSelectedProps()} />,\r\n                    Cell: ({ row }) => <RowSelector {...row.getToggleRowSelectedProps()} />\r\n                },\r\n                ...columns,\r\n                {\r\n                    id: \"custom\",\r\n                    columnId: \"column_custom_1\",\r\n                    disableResizing: true,\r\n                    disableFilters: true,\r\n                    disableSortBy: true,\r\n                    minWidth: 35,\r\n                    width: 35,\r\n                    maxWidth: 35,\r\n                    Cell: ({ row }) => {\r\n                        return (\r\n                            <div className=\"action\">\r\n                                <RowOptions\r\n                                    row={row}\r\n                                    bindRowEditOverlay={bindRowEditOverlay}\r\n                                    bindRowDeleteOverlay={bindRowDeleteOverlay}\r\n                                />\r\n                                {isRowExpandEnabled ? (\r\n                                    <span className=\"expander\" {...row.getToggleRowExpandedProps()}>\r\n                                        {row.isExpanded ? (\r\n                                            <i className=\"fa fa-angle-up\" aria-hidden=\"true\"></i>\r\n                                        ) : (\r\n                                            <i className=\"fa fa-angle-down\" aria-hidden=\"true\"></i>\r\n                                        )}\r\n                                    </span>\r\n                                ) : null}\r\n                            </div>\r\n                        );\r\n                    }\r\n                }\r\n            ]);\r\n        }\r\n    );\r\n\r\n    //Export selected row data and pass it to the callback method\r\n    const bulkSelector = () => {\r\n        if (selectBulkData) {\r\n            selectBulkData(selectedFlatRows);\r\n        }\r\n    };\r\n\r\n    //This code is to handle the row height calculation while expanding a row or resizing a column\r\n    useEffect(() => {\r\n        if (listRef && listRef.current) {\r\n            listRef.current.resetAfterIndex(0, true);\r\n        }\r\n    });\r\n\r\n    //Render each row and cells in each row, using attributes from react window list.\r\n    const RenderRow = useCallback(\r\n        ({ index, style }) => {\r\n            if (isItemLoaded(index)) {\r\n                const row = rows[index];\r\n                prepareRow(row);\r\n                return (\r\n                    <div {...row.getRowProps({ style })} className=\"table-row tr\">\r\n                        <div className=\"table-row-wrap\">\r\n                            {row.cells.map((cell) => {\r\n                                return (\r\n                                    <div {...cell.getCellProps()} className=\"table-cell td\">\r\n                                        {cell.render(\"Cell\")}\r\n                                    </div>\r\n                                );\r\n                            })}\r\n                        </div>\r\n                        {/*Check if row eapand icon is clicked, and if yes, call function to bind content to the expanded region*/}\r\n                        {isRowExpandEnabled && row.isExpanded ? (\r\n                            <div className=\"expand\">{displayExpandedContent ? displayExpandedContent(row) : null}</div>\r\n                        ) : null}\r\n                    </div>\r\n                );\r\n            }\r\n        },\r\n        [prepareRow, rows, displayExpandedContent]\r\n    );\r\n\r\n    //Render table title, global search component, button to show/hide column filter, button to export selected row data & the grid\r\n    //Use properties and methods provided by react-table\r\n    //Autosizer used for calculating grid height (don't consider window width and column resizing value changes)\r\n    //Infinite loader used for lazy loading, with the properties passed here and other values calculated at the top\r\n    //React window list is used for implementing virtualization, specifying the item count in a frame and height of each rows in it.\r\n    return (\r\n        <div className=\"table-wrapper\" style={{ width: gridWidth ? gridWidth : \"100%\" }}>\r\n            <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\" />\r\n            <div className=\"table-filter\">\r\n                <div className=\"results\">\r\n                    <div className=\"name\">\r\n                        <strong>{rows.length}</strong>\r\n                        <span> {title ? title : \"Rows\"}</span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"filter-utilities\">\r\n                    <ColumnReordering\r\n                        isManageColumnOpen={isManageColumnOpen}\r\n                        toggleManageColumns={toggleManageColumns}\r\n                        originalColumns={originalColumns}\r\n                        isExpandContentAvailable={isExpandContentAvailable}\r\n                        additionalColumn={[additionalColumn]}\r\n                        updateColumnStructure={updateColumnStructure}\r\n                    />\r\n                    <GlobalFilter globalFilter={state.globalFilter} setGlobalFilter={setGlobalFilter} />\r\n                    <GroupSort\r\n                        isGroupSortOverLayOpen={isGroupSortOverLayOpen}\r\n                        toggleGroupSortOverLay={toggleGroupSortOverLay}\r\n                        originalColumns={originalColumns}\r\n                        applyGroupSort={applyGroupSort}\r\n                    />\r\n                    <ExportData\r\n                        isExportOverlayOpen={isExportOverlayOpen}\r\n                        toggleExportDataOverlay={toggleExportDataOverlay}\r\n                        rows={rows}\r\n                        originalColumns={originalColumns}\r\n                        isExpandContentAvailable={isExpandContentAvailable}\r\n                        additionalColumn={[additionalColumn]}\r\n                    />\r\n                    <div className=\"filter-icon keyword-search\" onClick={toggleColumnFilter}>\r\n                        <i className=\"fa fa-filter\" aria-hidden=\"true\"></i>\r\n                    </div>\r\n                    <div className=\"filter-icon bulk-select\" onClick={bulkSelector}>\r\n                        <i className=\"fa fa-pencil-square-o\" aria-hidden=\"true\"></i>\r\n                    </div>\r\n                    <div className=\"filter-icon bulk-select\" onClick={toggleGroupSortOverLay}>\r\n                        <i className=\"fa fa-sort-amount-desc\" aria-hidden=\"true\"></i>\r\n                    </div>\r\n                    <div className=\"filter-icon manage-columns\" onClick={toggleManageColumns}>\r\n                        <i className=\"fa fa-columns\" aria-hidden=\"true\"></i>\r\n                    </div>\r\n                    <div className=\"filter-icon manage-columns\" onClick={toggleExportDataOverlay}>\r\n                        <i className=\"fa fa-share-alt\" aria-hidden=\"true\"></i>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"table-popus\">\r\n                {isRowEditOverlyOpen ? (\r\n                    <RowEditOverlay\r\n                        row={editedRowData}\r\n                        columns={columns}\r\n                        isRowExpandEnabled={isRowExpandEnabled}\r\n                        additionalColumn={additionalColumn}\r\n                        getRowEditOverlay={getRowEditOverlay}\r\n                        closeRowEditOverlay={closeRowEditOverlay}\r\n                        updateRowInGrid={updateRowInGrid}\r\n                    />\r\n                ) : null}\r\n                {isRowDeleteOverlyOpen ? (\r\n                    <RowDeleteOverLay\r\n                        row={deletedRowData}\r\n                        closeRowDeleteOverlay={closeRowDeleteOverlay}\r\n                        deleteRowFromGrid={deleteRowFromGrid}\r\n                    />\r\n                ) : null}\r\n            </div>\r\n\r\n            <div\r\n                className=\"tableContainer table-outer\"\r\n                style={{ height: gridHeight ? gridHeight : \"50vh\", overflowX: \"auto\", overflowY: \"hidden\" }}\r\n            >\r\n                <AutoSizer disableWidth disableResizing>\r\n                    {({ height }) => (\r\n                        <div {...getTableProps()} className=\"table\">\r\n                            <div className=\"thead table-row table-row--head\">\r\n                                {headerGroups.map((headerGroup) => (\r\n                                    <div {...headerGroup.getHeaderGroupProps()} className=\"tr\">\r\n                                        {headerGroup.headers.map((column) => (\r\n                                            <div {...column.getHeaderProps()} className=\"table-cell column-heading th\">\r\n                                                <div {...column.getSortByToggleProps()}>\r\n                                                    {column.render(\"Header\")}\r\n                                                    <span>\r\n                                                        {column.isSorted ? (\r\n                                                            column.isSortedDesc ? (\r\n                                                                <i className=\"fa fa-sort-desc\" aria-hidden=\"true\"></i>\r\n                                                            ) : (\r\n                                                                <i className=\"fa fa-sort-asc\" aria-hidden=\"true\"></i>\r\n                                                            )\r\n                                                        ) : (\r\n                                                            \"\"\r\n                                                        )}\r\n                                                    </span>\r\n                                                </div>\r\n                                                <div className={`txt-wrap column-filter ${isFilterOpen ? \"open\" : \"\"}`}>\r\n                                                    {!column.disableFilters ? column.render(\"Filter\") : null}\r\n                                                </div>\r\n                                                {column.canResize && <div {...column.getResizerProps()} className=\"resizer\" />}\r\n                                            </div>\r\n                                        ))}\r\n                                    </div>\r\n                                ))}\r\n                            </div>\r\n                            <div {...getTableBodyProps()} className=\"tbody\">\r\n                                <InfiniteLoader isItemLoaded={isItemLoaded} itemCount={itemCount} loadMoreItems={loadMoreItems}>\r\n                                    {({ onItemsRendered, ref }) => (\r\n                                        <List\r\n                                            ref={(list) => {\r\n                                                ref(list);\r\n                                                listRef.current = list;\r\n                                            }}\r\n                                            style={{ overflowX: \"hidden\" }}\r\n                                            height={height - 60}\r\n                                            itemCount={rows.length}\r\n                                            itemSize={(index) => {\r\n                                                return calculateRowHeight(\r\n                                                    rows[index],\r\n                                                    headerGroups && headerGroups.length ? headerGroups[0].headers : []\r\n                                                );\r\n                                            }}\r\n                                            onItemsRendered={onItemsRendered}\r\n                                            overscanCount={20}\r\n                                        >\r\n                                            {RenderRow}\r\n                                        </List>\r\n                                    )}\r\n                                </InfiniteLoader>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                </AutoSizer>\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default Customgrid;\r\n","import React, { memo, useMemo, useState, useEffect, Fragment } from \"react\";\r\nimport { extractColumns, extractAdditionalColumn } from \"./Utilities/Columns\";\r\nimport Customgrid from \"./Customgrid\";\r\nimport \"!style-loader!css-loader!sass-loader!./styles/main.scss\";\r\n\r\nconst Grid = memo((props) => {\r\n    const {\r\n        title,\r\n        gridHeight,\r\n        gridWidth,\r\n        columns,\r\n        columnToExpand,\r\n        fetchData,\r\n        getRowEditOverlay,\r\n        updateRowData,\r\n        deleteRowData,\r\n        selectBulkData,\r\n        calculateRowHeight\r\n    } = props;\r\n\r\n    //Check if device is desktop\r\n    const isDesktop = window.innerWidth > 1024;\r\n\r\n    //Set state value for variable to check if there is anext page available\r\n    const [hasNextPage, setHasNextPage] = useState(true);\r\n    //Set state value for variable to check if the loading process is going on\r\n    const [isNextPageLoading, setIsNextPageLoading] = useState(false);\r\n    //Local state value for checking if data is being loaded from API\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    //Set state value for variable to hold grid data\r\n    const [items, setItems] = useState([]);\r\n    //Local state for group sort options\r\n    const [groupSortOptions, setGroupSortOptions] = useState([]);\r\n\r\n    //Logic for searching in each column\r\n    const searchColumn = (column, original, searchText) => {\r\n        //Return value\r\n        let isValuePresent = false;\r\n        //Find the accessor node and inner cells array of each column\r\n        const { accessor, innerCells } = column;\r\n        //Find accessor value of a column\r\n        const rowAccessorValue = original[accessor];\r\n        //Check if inner cells are available and save value to boolean var\r\n        const isInnerCellsPresent = innerCells && innerCells.length > 0;\r\n        //Enter if cell value is object or array\r\n        if (typeof rowAccessorValue === \"object\" && isInnerCellsPresent) {\r\n            //Enter if cell value is array\r\n            if (rowAccessorValue.length > 0) {\r\n                //Loop through cell array value and check if searched text is present\r\n                rowAccessorValue.map((value) => {\r\n                    innerCells.map((cell) => {\r\n                        const dataAccessor = value[cell.accessor];\r\n                        if (dataAccessor && dataAccessor.toString().toLowerCase().includes(searchText)) {\r\n                            isValuePresent = true;\r\n                        }\r\n                    });\r\n                });\r\n            } else {\r\n                //If cell value is an object, loop through inner cells and check if searched text is present\r\n                innerCells.map((cell) => {\r\n                    const dataAccessor = original[accessor][cell.accessor];\r\n                    if (dataAccessor && dataAccessor.toString().toLowerCase().includes(searchText)) {\r\n                        isValuePresent = true;\r\n                    }\r\n                });\r\n            }\r\n        } else {\r\n            //If cell value is not an object or array, convert it to text and check if searched text is present\r\n            const dataAccessor = original[accessor];\r\n            if (dataAccessor && dataAccessor.toString().toLowerCase().includes(searchText)) {\r\n                isValuePresent = true;\r\n            }\r\n        }\r\n        return isValuePresent;\r\n    };\r\n\r\n    //Gets triggered when one row item is updated\r\n    const updateRowInGrid = (original, updatedRow) => {\r\n        setItems((old) =>\r\n            old.map((row) => {\r\n                if (Object.entries(row).toString() === Object.entries(original).toString()) {\r\n                    row = updatedRow;\r\n                }\r\n                return row;\r\n            })\r\n        );\r\n        if (updateRowData) {\r\n            updateRowData(updatedRow);\r\n        }\r\n    };\r\n\r\n    //Gets triggered when one row item is deleted\r\n    const deleteRowFromGrid = (original) => {\r\n        setItems((old) =>\r\n            old.filter((row) => {\r\n                return row !== original;\r\n            })\r\n        );\r\n        if (deleteRowData) {\r\n            deleteRowData(original);\r\n        }\r\n    };\r\n\r\n    //Extract/add and modify required data from user configured columns and expand columns\r\n    let processedColumns = extractColumns(columns, searchColumn, isDesktop, updateRowInGrid);\r\n    let additionalColumn = extractAdditionalColumn(columnToExpand, isDesktop, updateRowInGrid);\r\n\r\n    //Create memoized column, to be used by grid component\r\n    const gridColumns = useMemo(() => processedColumns, []);\r\n\r\n    //Local variable for keeping the expanded row rendering method\r\n    let renderExpandedContent = additionalColumn ? additionalColumn.displayCell : null;\r\n\r\n    //#region - Check if data is hidden or not and display data in rendered section\r\n    //A custom tag created to be used by developer to bind data into the expanded component (if data chooser is selected)\r\n    const DisplayTag = (props) => {\r\n        console.log(additionalColumn);\r\n        const { cellKey } = props;\r\n        if (additionalColumn && cellKey) {\r\n            if (checkInnerCells(additionalColumn, cellKey)) {\r\n                return <Fragment> {props.children}</Fragment>;\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    //Check if data to be bind is\r\n    const checkInnerCells = (column, cellKey) => {\r\n        if (column) {\r\n            const { innerCells } = column;\r\n            if (innerCells) {\r\n                const innerCellData = innerCells.find((cell) => {\r\n                    return cell.accessor === cellKey;\r\n                });\r\n                if (innerCellData) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    //Process data to be rendered to expanded view and return that data to the render function\r\n    const displayExpandedContent = (row) => {\r\n        const { original } = row;\r\n        if (original) {\r\n            return renderExpandedContent(original, DisplayTag);\r\n        }\r\n    };\r\n    //#endregion\r\n\r\n    //Add logic for doing global search in the grid\r\n    const globalSearchLogic = (rows, columns, filterValue) => {\r\n        //Enter search logic only if rows and columns are available\r\n        if (filterValue && processedColumns.length > 0) {\r\n            //convert user searched text to lower case\r\n            const searchText = filterValue.toLowerCase();\r\n            //Loop through all rows\r\n            return rows.filter((row) => {\r\n                //Find original data value of each row\r\n                const { original } = row;\r\n                //Return value of the filter method\r\n                let returnValue = false;\r\n                //Loop through all column values for each row\r\n                processedColumns.map((column) => {\r\n                    //Do search for each column\r\n                    returnValue = returnValue || searchColumn(column, original, searchText);\r\n                });\r\n                return returnValue;\r\n            });\r\n        }\r\n        return rows;\r\n    };\r\n\r\n    //Add logic to calculate height of each row, based on the content of  or more columns\r\n    //This can be used only if developer using the component has not passed a function to calculate row height\r\n    const calculateDefaultRowHeight = (row, gridColumns) => {\r\n        //Minimum height for each row\r\n        let rowHeight = 50;\r\n        if (gridColumns && gridColumns.length > 0 && row) {\r\n            //Get properties of a row\r\n            const { original, isExpanded } = row;\r\n            //Find the column with maximum width configured, from grid columns list\r\n            const columnWithMaxWidth = [...gridColumns].sort((a, b) => {\r\n                return b.width - a.width;\r\n            })[0];\r\n            //Get column properties including the user resized column width (totalFlexWidth)\r\n            const { id, width, totalFlexWidth } = columnWithMaxWidth;\r\n            //Get row value of that column\r\n            const rowValue = original[id];\r\n            if (rowValue) {\r\n                //Find the length of text of data in that column\r\n                const textLength = Object.values(rowValue).join(\",\").length;\r\n                //This is a formula that was created for the test data used.\r\n                rowHeight = rowHeight + Math.ceil((80 * textLength) / totalFlexWidth);\r\n                const widthVariable = totalFlexWidth > width ? totalFlexWidth - width : width - totalFlexWidth;\r\n                rowHeight = rowHeight + widthVariable / 1000;\r\n            }\r\n            //Add logic to increase row height if row is expanded\r\n            if (isExpanded && additionalColumn) {\r\n                //Increase height based on the number of inner cells in additional columns\r\n                rowHeight =\r\n                    rowHeight +\r\n                    (additionalColumn.innerCells && additionalColumn.innerCells.length > 0\r\n                        ? additionalColumn.innerCells.length * 35\r\n                        : 35);\r\n            }\r\n        }\r\n        return rowHeight;\r\n    };\r\n\r\n    //#region - Group sorting logic\r\n    //Function to return sorting logic based on the user selected order of sort\r\n    const compareValues = (compareOrder, v1, v2) => {\r\n        if (compareOrder === \"Ascending\") {\r\n            return v1 > v2 ? 1 : v1 < v2 ? -1 : 0;\r\n        } else {\r\n            return v1 < v2 ? 1 : v1 > v2 ? -1 : 0;\r\n        }\r\n    };\r\n    //Function to return sorted data\r\n    const getSortedData = (originalData) => {\r\n        return originalData.sort(function (x, y) {\r\n            let compareResult = 0;\r\n            groupSortOptions.forEach((option) => {\r\n                const { sortBy, sortOn, order } = option;\r\n                const newResult =\r\n                    sortOn === \"value\"\r\n                        ? compareValues(order, x[sortBy], y[sortBy])\r\n                        : compareValues(order, x[sortBy][sortOn], y[sortBy][sortOn]);\r\n                compareResult = compareResult || newResult;\r\n            });\r\n            return compareResult;\r\n        });\r\n    };\r\n    //#endregion\r\n\r\n    //Gets called when group sort is applied or cleared\r\n    const doGroupSort = (sortOptions) => {\r\n        setGroupSortOptions(sortOptions);\r\n    };\r\n\r\n    //Gets called when page scroll reaches the bottom of the grid.\r\n    //Fetch the next set of data and append it to the variable holding grid data and update the state value.\r\n    //Also update the hasNextPage state value to False once API response is empty, to avoid unwanted API calls.\r\n    const loadNextPage = (...args) => {\r\n        const newIndex = args && args.length > 0 ? args[0] : -1;\r\n        if (newIndex >= 0 && hasNextPage) {\r\n            setIsLoading(true);\r\n            setIsNextPageLoading(true);\r\n            fetchData(newIndex).then((data) => {\r\n                setIsLoading(false);\r\n                setHasNextPage(data && data.length > 0);\r\n                setIsNextPageLoading(false);\r\n                setItems(items.concat(data));\r\n            });\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        //Add duplicate copy of inner cells to be used for data chooser\r\n        processedColumns.map((column) => {\r\n            if (column.innerCells) {\r\n                column.originalInnerCells = column.innerCells;\r\n            }\r\n            return column;\r\n        });\r\n        if (additionalColumn) {\r\n            const { innerCells } = additionalColumn;\r\n            if (innerCells) {\r\n                additionalColumn.originalInnerCells = innerCells;\r\n            }\r\n        }\r\n\r\n        //Make API call to fetch initial set of data.\r\n        setIsLoading(true);\r\n        fetchData(0).then((data) => {\r\n            setIsLoading(false);\r\n            setItems(data);\r\n        });\r\n    }, []);\r\n\r\n    //Sort the data based on the user selected group sort optipons\r\n    const data = getSortedData([...items]);\r\n\r\n    return (\r\n        <div className=\"grid-component-container\">\r\n            {data && data.length > 0 && processedColumns && processedColumns.length > 0 ? (\r\n                <div>\r\n                    <Customgrid\r\n                        title={title}\r\n                        gridHeight={gridHeight}\r\n                        gridWidth={gridWidth}\r\n                        managableColumns={gridColumns}\r\n                        originalColumns={gridColumns}\r\n                        additionalColumn={additionalColumn}\r\n                        data={data}\r\n                        getRowEditOverlay={getRowEditOverlay}\r\n                        updateRowInGrid={updateRowInGrid}\r\n                        deleteRowFromGrid={deleteRowFromGrid}\r\n                        globalSearchLogic={globalSearchLogic}\r\n                        selectBulkData={selectBulkData}\r\n                        calculateRowHeight={\r\n                            calculateRowHeight && typeof calculateRowHeight === \"function\"\r\n                                ? calculateRowHeight\r\n                                : calculateDefaultRowHeight\r\n                        }\r\n                        isExpandContentAvailable={typeof renderExpandedContent === \"function\"}\r\n                        displayExpandedContent={displayExpandedContent}\r\n                        hasNextPage={hasNextPage}\r\n                        isNextPageLoading={isNextPageLoading}\r\n                        loadNextPage={loadNextPage}\r\n                        doGroupSort={doGroupSort}\r\n                    />\r\n                    {isNextPageLoading ? (\r\n                        <div id=\"loader\" className=\"background\">\r\n                            <div className=\"dots container\">\r\n                                <span></span>\r\n                                <span></span>\r\n                                <span></span>\r\n                            </div>\r\n                        </div>\r\n                    ) : null}\r\n                </div>\r\n            ) : (\r\n                <h2 style={{ textAlign: \"center\", marginTop: \"70px\" }}>\r\n                    {isLoading ? \"Initializing Grid...\" : \"Invalid Data or Column Configurations\"}\r\n                </h2>\r\n            )}\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default Grid;\r\n"],"names":["CellDisplayAndEdit","memo","row","columns","updateRowInGrid","column","isEditOpen","setIsEditOpen","useState","editedRowValue","setEditedRowValue","id","closeEdit","openEdit","getUpdatedRowValue","value","saveEdit","original","DisplayTag","props","cellKey","columnKey","selectedColumn","find","col","accessor","checkInnerCells","React","children","innerCells","innerCellData","cell","originalRowValue","cellDisplayContent","displayCell","cellEditContent","editCell","extractColumns","searchColumn","isDesktop","filteredColumns","filter","onlyInTablet","onlyInDesktop","modifiedColumns","forEach","index","sortValue","isInnerCellsPresent","length","columnId","Cell","disableSortBy","sortType","rowA","rowB","disableFilters","rows","filterValue","searchText","toLowerCase","push","extractAdditionalColumn","additionalColumn","RowSelector","forwardRef","indeterminate","rest","ref","checkValue","setCheckValue","defaultRef","useRef","resolvedRef","onChange","useEffect","current","DefaultColumnFilter","setFilter","e","target","undefined","GlobalFilter","globalFilter","setGlobalFilter","setValue","useAsyncDebounce","require","RowOptions","bindRowEditOverlay","bindRowDeleteOverlay","isRowOptionsOpen","setRowOptionsOpen","openRowOptionsOverlay","closeRowOptionsOverlay","openRowEditOverlay","openDeleteOverlay","RowEdit","RowPin","RowDelete","RowEditOverLay","isRowExpandEnabled","getRowEditOverlay","closeRowEditOverlay","saveRowEdit","rowEditContent","RowDeleteOverLay","closeRowDeleteOverlay","deleteRowFromGrid","deleteRow","ItemTypes","COLUMN","ColumnItem","Header","moveColumn","findColumn","originalInnerCells","isInnerCellSelected","selectInnerCells","originalIndex","isDragging","drag","useDrag","item","type","collect","monitor","end","dropResult","droppedId","getItem","didDrop","drop","useDrop","accept","canDrop","hover","draggedId","overIndex","opacity","node","cursor","map","ColumnsList","updateColumnsInState","columnsToManage","atIndex","update","$splice","c","indexOf","display","flexWrap","ColumnReordering","isManageColumnOpen","toggleManageColumns","originalColumns","isExpandContentAvailable","additionalColumnHeader","getRemarksColumnIfAvailable","concatedOriginalColumns","concat","managedColumns","setManagedColumns","searchedColumns","setSearchedColumns","remarksColumnToManage","setRemarksColumnToManage","isErrorDisplayed","setIsErrorDisplayed","HTML5toTouch","backends","backend","HTML5Backend","TouchBackend","options","enableMouseEvents","preview","transition","TouchTransition","filterColumnsList","event","includes","columnList","columnHeader","isItemPresentInList","list","headerValue","filteredList","isCheckboxSelected","header","columnListToSearch","findIndexOfItem","columnsList","indexOfColumnToAdd","findIndex","selectAllColumns","currentTarget","checked","selectSingleColumn","itemToAdd","prevItemIndex","newColumnsList","splice","findAndSelectInnerCells","stateColumnList","setStateColumnList","dataset","columnheader","selectRemarksInnerCells","doColumnUpdate","updateColumnStructure","resetInnerCells","resetColumnUpdate","marginLeft","color","MultiBackend","SORT_ITEM","SortItem","sortOption","moveSort","findSort","updateSingleSortingOption","copySortOption","deleteSortOption","getInncerCellsOfColumn","columnAccessor","changeSortByOptions","newSortByValue","innerCellsList","order","changeSortOnOptions","newSortOnValue","sortBy","changeSortOrderOptions","newSortOrderValue","sortOn","copySort","deleteSort","orgItem","innerCellItem","innerCellIndex","SortCopy","SortDelete","SortingList","updateSortingOptions","sortOptions","sortId","sort","GroupSort","isGroupSortOverLayOpen","toggleGroupSortOverLay","applyGroupSort","sortingOrders","defaultSortingOption","setSortOptions","sortingOptions","addSortingOptions","clearSortingOptions","sortIndex","sortByValue","sortOnValue","sortOrder","newOptionsList","slice","newSortingOption","updatedSortOptions","option","newOption","applySort","isError","optionIndex","duplicateSort","opt","optIndex","ExportData","isExportOverlayOpen","toggleExportDataOverlay","updatedColumns","downloadTypes","setDownloadTypes","warning","setWarning","isDownload","exportRowData","filteredRow","filteredRowValues","rowDetails","keys","Object","getOwnPropertyNames","filteredColumnVal","rowFilteredValues","key","columnName","columnValue","values","toString","replace","arrObj","downloadPDF","downloadXLSFile","downloadCSVFile","unit","size","orientation","doc","jsPDF","setFontSize","title","headers","content","startY","head","body","text","autoTable","save","filteredRowValue","fileType","fileExtension","fileName","ws","XLSX","json_to_sheet","wb","Sheets","data","SheetNames","excelBuffer","bookType","Blob","FileSaver","changeDownloadType","textAlign","listRef","createRef","Customgrid","gridHeight","gridWidth","managableColumns","globalSearchLogic","selectBulkData","calculateRowHeight","displayExpandedContent","hasNextPage","isNextPageLoading","loadNextPage","doGroupSort","setColumns","setIsRowExpandEnabled","itemCount","loadMoreItems","isItemLoaded","isFilterOpen","setFilterOpen","toggleColumnFilter","isRowEditOverlyOpen","setIsRowEditOverlyOpen","editedRowData","setEditedRowData","rowValue","isRowDeleteOverlyOpen","setIsRowDeleteOverlyOpen","deletedRowData","setDeletedRowData","setGroupSortOverLay","setManageColumnOpen","newColumnStructure","remarksColumn","setIsExportOverlayOpen","defaultColumn","useMemo","Filter","getTableProps","getTableBodyProps","headerGroups","prepareRow","selectedFlatRows","state","useTable","autoResetFilters","autoResetGlobalFilter","autoResetSortBy","autoResetExpanded","autoResetSelectedRows","useFilters","useGlobalFilter","useSortBy","useExpanded","useRowSelect","useFlexLayout","useResizeColumns","hooks","allColumns","disableResizing","minWidth","width","maxWidth","getToggleAllRowsSelectedProps","getToggleRowSelectedProps","getToggleRowExpandedProps","isExpanded","bulkSelector","resetAfterIndex","RenderRow","useCallback","style","getRowProps","cells","getCellProps","render","RowEditOverlay","height","overflowX","overflowY","headerGroup","getHeaderGroupProps","getHeaderProps","getSortByToggleProps","isSorted","isSortedDesc","canResize","getResizerProps","onItemsRendered","List","Grid","columnToExpand","fetchData","updateRowData","deleteRowData","window","innerWidth","setHasNextPage","setIsNextPageLoading","isLoading","setIsLoading","items","setItems","groupSortOptions","setGroupSortOptions","isValuePresent","rowAccessorValue","dataAccessor","updatedRow","old","entries","processedColumns","gridColumns","renderExpandedContent","console","log","returnValue","calculateDefaultRowHeight","rowHeight","columnWithMaxWidth","a","b","totalFlexWidth","textLength","join","Math","ceil","widthVariable","compareValues","compareOrder","v1","v2","getSortedData","originalData","x","y","compareResult","newResult","args","newIndex","then","marginTop"],"mappings":"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"}