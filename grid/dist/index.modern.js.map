{"version":3,"file":"index.modern.js","sources":["../src/Functions/RowSelector.js","../src/Functions/DefaultColumnFilter.js","../src/Functions/GlobalFilter.js","../src/Images/RowDelete.svg","../src/Images/RowEdit.svg","../src/Images/RowPin.png","../src/Functions/RowOptions.js","../src/Overlays/managecolumns/ItemTypes.js","../src/Overlays/managecolumns/columnItem.js","../src/Overlays/managecolumns/columnsList.js","../src/Overlays/managecolumns/index.js","../src/Customgrid.js","../src/index.js"],"sourcesContent":["import React, { forwardRef, useRef, useEffect, useState, memo } from \"react\";\r\n\r\nconst RowSelector = memo(\r\n    forwardRef(({ indeterminate, ...rest }, ref) => {\r\n        const [checkValue, setCheckValue] = useState(indeterminate);\r\n        const defaultRef = useRef();\r\n        const resolvedRef = ref || defaultRef;\r\n        const onChange = () => {\r\n            setCheckValue(!indeterminate);\r\n        };\r\n        useEffect(() => {\r\n            resolvedRef.current.indeterminate = indeterminate;\r\n        }, [resolvedRef, indeterminate]);\r\n        return (\r\n            <div className=\"check-wrap\">\r\n                <input type=\"checkbox\" checked={checkValue} onChange={onChange} ref={resolvedRef} {...rest} />\r\n            </div>\r\n        );\r\n    })\r\n);\r\n\r\nexport default RowSelector;\r\n","import React, { memo } from \"react\";\r\n\r\nconst DefaultColumnFilter = memo(({ column: { filterValue, setFilter } }) => {\r\n    return (\r\n        <input\r\n            className=\"txt\"\r\n            value={filterValue || \"\"}\r\n            onChange={(e) => {\r\n                setFilter(e.target.value || undefined);\r\n            }}\r\n            placeholder=\"Search\"\r\n        />\r\n    );\r\n});\r\n\r\nexport default DefaultColumnFilter;\r\n","import React, { memo, useState } from \"react\";\r\nimport { useAsyncDebounce } from \"react-table\";\r\n\r\nconst GlobalFilter = memo(({ globalFilter, setGlobalFilter }) => {\r\n    const [value, setValue] = useState(globalFilter);\r\n\r\n    const onChange = useAsyncDebounce((value) => {\r\n        setGlobalFilter(value || undefined);\r\n    }, 200);\r\n\r\n    return (\r\n        <div className=\"txt-wrap\">\r\n            <input\r\n                type=\"text\"\r\n                value={value || \"\"}\r\n                onChange={(e) => {\r\n                    setValue(e.target.value);\r\n                    onChange(e.target.value);\r\n                }}\r\n                className=\"txt\"\r\n                placeholder=\"Search\"\r\n            />\r\n            <i className=\"fa fa-search fa-6\" aria-hidden=\"true\"></i>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default GlobalFilter;\r\n","/* loaded by smart-asset */\nexport default require(\"./RowDelete~RKolkpAF.svg\")","/* loaded by smart-asset */\nexport default require(\"./RowEdit~BuKwAcSl.svg\")","/* loaded by smart-asset */\nexport default require(\"./RowPin~qQRdvcXq.png\")","import React, { useState, memo } from \"react\";\r\nimport ClickAwayListener from \"react-click-away-listener\";\r\nimport RowDelete from \"../Images/RowDelete.svg\";\r\nimport RowEdit from \"../Images/RowEdit.svg\";\r\nimport RowPin from \"../Images/RowPin.png\";\r\n\r\nconst RowOptions = memo((props) => {\r\n    const { row, DeletePopUpOverLay, deleteRowFromGrid } = props;\r\n\r\n    const [isRowOptionsOpen, setRowOptionsOpen] = useState(false);\r\n    const [isDeleteOverlayOpen, setDeleteOverlayOpen] = useState(false);\r\n\r\n    const openRowOptionsOverlay = () => {\r\n        setRowOptionsOpen(true);\r\n    };\r\n\r\n    const closeRowOptionsOverlay = () => {\r\n        setRowOptionsOpen(false);\r\n    };\r\n\r\n    const openDeleteOverlay = () => {\r\n        setRowOptionsOpen(false);\r\n        setDeleteOverlayOpen(true);\r\n    };\r\n\r\n    const closeDeleteOverlay = () => {\r\n        setDeleteOverlayOpen(false);\r\n    };\r\n\r\n    const deleteRow = () => {\r\n        deleteRowFromGrid(row);\r\n    };\r\n\r\n    return (\r\n        <div className=\"row-options-edit-wrap\">\r\n            <span className=\"icon-row-options\" onClick={openRowOptionsOverlay}>\r\n                <i></i>\r\n                <i></i>\r\n                <i></i>\r\n            </span>\r\n            {isRowOptionsOpen ? (\r\n                <div className={`row-options-edit ${isRowOptionsOpen ? \"open\" : \"close\"}`}>\r\n                    <ul>\r\n                        <li>\r\n                            <span>\r\n                                <i>\r\n                                    <img src={RowEdit} alt=\"cargo\" />\r\n                                </i>\r\n                                <span>Edit</span>\r\n                            </span>\r\n                        </li>\r\n                        <li>\r\n                            <span>\r\n                                <i>\r\n                                    <img src={RowPin} alt=\"cargo\" width=\"15\" height=\"15\" />\r\n                                </i>\r\n                                <span>Pin This row</span>\r\n                            </span>\r\n                        </li>\r\n                        <li>\r\n                            <span onClick={openDeleteOverlay}>\r\n                                <i>\r\n                                    <img src={RowDelete} alt=\"cargo\" />\r\n                                </i>\r\n                                <span>Delete</span>\r\n                            </span>\r\n                        </li>\r\n                    </ul>\r\n                    <span className=\"close\" onClick={closeRowOptionsOverlay}>\r\n                        <i className=\"fa fa-close\"></i>\r\n                    </span>\r\n                </div>\r\n            ) : null}\r\n            {isDeleteOverlayOpen ? <DeletePopUpOverLay closeDeleteOverlay={closeDeleteOverlay} deleteRow={deleteRow} /> : null}\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default RowOptions;\r\n","export const ItemTypes = {\r\n    COLUMN: \"column\"\r\n};\r\n","import React from \"react\";\r\nimport { useDrag, useDrop } from \"react-dnd\";\r\nimport { ItemTypes } from \"./ItemTypes\";\r\n\r\nconst ColumnItem = ({ id, name, moveColumn, findColumn, innerCells }) => {\r\n    const originalIndex = findColumn(id).index;\r\n\r\n    const [{ isDragging }, drag] = useDrag({\r\n        item: { type: ItemTypes.COLUMN, id, originalIndex },\r\n        collect: (monitor) => ({\r\n            isDragging: monitor.isDragging()\r\n        }),\r\n        end: (dropResult, monitor) => {\r\n            const { id: droppedId, originalIndex } = monitor.getItem();\r\n            const didDrop = monitor.didDrop();\r\n            if (!didDrop) {\r\n                moveColumn(droppedId, originalIndex);\r\n            }\r\n        }\r\n    });\r\n\r\n    const [, drop] = useDrop({\r\n        accept: ItemTypes.COLUMN,\r\n        canDrop: () => false,\r\n        hover({ id: draggedId }) {\r\n            if (draggedId !== id) {\r\n                const { index: overIndex } = findColumn(id);\r\n                moveColumn(draggedId, overIndex);\r\n            }\r\n        }\r\n    });\r\n\r\n    const opacity = isDragging ? 0.1 : 1;\r\n\r\n    return (\r\n        <div style={{ opacity }}>\r\n            <div className=\"column__reorder\">\r\n                <div ref={(node) => drag(drop(node))} style={{ cursor: \"move\" }} className=\"\">\r\n                    <i className=\"fa fa-align-justify\" aria-hidden=\"true\"></i>\r\n                </div>\r\n                <div className=\"\">{name}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ColumnItem;\r\n","import React, { useState } from \"react\";\r\nimport { useDrop } from \"react-dnd\";\r\nimport update from \"immutability-helper\";\r\nimport { ItemTypes } from \"./ItemTypes\";\r\nimport ColumnItem from \"./columnItem\";\r\n\r\nconst ColumnsList = (props) => {\r\n\r\n    const moveColumn = (columnId, atIndex) => {\r\n        const { column, index } = findColumn(columnId);\r\n        props.updateColumnsInState(\r\n            update(props.columnsToManage, {\r\n                $splice: [\r\n                    [index, 1],\r\n                    [atIndex, 0, column]\r\n                ]\r\n            })\r\n        );\r\n    };\r\n\r\n    const findColumn = (columnId) => {\r\n        const column = props.columnsToManage.filter((c) => `${c.columnId}` === columnId)[0];\r\n        return {\r\n            column,\r\n            index: props.columnsToManage.indexOf(column)\r\n        };\r\n    };\r\n\r\n    const [, drop] = useDrop({ accept: ItemTypes.COLUMN });\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div ref={drop} style={{ display: \"flex\", flexWrap: \"wrap\" }}>\r\n                {props.columnsToManage.map((column, index) => {\r\n                    return (\r\n                        <ColumnItem\r\n                            key={index}\r\n                            id={`${column.columnId}`}\r\n                            name={`${column.Header}`}\r\n                            moveColumn={moveColumn}\r\n                            findColumn={findColumn}\r\n                            innerCells={column.innerCells}\r\n                        />\r\n                    );\r\n                })}\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default ColumnsList;\r\n","import React, { memo, useState, useEffect } from \"react\";\r\nimport { DndProvider } from \"react-dnd\";\r\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\r\nimport { TouchBackend } from \"react-dnd-touch-backend\";\r\nimport MultiBackend, { TouchTransition } from \"react-dnd-multi-backend\";\r\nimport ColumnsList from \"./columnsList\";\r\n\r\nconst ColumnReordering = memo((props) => {\r\n    const { isManageColumnOpen, toggleManageColumns, originalColumns } = props;\r\n\r\n    const [managedColumns, setManagedColumns] = useState(originalColumns);\r\n\r\n    const HTML5toTouch = {\r\n        backends: [\r\n            {\r\n                backend: HTML5Backend\r\n            },\r\n            {\r\n                backend: TouchBackend,\r\n                options: { enableMouseEvents: true },\r\n                preview: true,\r\n                transition: TouchTransition\r\n            }\r\n        ]\r\n    };\r\n\r\n    const updateColumnsInState = (columns) => {\r\n        setManagedColumns(columns);\r\n    };\r\n\r\n    const isCheckboxSelected = (header) => {\r\n        if (header === \"Select All\") {\r\n            return managedColumns.length === originalColumns.length;\r\n        } else {\r\n            const selectedColumn = managedColumns.filter((column) => {\r\n                return column.Header === header;\r\n            });\r\n            return selectedColumn && selectedColumn.length > 0;\r\n        }\r\n    };\r\n\r\n    const selectAllColumns = (event) => {\r\n        if (event.currentTarget.checked) {\r\n            setManagedColumns(originalColumns);\r\n        } else {\r\n            setManagedColumns([]);\r\n        }\r\n    };\r\n\r\n    const selectSingleColumn = (event) => {\r\n        const { currentTarget } = event;\r\n        const { checked, value } = currentTarget;\r\n\r\n        //If column checkbox is checked\r\n        if (checked) {\r\n            //Find the index of selected column from original column array and also find the user selected column\r\n            let indexOfColumnToAdd = originalColumns.findIndex((column) => {\r\n                return column.Header == value;\r\n            });\r\n            const itemToAdd = originalColumns[indexOfColumnToAdd];\r\n\r\n            //Loop through the managedColumns array to find the position of the column that is present previous to the user selected column\r\n            //Find index of that previous column and push the new column to add in that position\r\n            let prevItemIndex = -1;\r\n            while (indexOfColumnToAdd > 0 && prevItemIndex === -1) {\r\n                prevItemIndex = managedColumns.findIndex((column) => {\r\n                    return column.Header == originalColumns[indexOfColumnToAdd - 1].Header;\r\n                });\r\n                indexOfColumnToAdd = indexOfColumnToAdd - 1;\r\n            }\r\n\r\n            const newColumnsList = managedColumns.slice(0); //Copying state value\r\n            newColumnsList.splice(prevItemIndex + 1, 0, itemToAdd);\r\n            setManagedColumns(newColumnsList);\r\n        } else {\r\n            setManagedColumns(\r\n                managedColumns.filter((column) => {\r\n                    return column.Header !== value;\r\n                })\r\n            );\r\n        }\r\n    };\r\n\r\n    const doColumnUpdate = () => {\r\n        props.updateColumnStructure(managedColumns);\r\n    };\r\n\r\n    const resetColumnUpdate = () => {\r\n        setManagedColumns(originalColumns);\r\n        props.updateColumnStructure(originalColumns);\r\n    };\r\n\r\n    if (isManageColumnOpen) {\r\n        return (\r\n            <div className=\"columns--grid\">\r\n                <div className=\"column__grid\">\r\n                    <div className=\"column__chooser\">\r\n                        <div className=\"column__header\">\r\n                            <div className=\"\">\r\n                                <strong>Column Chooser</strong>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"column__body\">\r\n                            <div>\r\n                                <input type=\"text\" placeholder=\"Search column\" className=\"custom__ctrl\"></input>\r\n                            </div>\r\n                            <div className=\"column__selectAll\">\r\n                                <div className=\"column__checkbox\">\r\n                                    <input\r\n                                        type=\"checkbox\"\r\n                                        value=\"Select All\"\r\n                                        checked={isCheckboxSelected(\"Select All\")}\r\n                                        onChange={selectAllColumns}\r\n                                    ></input>\r\n                                </div>\r\n                                <div className=\"column__selectTxt\">Select All</div>\r\n                            </div>\r\n                            {originalColumns.map((column, index) => {\r\n                                return (\r\n                                    <div className=\"column__wrap\" key={index}>\r\n                                        <div className=\"column__checkbox\">\r\n                                            <input\r\n                                                type=\"checkbox\"\r\n                                                value={column.Header}\r\n                                                checked={isCheckboxSelected(column.Header)}\r\n                                                onChange={selectSingleColumn}\r\n                                            ></input>\r\n                                        </div>\r\n                                        <div className=\"column__txt\">{column.Header}</div>\r\n                                    </div>\r\n                                );\r\n                            })}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"column__settings\">\r\n                        <div className=\"column__header\">\r\n                            <div className=\"column__headerTxt\">\r\n                                <strong>Column Setting</strong>\r\n                            </div>\r\n                            <div className=\"column__close\" onClick={toggleManageColumns}>\r\n                                <i className=\"fa fa-times\" aria-hidden=\"true\"></i>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"column__body\">\r\n                            <DndProvider backend={MultiBackend} options={HTML5toTouch}>\r\n                                <ColumnsList columnsToManage={managedColumns} updateColumnsInState={updateColumnsInState} />\r\n                            </DndProvider>\r\n                        </div>\r\n                        <div className=\"column__footer\">\r\n                            <div className=\"column__btns\">\r\n                                <button className=\"btns\" onClick={resetColumnUpdate}>\r\n                                    Reset\r\n                                </button>\r\n                                <button className=\"btns\" onClick={toggleManageColumns}>\r\n                                    Cancel\r\n                                </button>\r\n                                <button className=\"btns btns__save\" onClick={doColumnUpdate}>\r\n                                    Save\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    } else {\r\n        return <div></div>;\r\n    }\r\n});\r\n\r\nexport default ColumnReordering;\r\n","import React, { useCallback, useState, memo, useEffect, createRef, useMemo } from \"react\";\r\nimport {\r\n    useTable,\r\n    useResizeColumns,\r\n    useFlexLayout,\r\n    useRowSelect,\r\n    useSortBy,\r\n    useFilters,\r\n    useGlobalFilter,\r\n    useExpanded\r\n} from \"react-table\";\r\nimport { VariableSizeList as List } from \"react-window\";\r\nimport AutoSizer from \"react-virtualized-auto-sizer\";\r\nimport InfiniteLoader from \"react-window-infinite-loader\";\r\nimport RowSelector from \"./Functions/RowSelector\";\r\nimport DefaultColumnFilter from \"./Functions/DefaultColumnFilter\";\r\nimport GlobalFilter from \"./Functions/GlobalFilter\";\r\nimport RowOptions from \"./Functions/RowOptions\";\r\nimport ColumnReordering from \"./Overlays/managecolumns\";\r\n\r\nconst listRef = createRef(null);\r\n\r\nconst Customgrid = memo((props) => {\r\n    const {\r\n        title,\r\n        gridHeight,\r\n        gridWidth,\r\n        managableColumns,\r\n        originalColumns,\r\n        data,\r\n        deletePopUpOverLay,\r\n        deleteRowFromGrid,\r\n        globalSearchLogic,\r\n        updateCellData,\r\n        selectBulkData,\r\n        calculateRowHeight,\r\n        renderExpandedContent,\r\n        hasNextPage,\r\n        isNextPageLoading,\r\n        loadNextPage\r\n    } = props;\r\n\r\n    //Local state value for holding columns configuration\r\n    const [columns, setColumns] = useState(managableColumns);\r\n\r\n    //Display error message if data or columns configuration is missing.\r\n    if (!(data && data.length > 0) || !(columns && columns.length > 0)) {\r\n        return <h2 style={{ marginTop: \"50px\", textAlign: \"center\" }}>Invalid Data or Columns Configuration</h2>;\r\n    }\r\n\r\n    //Variables used for handling infinite loading\r\n    const itemCount = hasNextPage ? data.length + 1 : data.length;\r\n    const loadMoreItems = isNextPageLoading ? () => {} : loadNextPage ? loadNextPage : () => {};\r\n    const isItemLoaded = (index) => !hasNextPage || index < data.length;\r\n\r\n    //Local state value for checking if column filter is open/closed\r\n    const [isFilterOpen, setFilterOpen] = useState(false);\r\n\r\n    //Toggle column filter state value based on UI clicks\r\n    const toggleColumnFilter = () => {\r\n        setFilterOpen(!isFilterOpen);\r\n    };\r\n\r\n    //Local state value for hiding/unhiding column management overlay\r\n    const [isManageColumnOpen, setManageColumnOpen] = useState(false);\r\n\r\n    //Toggle column manage overlay show/hide state value based on UI clicks\r\n    const toggleManageColumns = () => {\r\n        setManageColumnOpen(!isManageColumnOpen);\r\n    };\r\n\r\n    //Callback method from column manage overlay to update the column structure of the grid\r\n    const updateColumnStructure = (newColumnStructure) => {\r\n        setColumns(newColumnStructure);\r\n        toggleManageColumns();\r\n    };\r\n\r\n    //Column filter added for all columns by default\r\n    const defaultColumn = useMemo(\r\n        () => ({\r\n            Filter: DefaultColumnFilter\r\n        }),\r\n        []\r\n    );\r\n\r\n    //Initialize react-table instance with the values received through properties\r\n    const {\r\n        getTableProps,\r\n        getTableBodyProps,\r\n        headerGroups,\r\n        rows,\r\n        prepareRow,\r\n        selectedFlatRows,\r\n        state,\r\n        setGlobalFilter\r\n    } = useTable(\r\n        {\r\n            columns,\r\n            data,\r\n            defaultColumn,\r\n            updateCellData,\r\n            globalFilter: (rows, columns, filterValue) => {\r\n                //Call global search function defined in application, if it is present\r\n                if (globalSearchLogic && typeof globalSearchLogic === \"function\") {\r\n                    return globalSearchLogic(rows, columns, filterValue);\r\n                } else {\r\n                    return rows;\r\n                }\r\n            },\r\n            autoResetFilters: false,\r\n            autoResetGlobalFilter: false,\r\n            autoResetSortBy: false,\r\n            autoResetExpanded: false,\r\n            autoResetSelectedRows: false\r\n        },\r\n        useFilters,\r\n        useGlobalFilter,\r\n        useSortBy,\r\n        useExpanded,\r\n        useRowSelect,\r\n        useFlexLayout,\r\n        useResizeColumns,\r\n        (hooks) => {\r\n            //Add checkbox for all rows in grid, with different properties for header row and body rows\r\n            hooks.allColumns.push((columns) => [\r\n                {\r\n                    id: \"selection\",\r\n                    columnId: \"column_custom_0\",\r\n                    disableResizing: true,\r\n                    disableFilters: true,\r\n                    disableSortBy: true,\r\n                    minWidth: 35,\r\n                    width: 35,\r\n                    maxWidth: 35,\r\n                    Header: ({ getToggleAllRowsSelectedProps }) => <RowSelector {...getToggleAllRowsSelectedProps()} />,\r\n                    Cell: ({ row }) => <RowSelector {...row.getToggleRowSelectedProps()} />\r\n                },\r\n                ...columns,\r\n                {\r\n                    id: \"custom\",\r\n                    columnId: \"column_custom_1\",\r\n                    disableResizing: true,\r\n                    disableFilters: true,\r\n                    disableSortBy: true,\r\n                    minWidth: 35,\r\n                    width: 35,\r\n                    maxWidth: 35,\r\n                    Cell: ({ row }) => {\r\n                        return (\r\n                            <div className=\"action\">\r\n                                <RowOptions\r\n                                    row={row}\r\n                                    DeletePopUpOverLay={deletePopUpOverLay}\r\n                                    deleteRowFromGrid={deleteRowFromGrid}\r\n                                />\r\n                                <span className=\"expander\" {...row.getToggleRowExpandedProps()}>\r\n                                    {row.isExpanded ? (\r\n                                        <i className=\"fa fa-angle-up\" aria-hidden=\"true\"></i>\r\n                                    ) : (\r\n                                        <i className=\"fa fa-angle-down\" aria-hidden=\"true\"></i>\r\n                                    )}\r\n                                </span>\r\n                            </div>\r\n                        );\r\n                    }\r\n                }\r\n            ]);\r\n        }\r\n    );\r\n\r\n    //Export selected row data and pass it to the callback method\r\n    const bulkSelector = () => {\r\n        if (selectBulkData) {\r\n            selectBulkData(selectedFlatRows);\r\n        }\r\n    };\r\n\r\n    //This code is to handle the row height calculation while expanding a row or resizing a column\r\n    useEffect(() => {\r\n        if (listRef && listRef.current) {\r\n            listRef.current.resetAfterIndex(0, true);\r\n        }\r\n    });\r\n\r\n    //Render each row and cells in each row, using attributes from react window list.\r\n    const RenderRow = useCallback(\r\n        ({ index, style }) => {\r\n            if (isItemLoaded(index)) {\r\n                const row = rows[index];\r\n                prepareRow(row);\r\n                return (\r\n                    <div {...row.getRowProps({ style })} className=\"table-row tr\">\r\n                        <div className=\"table-row-wrap\">\r\n                            {row.cells.map((cell) => {\r\n                                return (\r\n                                    <div {...cell.getCellProps()} className=\"table-cell td\">\r\n                                        {cell.render(\"Cell\")}\r\n                                    </div>\r\n                                );\r\n                            })}\r\n                        </div>\r\n                        {/*Check if row eapand icon is clicked, and if yes, call function to bind content to the expanded region*/}\r\n                        {row.isExpanded ? (\r\n                            <div className=\"expand\">{renderExpandedContent ? renderExpandedContent(row) : null}</div>\r\n                        ) : null}\r\n                    </div>\r\n                );\r\n            }\r\n        },\r\n        [prepareRow, rows, renderExpandedContent]\r\n    );\r\n\r\n    //Render table title, global search component, button to show/hide column filter, button to export selected row data & the grid\r\n    //Use properties and methods provided by react-table\r\n    //Autosizer used for calculating grid height (don't consider window width and column resizing value changes)\r\n    //Infinite loader used for lazy loading, with the properties passed here and other values calculated at the top\r\n    //React window list is used for implementing virtualization, specifying the item count in a frame and height of each rows in it.\r\n    return (\r\n        <div className=\"wrapper\" style={{ width: gridWidth ? gridWidth : \"100%\" }}>\r\n            <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\" />\r\n            <div className=\"table-filter\">\r\n                <div className=\"results\">\r\n                    <div className=\"name\">\r\n                        <strong>{rows.length}</strong>\r\n                        <span> {title ? title : \"Rows\"}</span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"filter-utilities\">\r\n                    <ColumnReordering\r\n                        isManageColumnOpen={isManageColumnOpen}\r\n                        toggleManageColumns={toggleManageColumns}\r\n                        originalColumns={originalColumns}\r\n                        updateColumnStructure={updateColumnStructure}\r\n                    />\r\n                    <GlobalFilter globalFilter={state.globalFilter} setGlobalFilter={setGlobalFilter} />\r\n                    <div className=\"filter-icon keyword-search\" onClick={toggleColumnFilter}>\r\n                        <i className=\"fa fa-filter\" aria-hidden=\"true\"></i>\r\n                    </div>\r\n                    <div className=\"filter-icon bulk-select\" onClick={bulkSelector}>\r\n                        <i className=\"fa fa-pencil-square-o\" aria-hidden=\"true\"></i>\r\n                    </div>\r\n                    <div className=\"filter-icon manage-columns\" onClick={toggleManageColumns}>\r\n                        <i className=\"fa fa-columns\" aria-hidden=\"true\"></i>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div\r\n                className=\"tableContainer table-outer\"\r\n                style={{ height: gridHeight ? gridHeight : \"50vh\", overflowX: \"auto\", overflowY: \"hidden\" }}\r\n            >\r\n                <AutoSizer disableWidth disableResizing>\r\n                    {({ height }) => (\r\n                        <div {...getTableProps()} className=\"table\">\r\n                            <div className=\"thead table-row table-row--head\">\r\n                                {headerGroups.map((headerGroup) => (\r\n                                    <div {...headerGroup.getHeaderGroupProps()} className=\"tr\">\r\n                                        {headerGroup.headers.map((column) => (\r\n                                            <div {...column.getHeaderProps()} className=\"table-cell column-heading th\">\r\n                                                <div {...column.getSortByToggleProps()}>\r\n                                                    {column.render(\"Header\")}\r\n                                                    <span>\r\n                                                        {column.isSorted ? (\r\n                                                            column.isSortedDesc ? (\r\n                                                                <i className=\"fa fa-sort-desc\" aria-hidden=\"true\"></i>\r\n                                                            ) : (\r\n                                                                <i className=\"fa fa-sort-asc\" aria-hidden=\"true\"></i>\r\n                                                            )\r\n                                                        ) : (\r\n                                                            \"\"\r\n                                                        )}\r\n                                                    </span>\r\n                                                </div>\r\n                                                <div className={`txt-wrap column-filter ${isFilterOpen ? \"open\" : \"\"}`}>\r\n                                                    {!column.disableFilters ? column.render(\"Filter\") : null}\r\n                                                </div>\r\n                                                {column.canResize && <div {...column.getResizerProps()} className=\"resizer\" />}\r\n                                            </div>\r\n                                        ))}\r\n                                    </div>\r\n                                ))}\r\n                            </div>\r\n                            <div {...getTableBodyProps()} className=\"tbody\">\r\n                                <InfiniteLoader isItemLoaded={isItemLoaded} itemCount={itemCount} loadMoreItems={loadMoreItems}>\r\n                                    {({ onItemsRendered, ref }) => (\r\n                                        <List\r\n                                            ref={(list) => {\r\n                                                ref(list);\r\n                                                listRef.current = list;\r\n                                            }}\r\n                                            style={{ overflowX: \"hidden\" }}\r\n                                            height={height - 60}\r\n                                            itemCount={rows.length}\r\n                                            itemSize={(index) => {\r\n                                                if (calculateRowHeight && typeof calculateRowHeight === \"function\") {\r\n                                                    return calculateRowHeight(rows, index, headerGroups);\r\n                                                } else {\r\n                                                    return 70;\r\n                                                }\r\n                                            }}\r\n                                            onItemsRendered={onItemsRendered}\r\n                                            overscanCount={20}\r\n                                        >\r\n                                            {RenderRow}\r\n                                        </List>\r\n                                    )}\r\n                                </InfiniteLoader>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                </AutoSizer>\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default Customgrid;\r\n","import React, { memo, useMemo, useState, useEffect } from \"react\";\r\nimport Customgrid from \"./Customgrid\";\r\n\r\nconst Grid = memo((props) => {\r\n    const {\r\n        title,\r\n        gridHeight,\r\n        gridWidth,\r\n        columns,\r\n        fetchData,\r\n        deletePopUpOverLay,\r\n        deleteRowData,\r\n        globalSearchLogic,\r\n        updateCellData,\r\n        selectBulkData,\r\n        calculateRowHeight,\r\n        renderExpandedContent\r\n    } = props;\r\n\r\n    //Set state value for variable to check if there is anext page available\r\n    const [hasNextPage, setHasNextPage] = useState(true);\r\n    //Set state value for variable to check if the loading process is going on\r\n    const [isNextPageLoading, setIsNextPageLoading] = useState(false);\r\n    //Set state value for variable to hold grid data\r\n    const [items, setItems] = useState([]);\r\n\r\n    let processedColumns = [];\r\n    columns.forEach((column, index) => {\r\n        column.columnId = `column_${index}`;\r\n        processedColumns.push(column);\r\n    });\r\n    const gridColumns = useMemo(() => processedColumns, []);\r\n\r\n    //Gets triggered when one row item is deleted\r\n    const deleteRowFromGrid = (row) => {\r\n        const { index, original } = row;\r\n        const rowIndexToBeDeleted = index;\r\n        setItems((old) =>\r\n            old.filter((row, index) => {\r\n                return index !== rowIndexToBeDeleted;\r\n            })\r\n        );\r\n        deleteRowData(original);\r\n    };\r\n\r\n    //Gets called when page scroll reaches the bottom of the grid.\r\n    //Fetch the next set of data and append it to the variable holding grid data and update the state value.\r\n    //Also update the hasNextPage state value to False once API response is empty, to avoid unwanted API calls.\r\n    const loadNextPage = (...args) => {\r\n        const newIndex = args && args.length > 0 ? args[0] : -1;\r\n        if (newIndex >= 0 && hasNextPage) {\r\n            setIsNextPageLoading(true);\r\n            fetchData(newIndex).then((data) => {\r\n                setHasNextPage(data && data.length > 0);\r\n                setIsNextPageLoading(false);\r\n                setItems(items.concat(data));\r\n            });\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        //Make API call to fetch initial set of data.\r\n        fetchData(0).then((data) => {\r\n            setItems(data);\r\n        });\r\n    }, []);\r\n\r\n    if (items && items.length > 0) {\r\n        return (\r\n            <div>\r\n                <Customgrid\r\n                    title={title}\r\n                    gridHeight={gridHeight}\r\n                    gridWidth={gridWidth}\r\n                    managableColumns={gridColumns}\r\n                    originalColumns={gridColumns}\r\n                    data={items}\r\n                    deletePopUpOverLay={deletePopUpOverLay}\r\n                    deleteRowFromGrid={deleteRowFromGrid}\r\n                    globalSearchLogic={globalSearchLogic}\r\n                    updateCellData={updateCellData}\r\n                    selectBulkData={selectBulkData}\r\n                    calculateRowHeight={calculateRowHeight}\r\n                    renderExpandedContent={renderExpandedContent}\r\n                    hasNextPage={hasNextPage}\r\n                    isNextPageLoading={isNextPageLoading}\r\n                    loadNextPage={loadNextPage}\r\n                />\r\n                {isNextPageLoading ? <h2 style={{ textAlign: \"center\" }}>Loading...</h2> : null}\r\n            </div>\r\n        );\r\n    } else {\r\n        return <h2 style={{ textAlign: \"center\", marginTop: \"70px\" }}>Initializing Grid...</h2>;\r\n    }\r\n});\r\n\r\nexport default Grid;\r\n"],"names":["RowSelector","memo","forwardRef","indeterminate","rest","ref","checkValue","setCheckValue","useState","defaultRef","useRef","resolvedRef","onChange","useEffect","current","DefaultColumnFilter","column","filterValue","setFilter","e","target","value","undefined","GlobalFilter","globalFilter","setGlobalFilter","setValue","useAsyncDebounce","require","RowOptions","props","row","DeletePopUpOverLay","deleteRowFromGrid","isRowOptionsOpen","setRowOptionsOpen","isDeleteOverlayOpen","setDeleteOverlayOpen","openRowOptionsOverlay","closeRowOptionsOverlay","openDeleteOverlay","closeDeleteOverlay","deleteRow","RowEdit","RowPin","RowDelete","ItemTypes","COLUMN","ColumnItem","id","name","moveColumn","findColumn","innerCells","originalIndex","index","isDragging","drag","useDrag","item","type","collect","monitor","end","dropResult","droppedId","getItem","didDrop","drop","useDrop","accept","canDrop","hover","draggedId","overIndex","opacity","node","cursor","ColumnsList","columnId","atIndex","updateColumnsInState","update","columnsToManage","$splice","filter","c","indexOf","display","flexWrap","map","Header","ColumnReordering","isManageColumnOpen","toggleManageColumns","originalColumns","managedColumns","setManagedColumns","HTML5toTouch","backends","backend","HTML5Backend","TouchBackend","options","enableMouseEvents","preview","transition","TouchTransition","columns","isCheckboxSelected","header","length","selectedColumn","selectAllColumns","event","currentTarget","checked","selectSingleColumn","indexOfColumnToAdd","findIndex","itemToAdd","prevItemIndex","newColumnsList","slice","splice","doColumnUpdate","updateColumnStructure","resetColumnUpdate","MultiBackend","listRef","createRef","Customgrid","title","gridHeight","gridWidth","managableColumns","data","deletePopUpOverLay","globalSearchLogic","updateCellData","selectBulkData","calculateRowHeight","renderExpandedContent","hasNextPage","isNextPageLoading","loadNextPage","setColumns","marginTop","textAlign","itemCount","loadMoreItems","isItemLoaded","isFilterOpen","setFilterOpen","toggleColumnFilter","setManageColumnOpen","newColumnStructure","defaultColumn","useMemo","Filter","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","selectedFlatRows","state","useTable","autoResetFilters","autoResetGlobalFilter","autoResetSortBy","autoResetExpanded","autoResetSelectedRows","useFilters","useGlobalFilter","useSortBy","useExpanded","useRowSelect","useFlexLayout","useResizeColumns","hooks","allColumns","push","disableResizing","disableFilters","disableSortBy","minWidth","width","maxWidth","getToggleAllRowsSelectedProps","Cell","getToggleRowSelectedProps","getToggleRowExpandedProps","isExpanded","bulkSelector","resetAfterIndex","RenderRow","useCallback","style","getRowProps","cells","cell","getCellProps","render","height","overflowX","overflowY","headerGroup","getHeaderGroupProps","headers","getHeaderProps","getSortByToggleProps","isSorted","isSortedDesc","canResize","getResizerProps","onItemsRendered","List","list","Grid","fetchData","deleteRowData","setHasNextPage","setIsNextPageLoading","items","setItems","processedColumns","forEach","gridColumns","original","rowIndexToBeDeleted","old","args","newIndex","then","concat"],"mappings":"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"}