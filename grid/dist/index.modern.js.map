{"version":3,"file":"index.modern.js","sources":["../src/Utilities/TagsContext.js","../src/Utilities/TagUtilities.js","../src/Functions/CellDisplayAndEditTag.js","../src/Functions/CellDisplayAndEdit.js","../src/Utilities/ColumnsUtilities.js","../src/Functions/AdditionalColumnTag.js","../src/Functions/RowSelector.js","../src/Functions/DefaultColumnFilter.js","../src/Functions/GlobalFilter.js","../src/Images/RowPin.png","../src/Functions/RowOptions.js","../src/Functions/RowEditTag.js","../src/Functions/RowEditOverlay.js","../src/Functions/RowDeleteOverLay.js","../src/Overlays/managecolumns/ItemTypes.js","../src/Overlays/managecolumns/columnItem.js","../src/Overlays/managecolumns/columnsList.js","../src/Overlays/managecolumns/index.js","../src/Overlays/groupsort/ItemTypes.js","../src/Overlays/groupsort/sortingItem.js","../src/Overlays/groupsort/sortingList.js","../src/Overlays/groupsort/index.js","../src/Overlays/exportdata/index.js","../src/Customgrid.js","../src/index.js"],"sourcesContent":["import { createContext } from \"react\";\r\n\r\nexport const CellDisplayAndEditContext = createContext({});\r\n\r\nexport const RowEditContext = createContext({});\r\n\r\nexport const AdditionalColumnContext = createContext({});\r\n","export const checkInnerCells = (column, cellKey) => {\r\n    if (column) {\r\n        const { innerCells } = column;\r\n        if (innerCells) {\r\n            const innerCellData = innerCells.find((cell) => {\r\n                return cell.accessor === cellKey;\r\n            });\r\n            if (innerCellData) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n};\r\n","import React, { useContext, Fragment } from \"react\";\r\nimport { CellDisplayAndEditContext } from \"../Utilities/TagsContext\";\r\nimport { checkInnerCells } from \"../Utilities/TagUtilities\";\r\n\r\nconst CellDisplayAndEditTag = (props) => {\r\n    const contextVallues = useContext(CellDisplayAndEditContext);\r\n    const { column, columns } = contextVallues;\r\n    const { cellKey, columnKey } = props;\r\n\r\n    if (columns && columnKey) {\r\n        const selectedColumn = columns.find(\r\n            (col) => col.accessor === columnKey\r\n        );\r\n        if (checkInnerCells(selectedColumn, cellKey)) {\r\n            return <Fragment> {props.children}</Fragment>;\r\n        }\r\n    } else if (cellKey) {\r\n        if (checkInnerCells(column, cellKey)) {\r\n            return <Fragment> {props.children}</Fragment>;\r\n        }\r\n    }\r\n    return null;\r\n};\r\n\r\nexport default CellDisplayAndEditTag;\r\n","import React, { memo, useState } from \"react\";\nimport ClickAwayListener from \"react-click-away-listener\";\nimport CellDisplayAndEditTag from \"./CellDisplayAndEditTag\";\nimport { CellDisplayAndEditContext } from \"../Utilities/TagsContext\";\nimport PropTypes from \"prop-types\";\n\nconst CellDisplayAndEdit = memo(({ row, columns, updateRowInGrid }) => {\n    const { column } = row;\n    if (column && row.row) {\n        const [isEditOpen, setIsEditOpen] = useState(false);\n        const [editedRowValue, setEditedRowValue] = useState(null);\n\n        const { id } = column;\n\n        const closeEdit = () => {\n            setIsEditOpen(false);\n        };\n\n        const openEdit = () => {\n            setIsEditOpen(true);\n        };\n\n        const getUpdatedRowValue = (value) => {\n            if (value) {\n                setEditedRowValue(value);\n            }\n        };\n\n        const saveEdit = () => {\n            if (editedRowValue) {\n                updateRowInGrid(row.row.original, editedRowValue);\n            }\n            closeEdit();\n        };\n\n        const originalRowValue = { ...row.row.original };\n        const cellDisplayContent = column.displayCell(\n            originalRowValue,\n            CellDisplayAndEditTag\n        );\n        const cellEditContent = column.editCell\n            ? column.editCell(\n                  originalRowValue,\n                  CellDisplayAndEditTag,\n                  getUpdatedRowValue\n              )\n            : null;\n        return (\n            <CellDisplayAndEditContext.Provider\n                value={{ columns: columns, column: column }}\n            >\n                <ClickAwayListener onClickAway={closeEdit}>\n                    <div\n                        className={`table-cell--content table-cell--content__${id}`}\n                    >\n                        {cellEditContent ? (\n                            <div\n                                className=\"cell-edit\"\n                                role=\"presentation\"\n                                onClick={openEdit}\n                            >\n                                <i\n                                    className=\"fa fa-pencil\"\n                                    aria-hidden=\"true\"\n                                />\n                            </div>\n                        ) : null}\n                        {cellDisplayContent}\n                        {isEditOpen ? (\n                            <div className=\"table-cell--content-edit\">\n                                {cellEditContent}\n                                <button\n                                    type=\"button\"\n                                    aria-label=\"Mute volume\"\n                                    className=\"ok\"\n                                    data-testid=\"ok\"\n                                    onClick={saveEdit}\n                                />\n                                <button\n                                    type=\"button\"\n                                    aria-label=\"Mute volume\"\n                                    className=\"cancel\"\n                                    data-testid=\"cancel\"\n                                    onClick={closeEdit}\n                                />\n                            </div>\n                        ) : null}\n                    </div>\n                </ClickAwayListener>\n            </CellDisplayAndEditContext.Provider>\n        );\n    }\n});\n\nCellDisplayAndEdit.propTypes = {\n    row: PropTypes.any,\n    columns: PropTypes.any,\n    updateRowInGrid: PropTypes.any,\n    cellKey: PropTypes.any,\n    columnKey: PropTypes.any,\n    children: PropTypes.any\n};\n\nexport default CellDisplayAndEdit;\n","import React from \"react\";\r\nimport CellDisplayAndEdit from \"../Functions/CellDisplayAndEdit\";\r\n\r\nexport const extractColumns = (\r\n    columns,\r\n    searchColumn,\r\n    isDesktop,\r\n    updateRowInGrid\r\n) => {\r\n    // Remove iPad only columns from desktop and vice-versa\r\n    const filteredColumns = columns.filter((column) => {\r\n        return isDesktop ? !column.onlyInTablet : !column.onlyInDesktop;\r\n    });\r\n\r\n    const modifiedColumns = [];\r\n    // Loop through the columns configuration and create required column structure\r\n    filteredColumns.forEach((column, index) => {\r\n        const { innerCells, accessor, sortValue } = column;\r\n        const isInnerCellsPresent = innerCells && innerCells.length > 0;\r\n        const elem = column;\r\n\r\n        // Add column Id\r\n        elem.columnId = `column_${index}`;\r\n\r\n        //Add an indentifier that this is a column not for expanded region\r\n        elem.displayInExpandedRegion = false;\r\n\r\n        // Configure Cell function (which is used by react-table component), based on the user defined function displayCell\r\n        if (!elem.Cell && elem.displayCell) {\r\n            elem.Cell = (row) => {\r\n                return (\r\n                    <CellDisplayAndEdit\r\n                        row={row}\r\n                        columns={columns}\r\n                        updateRowInGrid={updateRowInGrid}\r\n                    />\r\n                );\r\n            };\r\n        }\r\n\r\n        // Add logic to sort column if sort is not disabled\r\n        if (!elem.disableSortBy) {\r\n            if (isInnerCellsPresent) {\r\n                // If there are inner cells and a sort value specified, do sort on that value\r\n                if (sortValue) {\r\n                    elem.sortType = (rowA, rowB) => {\r\n                        return rowA.original[accessor][sortValue] >\r\n                            rowB.original[accessor][sortValue]\r\n                            ? -1\r\n                            : 1;\r\n                    };\r\n                } else {\r\n                    elem.disableSortBy = true;\r\n                }\r\n            } else if (!innerCells) {\r\n                // If no inner cells are there, just do sort on column value\r\n                elem.sortType = (rowA, rowB) => {\r\n                    return rowA.original[accessor] > rowB.original[accessor]\r\n                        ? -1\r\n                        : 1;\r\n                };\r\n            }\r\n        }\r\n\r\n        // Add logic to filter column if column filter is not disabled\r\n        if (!elem.disableFilters) {\r\n            elem.filter = (rows, id, filterValue) => {\r\n                const searchText = filterValue ? filterValue.toLowerCase() : \"\";\r\n                return rows.filter((row) => {\r\n                    // Find original data value of each row\r\n                    const { original } = row;\r\n                    // Do search for the column\r\n                    return searchColumn(column, original, searchText);\r\n                });\r\n            };\r\n        }\r\n\r\n        modifiedColumns.push(column);\r\n    });\r\n    return modifiedColumns;\r\n};\r\n\r\nexport const extractAdditionalColumn = (additionalColumn, isDesktop) => {\r\n    const { innerCells } = additionalColumn;\r\n    const isInnerCellsPresent = innerCells && innerCells.length > 0;\r\n    const element = additionalColumn;\r\n\r\n    // Add column Id\r\n    element.columnId = `ExpandColumn`;\r\n\r\n    //Add an indentifier that this is a column for expanded region\r\n    element.displayInExpandedRegion = true;\r\n\r\n    // Remove iPad only columns from desktop and vice-versa\r\n    if (isInnerCellsPresent) {\r\n        element.innerCells = innerCells.filter((cell) => {\r\n            return isDesktop ? !cell.onlyInTablet : !cell.onlyInDesktop;\r\n        });\r\n    }\r\n    return additionalColumn;\r\n};\r\n","import React, { useContext, Fragment } from \"react\";\r\nimport { AdditionalColumnContext } from \"../Utilities/TagsContext\";\r\nimport { checkInnerCells } from \"../Utilities/TagUtilities\";\r\n\r\nconst AdditionalColumnTag = (props) => {\r\n    const contextVallues = useContext(AdditionalColumnContext);\r\n    const { additionalColumn } = contextVallues;\r\n    const { cellKey } = props;\r\n\r\n    if (additionalColumn && cellKey) {\r\n        if (checkInnerCells(additionalColumn, cellKey)) {\r\n            return <Fragment> {props.children}</Fragment>;\r\n        }\r\n    }\r\n    return null;\r\n};\r\n\r\nexport default AdditionalColumnTag;\r\n","import React, { forwardRef, useRef, useEffect, useState, memo } from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst RowSelector = memo(\n    forwardRef(({ indeterminate, ...rest }, ref) => {\n        const [checkValue, setCheckValue] = useState(indeterminate);\n        const defaultRef = useRef();\n        const resolvedRef = ref || defaultRef;\n        const onChange = () => {\n            setCheckValue(!indeterminate);\n        };\n        useEffect(() => {\n            resolvedRef.current.indeterminate = indeterminate;\n        }, [resolvedRef, indeterminate]);\n        return (\n            <div className=\"check-wrap\">\n                <input\n                    type=\"checkbox\"\n                    checked={checkValue}\n                    onChange={onChange}\n                    ref={resolvedRef}\n                    {...rest}\n                />\n            </div>\n        );\n    })\n);\n\nRowSelector.propTypes = {\n    indeterminate: PropTypes.any\n};\n\nexport default RowSelector;\n","import React, { memo } from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst DefaultColumnFilter = memo(({ column: { filterValue, setFilter } }) => {\n    return (\n        <input\n            className=\"txt\"\n            value={filterValue || \"\"}\n            onChange={(e) => {\n                setFilter(e.target.value || undefined);\n            }}\n            placeholder=\"Search\"\n        />\n    );\n});\n\nDefaultColumnFilter.propTypes = {\n    column: PropTypes.any\n};\n\nexport default DefaultColumnFilter;\n","import React, { memo, useState } from \"react\";\nimport { useAsyncDebounce } from \"react-table\";\nimport IconSearch from \"../Images/icon-search.svg\";\nimport PropTypes from \"prop-types\";\n\nconst GlobalFilter = memo(({ globalFilter, setGlobalFilter }) => {\n    const [value, setValue] = useState(globalFilter);\n\n    const onChange = useAsyncDebounce((value) => {\n        setGlobalFilter(value || undefined);\n    }, 200);\n\n    return (\n        <div className=\"txt-wrap\">\n            <input\n                type=\"text\"\n                value={value || \"\"}\n                onChange={(e) => {\n                    setValue(e.target.value);\n                    onChange(e.target.value);\n                }}\n                className=\"txt\"\n                placeholder=\"Search\"\n            />\n            <i>\n                <img src={IconSearch} />\n            </i>\n        </div>\n    );\n});\n\nGlobalFilter.propTypes = {\n    globalFilter: PropTypes.any,\n    setGlobalFilter: PropTypes.any\n};\n\nexport default GlobalFilter;\n","/* loaded by smart-asset */\nexport default require(\"./RowPin~qQRdvcXq.png\")","import React, { useState, memo } from \"react\";\nimport ClickAwayListener from \"react-click-away-listener\";\nimport PropTypes from \"prop-types\";\nimport RowDelete from \"../Images/RowDelete.svg\";\nimport RowEdit from \"../Images/RowEdit.svg\";\nimport RowPin from \"../Images/RowPin.png\";\n\nconst RowOptions = memo(\n    ({\n        row,\n        rowActions,\n        rowActionCallback,\n        bindRowEditOverlay,\n        bindRowDeleteOverlay\n    }) => {\n        const { original } = row;\n        const isAdditionalRowOptionsPresent =\n            rowActions &&\n            rowActions.length > 0 &&\n            typeof rowActionCallback === \"function\";\n\n        const [isRowOptionsOpen, setRowOptionsOpen] = useState(false);\n\n        const openRowOptionsOverlay = () => {\n            setRowOptionsOpen(true);\n        };\n\n        const closeRowOptionsOverlay = () => {\n            setRowOptionsOpen(false);\n        };\n\n        const openRowEditOverlay = () => {\n            bindRowEditOverlay(original);\n            closeRowOptionsOverlay();\n        };\n\n        const openDeleteOverlay = () => {\n            bindRowDeleteOverlay(original);\n            closeRowOptionsOverlay();\n        };\n\n        const additionalActionClicked = (actionValue) => {\n            return rowActionCallback(original, actionValue);\n        };\n\n        return (\n            <div>\n                <div className=\"row-options-wrap\">\n                    <span\n                        className=\"icon-row-options\"\n                        role=\"presentation\"\n                        onClick={openRowOptionsOverlay}\n                    >\n                        <i />\n                        <i />\n                        <i />\n                    </span>\n                    {isRowOptionsOpen ? (\n                        <ClickAwayListener onClickAway={closeRowOptionsOverlay}>\n                            <div className=\"row-options-overlay\">\n                                <ul>\n                                    <li>\n                                        <span\n                                            role=\"presentation\"\n                                            onClick={openRowEditOverlay}\n                                        >\n                                            <i>\n                                                <img\n                                                    src={RowEdit}\n                                                    alt=\"cargo\"\n                                                />\n                                            </i>\n                                            <span>Edit</span>\n                                        </span>\n                                    </li>\n                                    <li>\n                                        <span>\n                                            <i>\n                                                <img\n                                                    src={RowPin}\n                                                    alt=\"cargo\"\n                                                    width=\"15\"\n                                                    height=\"15\"\n                                                />\n                                            </i>\n                                            <span>Pin This row</span>\n                                        </span>\n                                    </li>\n                                    <li>\n                                        <span\n                                            role=\"presentation\"\n                                            onClick={openDeleteOverlay}\n                                        >\n                                            <i>\n                                                <img\n                                                    src={RowDelete}\n                                                    alt=\"cargo\"\n                                                />\n                                            </i>\n                                            <span>Delete</span>\n                                        </span>\n                                    </li>\n                                    {isAdditionalRowOptionsPresent\n                                        ? rowActions.map((action) => {\n                                              const { value, label } = action;\n                                              return (\n                                                  <li key={value}>\n                                                      <span\n                                                          role=\"presentation\"\n                                                          onClick={() => {\n                                                              return additionalActionClicked(\n                                                                  value\n                                                              );\n                                                          }}\n                                                      >\n                                                          <span>{label}</span>\n                                                      </span>\n                                                  </li>\n                                              );\n                                          })\n                                        : null}\n                                </ul>\n                                <span\n                                    role=\"presentation\"\n                                    className=\"close\"\n                                    onClick={closeRowOptionsOverlay}\n                                >\n                                    <i className=\"fa fa-close\" />\n                                </span>\n                            </div>\n                        </ClickAwayListener>\n                    ) : null}\n                </div>\n            </div>\n        );\n    }\n);\n\nRowOptions.propTypes = {\n    row: PropTypes.any,\n    bindRowEditOverlay: PropTypes.any,\n    bindRowDeleteOverlay: PropTypes.any\n};\n\nexport default RowOptions;\n","import React, { useContext, Fragment } from \"react\";\r\nimport { RowEditContext } from \"../Utilities/TagsContext\";\r\nimport { checkInnerCells } from \"../Utilities/TagUtilities\";\r\n\r\nconst RowEditTag = (props) => {\r\n    const contextVallues = useContext(RowEditContext);\r\n    const { columns, additionalColumn, isRowExpandEnabled } = contextVallues;\r\n    const { cellKey, columnKey } = props;\r\n\r\n    if (columns && columnKey) {\r\n        const selectedColumn = columns.find(\r\n            (col) => col.accessor === columnKey\r\n        );\r\n        if (selectedColumn && cellKey) {\r\n            if (checkInnerCells(selectedColumn, cellKey)) {\r\n                return <Fragment> {props.children}</Fragment>;\r\n            }\r\n        } else if (!selectedColumn && isRowExpandEnabled && additionalColumn) {\r\n            if (checkInnerCells(additionalColumn, columnKey)) {\r\n                return <Fragment> {props.children}</Fragment>;\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n};\r\n\r\nexport default RowEditTag;\r\n","import React, { memo, useState } from \"react\";\nimport { RowEditContext } from \"../Utilities/TagsContext\";\nimport RowEditTag from \"./RowEditTag\";\nimport ClickAwayListener from \"react-click-away-listener\";\nimport PropTypes from \"prop-types\";\n\nconst RowEditOverLay = memo(\n    ({\n        row,\n        columns,\n        isRowExpandEnabled,\n        additionalColumn,\n        getRowEditOverlay,\n        closeRowEditOverlay,\n        updateRowInGrid\n    }) => {\n        const [editedRowValue, setEditedRowValue] = useState(null);\n\n        const getUpdatedRowValue = (value) => {\n            if (value) {\n                setEditedRowValue(value);\n            }\n        };\n\n        const saveRowEdit = () => {\n            if (editedRowValue) {\n                updateRowInGrid(row, editedRowValue);\n            }\n            closeRowEditOverlay();\n        };\n\n        const originalRowValue = { ...row };\n        const rowEditContent = getRowEditOverlay(\n            originalRowValue,\n            RowEditTag,\n            getUpdatedRowValue\n        );\n        return (\n            <RowEditContext.Provider\n                value={{\n                    columns: columns,\n                    additionalColumn: additionalColumn,\n                    isRowExpandEnabled: isRowExpandEnabled\n                }}\n            >\n                <ClickAwayListener\n                    className=\"row-option-action-overlay\"\n                    onClickAway={closeRowEditOverlay}\n                >\n                    {rowEditContent}\n                    <div className=\"cancel-save-buttons\">\n                        <button\n                            type=\"button\"\n                            className=\"save-Button\"\n                            onClick={saveRowEdit}\n                        >\n                            Save\n                        </button>\n                        <button\n                            type=\"button\"\n                            className=\"cancel-Button\"\n                            onClick={closeRowEditOverlay}\n                        >\n                            Cancel\n                        </button>\n                    </div>\n                </ClickAwayListener>\n            </RowEditContext.Provider>\n        );\n    }\n);\n\nRowEditOverLay.propTypes = {\n    row: PropTypes.any,\n    columns: PropTypes.any,\n    isRowExpandEnabled: PropTypes.any,\n    additionalColumn: PropTypes.any,\n    getRowEditOverlay: PropTypes.any,\n    closeRowEditOverlay: PropTypes.any,\n    updateRowInGrid: PropTypes.any,\n    cellKey: PropTypes.any,\n    columnKey: PropTypes.any,\n    children: PropTypes.any\n};\n\nexport default RowEditOverLay;\n","import React, { memo } from \"react\";\nimport ClickAwayListener from \"react-click-away-listener\";\nimport PropTypes from \"prop-types\";\n\nconst RowDeleteOverLay = memo(\n    ({ row, closeRowDeleteOverlay, deleteRowFromGrid }) => {\n        const deleteRow = () => {\n            if (row) {\n                deleteRowFromGrid(row);\n            }\n            closeRowDeleteOverlay();\n        };\n\n        return (\n            <ClickAwayListener\n                className=\"row-option-action-overlay delete\"\n                onClickAway={closeRowDeleteOverlay}\n            >\n                <div className=\"cancel-save-buttons-delete\">\n                    <button\n                        type=\"button\"\n                        className=\"delete-Button\"\n                        onClick={deleteRow}\n                    >\n                        Delete\n                    </button>\n                    <button\n                        type=\"button\"\n                        className=\"cancel-Button\"\n                        onClick={closeRowDeleteOverlay}\n                    >\n                        Cancel\n                    </button>\n                </div>\n            </ClickAwayListener>\n        );\n    }\n);\n\nRowDeleteOverLay.propTypes = {\n    row: PropTypes.any,\n    closeRowDeleteOverlay: PropTypes.any,\n    deleteRowFromGrid: PropTypes.any\n};\n\nexport default RowDeleteOverLay;\n","export const ItemTypes = {\n    COLUMN: \"column\"\n};\n","import React from \"react\";\nimport { useDrag, useDrop } from \"react-dnd\";\nimport PropTypes from \"prop-types\";\nimport { ItemTypes } from \"./ItemTypes\";\n\nconst ColumnItem = ({\n    id,\n    Header,\n    moveColumn,\n    findColumn,\n    originalInnerCells,\n    isInnerCellSelected,\n    selectInnerCells\n}) => {\n    const originalIndex = findColumn(id).index;\n\n    const [{ isDragging }, drag] = useDrag({\n        item: { type: ItemTypes.COLUMN, id, originalIndex },\n        collect: (monitor) => ({\n            isDragging: monitor.isDragging()\n        }),\n        end: (dropResult, monitor) => {\n            const { id: droppedId, originalIndex } = monitor.getItem();\n            const didDrop = monitor.didDrop();\n            if (!didDrop) {\n                moveColumn(droppedId, originalIndex);\n            }\n        }\n    });\n\n    const [, drop] = useDrop({\n        accept: ItemTypes.COLUMN,\n        canDrop: () => false,\n        hover({ id: draggedId }) {\n            if (draggedId !== id) {\n                const { index: overIndex } = findColumn(id);\n                moveColumn(draggedId, overIndex);\n            }\n        }\n    });\n\n    const opacity = isDragging ? 0.1 : 1;\n\n    return (\n        <div style={{ opacity }}>\n            <div className=\"column__reorder\">\n                <div\n                    ref={(node) => drag(drop(node))}\n                    style={{ cursor: \"move\" }}\n                    className=\"\"\n                >\n                    <i className=\"fa fa-align-justify\" aria-hidden=\"true\" />\n                </div>\n                <div className=\"\">{Header}</div>\n                <div className=\"column__innerCells__wrap\">\n                    {originalInnerCells && originalInnerCells.length > 0\n                        ? originalInnerCells.map((cell, index) => {\n                              return (\n                                  <div className=\"column__wrap\" key={index}>\n                                      <div className=\"column__checkbox\">\n                                          <input\n                                              type=\"checkbox\"\n                                              data-columnheader={Header}\n                                              value={cell.Header}\n                                              checked={isInnerCellSelected(\n                                                  Header,\n                                                  cell.Header\n                                              )}\n                                              onChange={selectInnerCells}\n                                          />\n                                      </div>\n                                      <div className=\"column__txt\">\n                                          {cell.Header}\n                                      </div>\n                                  </div>\n                              );\n                          })\n                        : null}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nColumnItem.propTypes = {\n    id: PropTypes.any,\n    Header: PropTypes.any,\n    moveColumn: PropTypes.any,\n    findColumn: PropTypes.any,\n    originalInnerCells: PropTypes.any,\n    isInnerCellSelected: PropTypes.any,\n    selectInnerCells: PropTypes.any\n};\n\nexport default ColumnItem;\n","import React, { Fragment } from \"react\";\nimport { useDrop } from \"react-dnd\";\nimport update from \"immutability-helper\";\nimport PropTypes from \"prop-types\";\nimport { ItemTypes } from \"./ItemTypes\";\nimport ColumnItem from \"./columnItem\";\n\nconst ColumnsList = (props) => {\n    const {\n        updateColumnsInState,\n        columnsToManage,\n        isInnerCellSelected,\n        selectInnerCells\n    } = props;\n\n    const findColumn = (columnId) => {\n        const column = columnsToManage.filter(\n            (c) => `${c.columnId}` === columnId\n        )[0];\n        return {\n            column,\n            index: columnsToManage.indexOf(column)\n        };\n    };\n\n    const moveColumn = (columnId, atIndex) => {\n        const { column, index } = findColumn(columnId);\n        updateColumnsInState(\n            update(columnsToManage, {\n                $splice: [\n                    [index, 1],\n                    [atIndex, 0, column]\n                ]\n            })\n        );\n    };\n\n    const [, drop] = useDrop({ accept: ItemTypes.COLUMN });\n\n    return (\n        <>\n            <div ref={drop} style={{ display: \"flex\", flexWrap: \"wrap\" }}>\n                {columnsToManage.map((column, index) => {\n                    return (\n                        <ColumnItem\n                            key={index}\n                            id={`${column.columnId}`}\n                            Header={`${column.Header}`}\n                            moveColumn={moveColumn}\n                            findColumn={findColumn}\n                            originalInnerCells={column.originalInnerCells}\n                            isInnerCellSelected={isInnerCellSelected}\n                            selectInnerCells={selectInnerCells}\n                        />\n                    );\n                })}\n            </div>\n        </>\n    );\n};\n\nColumnsList.propTypes = {\n    updateColumnsInState: PropTypes.any,\n    columnsToManage: PropTypes.any,\n    isInnerCellSelected: PropTypes.any,\n    selectInnerCells: PropTypes.any\n};\n\nexport default ColumnsList;\n","import React, { memo, useState } from \"react\";\nimport { DndProvider } from \"react-dnd\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\nimport { TouchBackend } from \"react-dnd-touch-backend\";\nimport MultiBackend, { TouchTransition } from \"react-dnd-multi-backend\";\nimport ClickAwayListener from \"react-click-away-listener\";\nimport PropTypes from \"prop-types\";\nimport ColumnsList from \"./columnsList\";\n\nconst ColumnReordering = memo((props) => {\n    const {\n        isManageColumnOpen,\n        toggleManageColumns,\n        originalColumns,\n        isExpandContentAvailable,\n        additionalColumn\n    } = props;\n\n    const additionalColumnHeader =\n        additionalColumn && additionalColumn.length\n            ? additionalColumn[0].Header\n            : \"\";\n    const getRemarksColumnIfAvailable = () => {\n        return isExpandContentAvailable ? additionalColumn : [];\n    };\n\n    const concatedOriginalColumns = originalColumns.concat(\n        getRemarksColumnIfAvailable()\n    );\n\n    const [managedColumns, setManagedColumns] = useState(originalColumns);\n    const [searchedColumns, setSearchedColumns] = useState(\n        concatedOriginalColumns\n    );\n    const [remarksColumnToManage, setRemarksColumnToManage] = useState(\n        getRemarksColumnIfAvailable\n    );\n    const [isErrorDisplayed, setIsErrorDisplayed] = useState(false);\n\n    const HTML5toTouch = {\n        backends: [\n            {\n                backend: HTML5Backend\n            },\n            {\n                backend: TouchBackend,\n                options: { enableMouseEvents: true },\n                preview: true,\n                transition: TouchTransition\n            }\n        ]\n    };\n\n    const filterColumnsList = (event) => {\n        let { value } = event ? event.target : \"\";\n        value = value ? value.toLowerCase() : \"\";\n        if (value !== \"\") {\n            setSearchedColumns(\n                originalColumns\n                    .filter((column) => {\n                        return column.Header.toLowerCase().includes(value);\n                    })\n                    .concat(\n                        getRemarksColumnIfAvailable().filter((column) => {\n                            return column.Header.toLowerCase().includes(value);\n                        })\n                    )\n            );\n        } else {\n            setSearchedColumns(concatedOriginalColumns);\n        }\n    };\n\n    const updateColumnsInState = (columns) => {\n        setManagedColumns(columns);\n    };\n\n    const findColumn = (columnList, columnHeader) => {\n        return columnList.find((column) => {\n            return column.Header === columnHeader;\n        });\n    };\n\n    const isItemPresentInList = (list, headerValue) => {\n        const filteredList = list.filter((item) => {\n            return item.Header === headerValue;\n        });\n        return filteredList && filteredList.length > 0;\n    };\n\n    const isCheckboxSelected = (header) => {\n        if (header === additionalColumnHeader) {\n            return remarksColumnToManage.length > 0;\n        }\n        if (header === \"Select All\") {\n            return (\n                searchedColumns.length ===\n                managedColumns.length + remarksColumnToManage.length\n            );\n        }\n        return isItemPresentInList(managedColumns, header);\n    };\n\n    const isInnerCellSelected = (columnHeader, header) => {\n        const columnListToSearch =\n            columnHeader === additionalColumnHeader\n                ? remarksColumnToManage\n                : managedColumns;\n        const selectedColumn = findColumn(columnListToSearch, columnHeader);\n        return isItemPresentInList(selectedColumn.innerCells, header);\n    };\n\n    const findIndexOfItem = (\n        type,\n        columnsList,\n        indexOfColumnToAdd,\n        columnHeader,\n        originalInnerCells\n    ) => {\n        if (type === \"column\") {\n            return columnsList.findIndex((column) => {\n                return (\n                    column.Header === originalColumns[indexOfColumnToAdd].Header\n                );\n            });\n        }\n        return findColumn(columnsList, columnHeader).innerCells.findIndex(\n            (cell) => {\n                return (\n                    cell.Header ===\n                    originalInnerCells[indexOfColumnToAdd].Header\n                );\n            }\n        );\n    };\n\n    const selectAllColumns = (event) => {\n        if (event.currentTarget.checked) {\n            setManagedColumns(originalColumns);\n            setRemarksColumnToManage(getRemarksColumnIfAvailable());\n        } else {\n            setManagedColumns([]);\n            setRemarksColumnToManage([]);\n        }\n    };\n\n    const selectSingleColumn = (event) => {\n        const { currentTarget } = event;\n        const { checked, value } = currentTarget;\n\n        if (value === additionalColumnHeader) {\n            if (checked) {\n                setRemarksColumnToManage(additionalColumn);\n            } else {\n                setRemarksColumnToManage([]);\n            }\n        } else {\n            // If column checkbox is checked\n            if (checked) {\n                // Find the index of selected column from original column array and also find the user selected column\n                let indexOfColumnToAdd = originalColumns.findIndex((column) => {\n                    return column.Header === value;\n                });\n                const itemToAdd = originalColumns[indexOfColumnToAdd];\n\n                // Loop through the managedColumns array to find the position of the column that is present previous to the user selected column\n                // Find index of that previous column in original column list and push the new column next to that position\n                let prevItemIndex = -1;\n                while (indexOfColumnToAdd > 0 && prevItemIndex === -1) {\n                    indexOfColumnToAdd -= 1;\n                    prevItemIndex = findIndexOfItem(\n                        \"column\",\n                        managedColumns,\n                        indexOfColumnToAdd\n                    );\n                }\n\n                const newColumnsList = [...managedColumns];\n                newColumnsList.splice(prevItemIndex + 1, 0, itemToAdd);\n                setManagedColumns(newColumnsList);\n            } else {\n                setManagedColumns(\n                    managedColumns.filter((column) => {\n                        return column.Header !== value;\n                    })\n                );\n            }\n        }\n    };\n\n    const findAndSelectInnerCells = (\n        stateColumnList,\n        setStateColumnList,\n        event\n    ) => {\n        const { currentTarget } = event;\n        const { checked, dataset, value } = currentTarget;\n        const { columnheader } = dataset;\n\n        // Find the column in which checked/unchecked inner cell is present\n        const selectedColumn = findColumn(stateColumnList, columnheader);\n        const { originalInnerCells } = selectedColumn;\n        if (originalInnerCells && originalInnerCells.length > 0) {\n            if (checked) {\n                // Find the index of selected column from original column array and also find the user selected column\n                let indexOfColumnToAdd = originalInnerCells.findIndex(\n                    (column) => {\n                        return column.Header === value;\n                    }\n                );\n                const itemToAdd = originalInnerCells[indexOfColumnToAdd];\n\n                // Loop through the stateColumnList array to find the position of the column that is present previous to the user selected column\n                // Find index of that previous column and push the new column to add in that position\n                let prevItemIndex = -1;\n                while (indexOfColumnToAdd > 0 && prevItemIndex === -1) {\n                    indexOfColumnToAdd -= 1;\n                    prevItemIndex = findIndexOfItem(\n                        \"innercell\",\n                        stateColumnList,\n                        indexOfColumnToAdd,\n                        columnheader,\n                        originalInnerCells\n                    );\n                }\n\n                const newColumnsList = [...stateColumnList];\n                findColumn(newColumnsList, columnheader).innerCells.splice(\n                    prevItemIndex + 1,\n                    0,\n                    itemToAdd\n                );\n                setStateColumnList(newColumnsList);\n            } else {\n                setStateColumnList(\n                    stateColumnList.map((column) => {\n                        if (column.Header === columnheader) {\n                            column.innerCells = column.innerCells.filter(\n                                (cell) => {\n                                    return cell.Header !== value;\n                                }\n                            );\n                        }\n                        return column;\n                    })\n                );\n            }\n        }\n    };\n\n    const selectInnerCells = (event) => {\n        findAndSelectInnerCells(managedColumns, setManagedColumns, event);\n    };\n\n    const selectRemarksInnerCells = (event) => {\n        findAndSelectInnerCells(\n            remarksColumnToManage,\n            setRemarksColumnToManage,\n            event\n        );\n    };\n\n    const doColumnUpdate = () => {\n        setIsErrorDisplayed(false);\n        if (managedColumns && managedColumns.length > 0) {\n            setSearchedColumns(concatedOriginalColumns);\n            props.updateColumnStructure(managedColumns, remarksColumnToManage);\n            toggleManageColumns();\n        } else {\n            setIsErrorDisplayed(true);\n        }\n    };\n\n    const resetInnerCells = (columnList) => {\n        if (columnList && columnList.length) {\n            return columnList.map((column) => {\n                column.innerCells = column.originalInnerCells;\n                return column;\n            });\n        }\n        return columnList;\n    };\n\n    const resetColumnUpdate = () => {\n        setManagedColumns(resetInnerCells(originalColumns));\n        setSearchedColumns(\n            originalColumns.concat(getRemarksColumnIfAvailable())\n        );\n        setRemarksColumnToManage(\n            resetInnerCells(getRemarksColumnIfAvailable())\n        );\n        setIsErrorDisplayed(false);\n        props.updateColumnStructure(\n            originalColumns,\n            getRemarksColumnIfAvailable()\n        );\n    };\n\n    if (isManageColumnOpen) {\n        return (\n            <ClickAwayListener onClickAway={toggleManageColumns}>\n                <div className=\"neo-popover neo-popover--column columns--grid\">\n                    <div className=\"neo-popover__column column__grid\">\n                        <div className=\"column__chooser\">\n                            <div className=\"column__header\">\n                                <div className=\"\">\n                                    <strong>Column Chooser</strong>\n                                </div>\n                            </div>\n                            <div className=\"column__body\">\n                                <div>\n                                    <input\n                                        type=\"text\"\n                                        placeholder=\"Search column\"\n                                        className=\"custom__ctrl\"\n                                        onChange={filterColumnsList}\n                                    />\n                                </div>\n                                <div className=\"column__selectAll\">\n                                    <div className=\"column__checkbox\">\n                                        <input\n                                            type=\"checkbox\"\n                                            value=\"Select All\"\n                                            checked={isCheckboxSelected(\n                                                \"Select All\"\n                                            )}\n                                            onChange={selectAllColumns}\n                                        />\n                                    </div>\n                                    <div className=\"column__selectTxt\">\n                                        Select All\n                                    </div>\n                                </div>\n                                {searchedColumns.map((column, index) => {\n                                    return (\n                                        <div\n                                            className=\"column__wrap\"\n                                            key={index}\n                                        >\n                                            <div className=\"column__checkbox\">\n                                                <input\n                                                    type=\"checkbox\"\n                                                    value={column.Header}\n                                                    checked={isCheckboxSelected(\n                                                        column.Header\n                                                    )}\n                                                    onChange={\n                                                        selectSingleColumn\n                                                    }\n                                                />\n                                            </div>\n                                            <div className=\"column__txt\">\n                                                {column.Header}\n                                            </div>\n                                        </div>\n                                    );\n                                })}\n                            </div>\n                        </div>\n                        <div className=\"column__settings\">\n                            <div className=\"column__header\">\n                                <div className=\"column__headerTxt\">\n                                    <strong>Column Settings</strong>\n                                    {isErrorDisplayed ? (\n                                        <strong\n                                            style={{\n                                                marginLeft: \"10px\",\n                                                color: \"red\"\n                                            }}\n                                        >\n                                            Select at least one column (other\n                                            than {additionalColumnHeader})\n                                        </strong>\n                                    ) : null}\n                                </div>\n                                <div\n                                    className=\"column__close\"\n                                    role=\"presentation\"\n                                    onClick={toggleManageColumns}\n                                >\n                                    <i\n                                        className=\"fa fa-times\"\n                                        aria-hidden=\"true\"\n                                    />\n                                </div>\n                            </div>\n                            <div className=\"column__body\">\n                                <DndProvider\n                                    backend={MultiBackend}\n                                    options={HTML5toTouch}\n                                >\n                                    <ColumnsList\n                                        columnsToManage={managedColumns}\n                                        updateColumnsInState={\n                                            updateColumnsInState\n                                        }\n                                        isInnerCellSelected={\n                                            isInnerCellSelected\n                                        }\n                                        selectInnerCells={selectInnerCells}\n                                    />\n                                </DndProvider>\n                                {remarksColumnToManage &&\n                                remarksColumnToManage.length > 0 ? (\n                                    <div className=\"column__reorder full-width\">\n                                        <div className=\"\">\n                                            {remarksColumnToManage[0].Header}\n                                        </div>\n                                        <div className=\"column__innerCells__wrap\">\n                                            {remarksColumnToManage[0]\n                                                .originalInnerCells &&\n                                            remarksColumnToManage[0]\n                                                .originalInnerCells.length > 0\n                                                ? remarksColumnToManage[0].originalInnerCells.map(\n                                                      (cell, index) => {\n                                                          return (\n                                                              <div\n                                                                  className=\"column__wrap\"\n                                                                  key={index}\n                                                              >\n                                                                  <div className=\"column__checkbox\">\n                                                                      <input\n                                                                          type=\"checkbox\"\n                                                                          data-columnheader={\n                                                                              remarksColumnToManage[0]\n                                                                                  .Header\n                                                                          }\n                                                                          value={\n                                                                              cell.Header\n                                                                          }\n                                                                          checked={isInnerCellSelected(\n                                                                              remarksColumnToManage[0]\n                                                                                  .Header,\n                                                                              cell.Header\n                                                                          )}\n                                                                          onChange={\n                                                                              selectRemarksInnerCells\n                                                                          }\n                                                                      />\n                                                                  </div>\n                                                                  <div className=\"column__txt\">\n                                                                      {\n                                                                          cell.Header\n                                                                      }\n                                                                  </div>\n                                                              </div>\n                                                          );\n                                                      }\n                                                  )\n                                                : null}\n                                        </div>\n                                    </div>\n                                ) : null}\n                            </div>\n                            <div className=\"column__footer\">\n                                <div className=\"column__btns\">\n                                    <button\n                                        type=\"button\"\n                                        className=\"btns\"\n                                        onClick={resetColumnUpdate}\n                                    >\n                                        Reset\n                                    </button>\n                                    <button\n                                        type=\"button\"\n                                        className=\"btns\"\n                                        onClick={toggleManageColumns}\n                                    >\n                                        Cancel\n                                    </button>\n                                    <button\n                                        type=\"button\"\n                                        className=\"btns btns__save\"\n                                        onClick={doColumnUpdate}\n                                    >\n                                        Save\n                                    </button>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </ClickAwayListener>\n        );\n    }\n    return <div />;\n});\n\nColumnReordering.propTypes = {\n    isManageColumnOpen: PropTypes.any,\n    toggleManageColumns: PropTypes.any,\n    originalColumns: PropTypes.any,\n    isExpandContentAvailable: PropTypes.any,\n    additionalColumn: PropTypes.any,\n    updateColumnStructure: PropTypes.any\n};\n\nexport default ColumnReordering;\n","export const ItemTypes = {\n    SORT_ITEM: \"SORT_ITEM\"\n};\n","import React from \"react\";\nimport { useDrag, useDrop } from \"react-dnd\";\nimport PropTypes from \"prop-types\";\nimport { ItemTypes } from \"./ItemTypes\";\nimport SortCopy from \"../../Images/SortCopy.svg\";\nimport SortDelete from \"../../Images/SortDelete.svg\";\n\nconst SortItem = ({\n    id,\n    sortOption,\n    originalColumns,\n    moveSort,\n    findSort,\n    updateSingleSortingOption,\n    copySortOption,\n    deleteSortOption\n}) => {\n    const originalIndex = findSort(id).index;\n\n    const [{ isDragging }, drag] = useDrag({\n        item: { type: ItemTypes.SORT_ITEM, id, originalIndex },\n        collect: (monitor) => ({\n            isDragging: monitor.isDragging()\n        }),\n        end: (dropResult, monitor) => {\n            const { id: droppedId, originalIndex } = monitor.getItem();\n            const didDrop = monitor.didDrop();\n            if (!didDrop) {\n                moveSort(droppedId, originalIndex);\n            }\n        }\n    });\n\n    const [, drop] = useDrop({\n        accept: ItemTypes.SORT_ITEM,\n        canDrop: () => false,\n        hover({ id: draggedId }) {\n            if (draggedId !== id) {\n                const { index: overIndex } = findSort(id);\n                moveSort(draggedId, overIndex);\n            }\n        }\n    });\n\n    const getInncerCellsOfColumn = (columnAccessor) => {\n        return originalColumns.find((column) => {\n            return column.accessor === columnAccessor;\n        }).innerCells;\n    };\n\n    const changeSortByOptions = (event) => {\n        const newSortByValue = event.target.value;\n        const innerCellsList = getInncerCellsOfColumn(newSortByValue);\n        updateSingleSortingOption(\n            id,\n            newSortByValue,\n            innerCellsList && innerCellsList.length > 0\n                ? innerCellsList[0].accessor\n                : \"value\",\n            sortOption.order\n        );\n    };\n\n    const changeSortOnOptions = (event) => {\n        const newSortOnValue = event.target.value;\n        updateSingleSortingOption(\n            id,\n            sortOption.sortBy,\n            newSortOnValue,\n            sortOption.order\n        );\n    };\n\n    const changeSortOrderOptions = (event) => {\n        const newSortOrderValue = event.target.value;\n        updateSingleSortingOption(\n            id,\n            sortOption.sortBy,\n            sortOption.sortOn,\n            newSortOrderValue\n        );\n    };\n\n    const copySort = () => {\n        copySortOption(id);\n    };\n\n    const deleteSort = () => {\n        deleteSortOption(id);\n    };\n\n    const opacity = isDragging ? 0.5 : 1;\n\n    return (\n        <div className=\"sort__bodyContent\" style={{ opacity }}>\n            <div className=\"sort__reorder\">\n                <div\n                    ref={(node) => drag(drop(node))}\n                    style={{ cursor: \"move\" }}\n                    className=\"\"\n                >\n                    <i className=\"fa fa-navicon\" />\n                </div>\n            </div>\n\n            <div className=\"sort__reorder\">\n                <div className=\"sort__file\">\n                    <select\n                        className=\"custom__ctrl\"\n                        onChange={changeSortByOptions}\n                        value={sortOption.sortBy}\n                    >\n                        {originalColumns.map((orgItem, index) => (\n                            <option key={index} value={orgItem.accessor}>\n                                {orgItem.Header}\n                            </option>\n                        ))}\n                    </select>\n                </div>\n            </div>\n            <div className=\"sort__reorder\">\n                <div className=\"sort__file\">\n                    <select\n                        className=\"custom__ctrl\"\n                        onChange={changeSortOnOptions}\n                        value={sortOption.sortOn}\n                    >\n                        {getInncerCellsOfColumn(sortOption.sortBy) &&\n                        getInncerCellsOfColumn(sortOption.sortBy).length > 0 ? (\n                            getInncerCellsOfColumn(sortOption.sortBy).map(\n                                (innerCellItem, innerCellIndex) => (\n                                    <option\n                                        key={innerCellIndex}\n                                        value={innerCellItem.accessor}\n                                    >\n                                        {innerCellItem.Header}\n                                    </option>\n                                )\n                            )\n                        ) : (\n                            <option key={0} value=\"value\">\n                                Value\n                            </option>\n                        )}\n                    </select>\n                </div>\n            </div>\n            <div className=\"sort__reorder\">\n                <div className=\"sort__file\">\n                    <select\n                        className=\"custom__ctrl\"\n                        value={sortOption.order}\n                        onChange={changeSortOrderOptions}\n                    >\n                        <option>Ascending</option>\n                        <option>Descending</option>\n                    </select>\n                </div>\n            </div>\n            <div className=\"sort__reorder\">\n                <div\n                    className=\"sort__icon\"\n                    role=\"presentation\"\n                    onClick={copySort}\n                >\n                    <i>\n                        <img src={SortCopy} alt=\"copy sort\" />\n                    </i>\n                </div>\n            </div>\n            <div className=\"sort__reorder\">\n                <div\n                    className=\"sort__icon\"\n                    role=\"presentation\"\n                    onClick={deleteSort}\n                >\n                    <i>\n                        <img src={SortDelete} alt=\"copy sort\" />\n                    </i>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nSortItem.propTypes = {\n    id: PropTypes.any,\n    sortOption: PropTypes.any,\n    originalColumns: PropTypes.any,\n    moveSort: PropTypes.any,\n    findSort: PropTypes.any,\n    updateSingleSortingOption: PropTypes.any,\n    copySortOption: PropTypes.any,\n    deleteSortOption: PropTypes.any\n};\n\nexport default SortItem;\n","import React, { Fragment } from \"react\";\nimport { useDrop } from \"react-dnd\";\nimport update from \"immutability-helper\";\nimport PropTypes from \"prop-types\";\nimport { ItemTypes } from \"./ItemTypes\";\nimport SortItem from \"./sortingItem\";\n\nconst SortingList = (props) => {\n    const { updateSortingOptions, sortOptions } = props;\n\n    const findSort = (sortId) => {\n        const sort = sortOptions.filter((c, index) => index === sortId)[0];\n        return {\n            sort,\n            index: sortOptions.indexOf(sort)\n        };\n    };\n\n    const moveSort = (sortId, atIndex) => {\n        const { sort, index } = findSort(sortId);\n        updateSortingOptions(\n            update(sortOptions, {\n                $splice: [\n                    [index, 1],\n                    [atIndex, 0, sort]\n                ]\n            })\n        );\n    };\n\n    const [, drop] = useDrop({ accept: ItemTypes.SORT_ITEM });\n\n    return (\n        <>\n            <div ref={drop} style={{ display: \"flex\", flexWrap: \"wrap\" }}>\n                {sortOptions && sortOptions.length > 0 ? (\n                    <ul>\n                        <li>Sort By</li>\n                        <li>Sort On</li>\n                        <li>Order</li>\n                    </ul>\n                ) : null}\n                {sortOptions.map((sortOption, index) => {\n                    return (\n                        <SortItem\n                            id={index}\n                            key={index}\n                            sortOption={sortOption}\n                            originalColumns={props.originalColumns}\n                            moveSort={moveSort}\n                            findSort={findSort}\n                            updateSingleSortingOption={\n                                props.updateSingleSortingOption\n                            }\n                            copySortOption={props.copySortOption}\n                            deleteSortOption={props.deleteSortOption}\n                        />\n                    );\n                })}\n            </div>\n        </>\n    );\n};\n\nSortingList.propTypes = {\n    updateSortingOptions: PropTypes.any,\n    sortOptions: PropTypes.any,\n    originalColumns: PropTypes.any,\n    copySortOption: PropTypes.any,\n    deleteSortOption: PropTypes.any,\n    updateSingleSortingOption: PropTypes.any\n};\n\nexport default SortingList;\n","import React, { memo, useState } from \"react\";\nimport { DndProvider } from \"react-dnd\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\nimport { TouchBackend } from \"react-dnd-touch-backend\";\nimport MultiBackend, { TouchTransition } from \"react-dnd-multi-backend\";\nimport ClickAwayListener from \"react-click-away-listener\";\nimport PropTypes from \"prop-types\";\nimport SortingList from \"./sortingList\";\n\nconst GroupSort = memo((props) => {\n    const {\n        isGroupSortOverLayOpen,\n        toggleGroupSortOverLay,\n        applyGroupSort,\n        originalColumns\n    } = props;\n\n    const sortingOrders = [\"Ascending\", \"Descending\"];\n    const defaultSortingOption = [\n        {\n            sortBy: originalColumns[0].accessor,\n            sortOn: originalColumns[0].innerCells\n                ? originalColumns[0].innerCells[0].accessor\n                : \"value\",\n            order: sortingOrders[0]\n        }\n    ];\n\n    const [sortOptions, setSortOptions] = useState([]);\n    const [isErrorDisplayed, setIsErrorDisplayed] = useState(false);\n\n    const HTML5toTouch = {\n        backends: [\n            {\n                backend: HTML5Backend\n            },\n            {\n                backend: TouchBackend,\n                options: { enableMouseEvents: true },\n                preview: true,\n                transition: TouchTransition\n            }\n        ]\n    };\n\n    const updateSortingOptions = (sortingOptions) => {\n        setSortOptions(sortingOptions);\n    };\n\n    const addSortingOptions = () => {\n        setSortOptions([...sortOptions, ...defaultSortingOption]);\n    };\n\n    const clearSortingOptions = () => {\n        setSortOptions([]);\n        applyGroupSort([]);\n    };\n\n    const updateSingleSortingOption = (\n        sortIndex,\n        sortByValue,\n        sortOnValue,\n        sortOrder\n    ) => {\n        const newOptionsList = sortOptions.slice(0);\n        const newSortingOption = {\n            sortBy: sortByValue,\n            sortOn: sortOnValue,\n            order: sortOrder\n        };\n        const updatedSortOptions = newOptionsList.map((option, index) =>\n            index === sortIndex ? newSortingOption : option\n        );\n        updateSortingOptions(updatedSortOptions);\n    };\n\n    const copySortOption = (sortIndex) => {\n        const newOption = sortOptions.slice(0)[sortIndex];\n        setSortOptions(sortOptions.concat(newOption));\n    };\n\n    const deleteSortOption = (sortIndex) => {\n        setSortOptions(\n            sortOptions.filter((option, index) => {\n                return index !== sortIndex;\n            })\n        );\n    };\n\n    const applySort = () => {\n        let isError = false;\n        sortOptions.map((option, index) => {\n            const { sortBy, sortOn } = option;\n            const optionIndex = index;\n            const duplicateSort = sortOptions.find((opt, optIndex) => {\n                return (\n                    sortBy === opt.sortBy &&\n                    sortOn === opt.sortOn &&\n                    optionIndex !== optIndex\n                );\n            });\n            if (duplicateSort) {\n                isError = true;\n            }\n            return null; // Added due to lint error expected to return a value in arrow function\n        });\n        if (!isError) {\n            applyGroupSort(sortOptions);\n            toggleGroupSortOverLay();\n        }\n        setIsErrorDisplayed(isError);\n    };\n\n    if (isGroupSortOverLayOpen) {\n        return (\n            <ClickAwayListener onClickAway={toggleGroupSortOverLay}>\n                <div className=\"neo-popover\">\n                    <div className=\"neo-popover__sort\">\n                        <div className=\"neo-popover__title\">\n                            <h2>Sort</h2>\n                            <div className=\"neo-popover__close\">\n                                <i\n                                    className=\"fa fa-times\"\n                                    aria-hidden=\"true\"\n                                    onClick={toggleGroupSortOverLay}\n                                />\n                            </div>\n                        </div>\n                        <div className=\"neo-popover__content\">\n                            <DndProvider\n                                backend={MultiBackend}\n                                options={HTML5toTouch}\n                            >\n                                <SortingList\n                                    sortOptions={sortOptions}\n                                    originalColumns={originalColumns}\n                                    updateSortingOptions={updateSortingOptions}\n                                    updateSingleSortingOption={\n                                        updateSingleSortingOption\n                                    }\n                                    copySortOption={copySortOption}\n                                    deleteSortOption={deleteSortOption}\n                                />\n                            </DndProvider>\n                        </div>\n                        <div className=\"sort-warning\">\n                            {isErrorDisplayed ? (\n                                <span>Duplicate sort options found.</span>\n                            ) : null}\n                        </div>\n                        <div className=\"sort__new\">\n                            <div\n                                className=\"sort__section\"\n                                role=\"presentation\"\n                                onClick={addSortingOptions}\n                            >\n                                <span>+</span>\n                                <div className=\"sort__txt\">New Sort</div>\n                            </div>\n                        </div>\n                        <div className=\"sort__footer\">\n                            <div className=\"sort__btns\">\n                                <button\n                                    type=\"button\"\n                                    className=\"btns\"\n                                    onClick={clearSortingOptions}\n                                >\n                                    Clear All\n                                </button>\n                                <button\n                                    type=\"button\"\n                                    className=\"btns btns__save\"\n                                    onClick={applySort}\n                                >\n                                    Ok\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </ClickAwayListener>\n        );\n    }\n    return <div />;\n});\n\nGroupSort.propTypes = {\n    isGroupSortOverLayOpen: PropTypes.any,\n    toggleGroupSortOverLay: PropTypes.any,\n    originalColumns: PropTypes.any,\n    applyGroupSort: PropTypes.any\n};\n\nexport default GroupSort;\n","import React, { memo, useState, useEffect } from \"react\";\nimport ClickAwayListener from \"react-click-away-listener\";\nimport PropTypes from \"prop-types\";\nimport jsPDF from \"jspdf\";\nimport \"jspdf-autotable\";\nimport * as FileSaver from \"file-saver\";\nimport * as XLSX from \"xlsx\";\n\nconst ExportData = memo((props) => {\n    const {\n        isExportOverlayOpen,\n        toggleExportDataOverlay,\n        rows,\n        originalColumns,\n        columns,\n        isRowExpandEnabled,\n        isExpandContentAvailable,\n        additionalColumn\n    } = props;\n\n    //Check if row expand is configured by developer\n    const getRemarksColumnIfAvailable = () => {\n        return isExpandContentAvailable ? additionalColumn : [];\n    };\n\n    //Check if row expand is set visible from manage overlay\n    const getRemarksColumnIfSelectedByUser = () => {\n        return isRowExpandEnabled ? additionalColumn : [];\n    };\n\n    //Full list of columns + expand column\n    const updatedColumns = [...originalColumns].concat(\n        getRemarksColumnIfAvailable()\n    );\n\n    //List of columns + expand based on user selection from manage overlay\n    const updatedColumnsPerUserSelection = [...columns].concat(\n        getRemarksColumnIfSelectedByUser()\n    );\n\n    const [managedColumns, setManagedColumns] = useState(\n        updatedColumnsPerUserSelection\n    );\n    const [searchedColumns, setSearchedColumns] = useState(updatedColumns);\n    const [downloadTypes, setDownloadTypes] = useState([]);\n    const [warning, setWarning] = useState(\"\");\n\n    let isDownload = false;\n\n    const exportRowData = () => {\n        isDownload = true;\n        let filteredRow = [];\n        let filteredRowValues = [];\n        let filteredRowHeader = [];\n\n        setWarning(\"\");\n\n        if (managedColumns.length > 0 && downloadTypes.length > 0) {\n            const rowLength = rows && rows.length > 0 ? rows.length : 0;\n            rows.forEach((rowDetails, index) => {\n                let row = rowDetails.original;\n                let filteredColumnVal = {};\n                let rowFilteredValues = [];\n                let rowFilteredHeader = [];\n                managedColumns.forEach((columnName) => {\n                    const {\n                        Header,\n                        accessor,\n                        originalInnerCells,\n                        displayInExpandedRegion\n                    } = columnName;\n                    const isInnerCellsPresent =\n                        originalInnerCells && originalInnerCells.length > 0;\n                    const accessorRowValue = row[accessor];\n                    let columnValue = \"\";\n                    let columnHeader = \"\";\n                    //For grid columns (not the one in expanded section)\n                    if (accessor) {\n                        if (\n                            isInnerCellsPresent &&\n                            typeof accessorRowValue === \"object\"\n                        ) {\n                            originalInnerCells.forEach((cell) => {\n                                const innerCellAccessor = cell.accessor;\n                                const innerCellHeader = cell.Header;\n                                const innerCellAccessorValue =\n                                    accessorRowValue[innerCellAccessor];\n                                if (accessorRowValue.length > 0) {\n                                    accessorRowValue.forEach((item, index) => {\n                                        columnValue = item[\n                                            innerCellAccessor\n                                        ].toString();\n                                        columnHeader =\n                                            Header +\n                                            \" - \" +\n                                            innerCellHeader +\n                                            \"_\" +\n                                            index;\n                                        filteredColumnVal[\n                                            columnHeader\n                                        ] = columnValue;\n                                        rowFilteredValues.push(columnValue);\n                                        rowFilteredHeader.push(columnHeader);\n                                    });\n                                } else if (innerCellAccessorValue) {\n                                    columnValue = innerCellAccessorValue;\n                                    columnHeader =\n                                        Header + \" - \" + innerCellHeader;\n                                    filteredColumnVal[\n                                        columnHeader\n                                    ] = columnValue;\n                                    rowFilteredValues.push(columnValue);\n                                    rowFilteredHeader.push(columnHeader);\n                                }\n                            });\n                        } else {\n                            columnValue = accessorRowValue;\n                            columnHeader = Header;\n                            filteredColumnVal[columnHeader] = columnValue;\n                            rowFilteredValues.push(columnValue);\n                            rowFilteredHeader.push(columnHeader);\n                        }\n                    } else if (displayInExpandedRegion && isInnerCellsPresent) {\n                        //For column in the expanded section\n                        originalInnerCells.forEach((expandedCell) => {\n                            const expandedCellAccessor = expandedCell.accessor;\n                            const expandedCellHeader = expandedCell.Header;\n                            const expandedCellValue = row[expandedCellAccessor];\n                            let formattedValue = expandedCellValue;\n                            if (typeof expandedCellValue === \"object\") {\n                                if (expandedCellValue.length > 0) {\n                                    const newValues = [];\n                                    expandedCellValue.forEach((cellValue) => {\n                                        newValues.push(\n                                            Object.values(cellValue).join(\"--\")\n                                        );\n                                    });\n                                    formattedValue = newValues.join(\"||\");\n                                } else {\n                                    formattedValue = Object.values(\n                                        expandedCellValue\n                                    ).join(\"||\");\n                                }\n                            }\n                            columnValue = formattedValue;\n                            columnHeader = expandedCellHeader;\n                            filteredColumnVal[columnHeader] = columnValue;\n                            rowFilteredValues.push(columnValue);\n                            rowFilteredHeader.push(columnHeader);\n                        });\n                    }\n                });\n                filteredRow.push(filteredColumnVal);\n                filteredRowValues.push(rowFilteredValues);\n                if (rowLength === index + 1)\n                    filteredRowHeader.push(rowFilteredHeader);\n            });\n\n            downloadTypes.map((item) => {\n                if (item === \"pdf\") {\n                    downloadPDF(filteredRowValues, filteredRowHeader);\n                } else if (item === \"excel\") {\n                    downloadXLSFile(filteredRow);\n                } else {\n                    downloadCSVFile(filteredRow);\n                }\n            });\n        } else {\n            if (managedColumns.length === 0 && downloadTypes.length === 0) {\n                setWarning(\"Select at least one column and a file type\");\n            } else if (managedColumns.length === 0) {\n                setWarning(\"Select at least one column\");\n            } else if (downloadTypes.length === 0) {\n                setWarning(\"Select at least one file type\");\n            }\n        }\n    };\n\n    const downloadPDF = (rowFilteredValues, rowFilteredHeader) => {\n        const unit = \"pt\";\n        const size = \"A4\"; // Use A1, A2, A3 or A4\n        const orientation = \"landscape\"; // portrait or landscape\n\n        const marginLeft = 30;\n        const doc = new jsPDF(orientation, unit, size);\n\n        doc.setFontSize(15);\n        const title = \"iCargo Neo Report\";\n\n        const content = {\n            startY: 50,\n            head: rowFilteredHeader,\n            body: rowFilteredValues,\n            tableWidth: \"wrap\", //'auto'|'wrap'|'number'\n            headStyles: { fillColor: [102, 102, 255] },\n            styles: {\n                fontSize: 12,\n                overflowX: \"visible\",\n                overflowY: \"visible\"\n            },\n            theme: \"grid\", //'striped'|'grid'|'plain'|'css'\n            overflow: \"visible\", //'linebreak'|'ellipsize'|'visible'|'hidden'\n            cellWidth: \"auto\",\n            margin: { top: 15, right: 30, bottom: 10, left: 30 }\n        };\n\n        doc.text(title, marginLeft, 40);\n        doc.autoTable(content);\n        doc.save(\"iCargo Neo Report.pdf\");\n\n        isDownload = false;\n    };\n\n    const downloadCSVFile = (filteredRowValue) => {\n        const fileType =\n            \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\n        const fileExtension = \".csv\";\n        const fileName = \"iCargo Neo Report\";\n        const ws = XLSX.utils.json_to_sheet(filteredRowValue);\n        const wb = { Sheets: { data: ws }, SheetNames: [\"data\"] };\n        const excelBuffer = XLSX.write(wb, { bookType: \"csv\", type: \"array\" });\n        const data = new Blob([excelBuffer], { type: fileType });\n        FileSaver.saveAs(data, fileName + fileExtension);\n    };\n\n    const downloadXLSFile = (filteredRowValue) => {\n        const fileType =\n            \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\n        const fileExtension = \".xlsx\";\n        const fileName = \"iCargo Neo Report\";\n        const ws = XLSX.utils.json_to_sheet(filteredRowValue);\n        const wb = { Sheets: { data: ws }, SheetNames: [\"data\"] };\n        const excelBuffer = XLSX.write(wb, { bookType: \"xlsx\", type: \"array\" });\n        const data = new Blob([excelBuffer], { type: fileType });\n        FileSaver.saveAs(data, fileName + fileExtension);\n    };\n\n    const filterColumnsList = (event) => {\n        let { value } = event ? event.target : \"\";\n        value = value ? value.toLowerCase() : \"\";\n        if (value !== \"\") {\n            setSearchedColumns(\n                originalColumns\n                    .filter((column) => {\n                        return column.Header.toLowerCase().includes(value);\n                    })\n                    .concat(\n                        getRemarksColumnIfAvailable().filter((column) => {\n                            return column.Header.toLowerCase().includes(value);\n                        })\n                    )\n            );\n        } else {\n            setSearchedColumns(updatedColumns);\n        }\n    };\n\n    const isCheckboxSelected = (header) => {\n        if (header === \"Select All\") {\n            return managedColumns.length === searchedColumns.length;\n        }\n        const selectedColumn = managedColumns.filter((column) => {\n            return column.Header === header;\n        });\n        return selectedColumn && selectedColumn.length > 0;\n    };\n\n    const selectAllColumns = (event) => {\n        if (event.target.checked) {\n            setManagedColumns(updatedColumns);\n        } else {\n            setManagedColumns([]);\n        }\n    };\n\n    const selectSingleColumn = (event) => {\n        const { currentTarget } = event;\n        const { checked, value } = currentTarget;\n\n        // If column checkbox is checked\n        if (checked) {\n            // Find the index of selected column from original column array and also find the user selected column\n            let indexOfColumnToAdd = updatedColumns.findIndex((column) => {\n                return column.Header === value;\n            });\n            const itemToAdd = updatedColumns[indexOfColumnToAdd];\n\n            // Loop through the managedColumns array to find the position of the column that is present previous to the user selected column\n            // Find index of that previous column and push the new column to add in that position\n            let prevItemIndex = -1;\n            while (indexOfColumnToAdd > 0 && prevItemIndex === -1) {\n                prevItemIndex = managedColumns.findIndex((column) => {\n                    return (\n                        column.Header ===\n                        updatedColumns[indexOfColumnToAdd - 1].Header\n                    );\n                });\n                indexOfColumnToAdd -= 1;\n            }\n\n            const newColumnsList = managedColumns.slice(0); // Copying state value\n            newColumnsList.splice(prevItemIndex + 1, 0, itemToAdd);\n            setManagedColumns(newColumnsList);\n        } else {\n            setManagedColumns(\n                managedColumns.filter((column) => {\n                    return column.Header !== value;\n                })\n            );\n        }\n    };\n\n    const changeDownloadType = (event) => {\n        const { value, checked } = event ? event.currentTarget : \"\";\n        if (checked) {\n            setDownloadTypes(downloadTypes.concat([value]));\n        } else {\n            setDownloadTypes(\n                downloadTypes.filter((type) => {\n                    return type !== value;\n                })\n            );\n        }\n    };\n\n    useEffect(() => {\n        setManagedColumns(updatedColumnsPerUserSelection);\n    }, [columns, isRowExpandEnabled]);\n\n    if (isExportOverlayOpen) {\n        return (\n            <ClickAwayListener onClickAway={toggleExportDataOverlay}>\n                <div className=\"neo-popover neo-popover--exports exports--grid\">\n                    <div className=\"neo-popover__export export__grid\">\n                        <div className=\"export__chooser\">\n                            <div className=\"export__header\">\n                                <div className=\"\">\n                                    <strong>Export Data</strong>\n                                </div>\n                            </div>\n                            <div className=\"export__body\">\n                                <div>\n                                    <input\n                                        type=\"text\"\n                                        placeholder=\"Search column\"\n                                        className=\"custom__ctrl\"\n                                        onChange={filterColumnsList}\n                                    />\n                                </div>\n                                <div className=\"export__wrap export__headertxt\">\n                                    <div className=\"export__checkbox\">\n                                        <input\n                                            type=\"checkbox\"\n                                            value=\"Select All\"\n                                            checked={isCheckboxSelected(\n                                                \"Select All\"\n                                            )}\n                                            onChange={selectAllColumns}\n                                        />\n                                    </div>\n                                    <div className=\"export__txt\">\n                                        Select All\n                                    </div>\n                                </div>\n                                {searchedColumns.map((column, index) => {\n                                    return (\n                                        <div\n                                            className=\"export__wrap\"\n                                            key={index}\n                                        >\n                                            <div className=\"export__checkbox\">\n                                                <input\n                                                    type=\"checkbox\"\n                                                    value={column.Header}\n                                                    checked={isCheckboxSelected(\n                                                        column.Header\n                                                    )}\n                                                    onChange={\n                                                        selectSingleColumn\n                                                    }\n                                                />\n                                            </div>\n                                            <div className=\"export__txt\">\n                                                {column.Header}\n                                            </div>\n                                        </div>\n                                    );\n                                })}\n                            </div>\n                        </div>\n                        <div className=\"export__settings\">\n                            <div className=\"export__header\">\n                                <div className=\"export__headerTxt\" />\n                                <div className=\"export__close\">\n                                    <i\n                                        className=\"fa fa-times\"\n                                        aria-hidden=\"true\"\n                                        onClick={toggleExportDataOverlay}\n                                    />\n                                </div>\n                            </div>\n                            <div className=\"export__as\">Export As</div>\n                            <div className=\"export__body\">\n                                <div className=\"export__reorder\">\n                                    <div className=\"check-wrap\">\n                                        <input\n                                            type=\"checkbox\"\n                                            id=\"chk_pdf\"\n                                            value=\"pdf\"\n                                            checked={downloadTypes.includes(\n                                                \"pdf\"\n                                            )}\n                                            onChange={changeDownloadType}\n                                        />\n                                    </div>\n                                    <div className=\"export__file\">\n                                        <i\n                                            className=\"fa fa-file-pdf-o\"\n                                            aria-hidden=\"true\"\n                                        />\n                                        <br />\n                                        <strong>PDF</strong>\n                                    </div>\n                                </div>\n                                <div className=\"export__reorder\">\n                                    <div className=\"check-wrap\">\n                                        <input\n                                            type=\"checkbox\"\n                                            id=\"chk_excel\"\n                                            value=\"excel\"\n                                            checked={downloadTypes.includes(\n                                                \"excel\"\n                                            )}\n                                            onChange={changeDownloadType}\n                                        />\n                                    </div>\n                                    <div className=\"export__file\">\n                                        <i\n                                            className=\"fa fa-file-excel-o\"\n                                            aria-hidden=\"true\"\n                                        />\n                                        <br />\n                                        <strong>Excel</strong>\n                                    </div>\n                                </div>\n                                <div className=\"export__reorder\">\n                                    <div className=\"check-wrap\">\n                                        <input\n                                            type=\"checkbox\"\n                                            id=\"chk_csv\"\n                                            value=\"csv\"\n                                            checked={downloadTypes.includes(\n                                                \"csv\"\n                                            )}\n                                            onChange={changeDownloadType}\n                                        />\n                                    </div>\n                                    <div className=\"export__file\">\n                                        <i\n                                            className=\"fa fa-file-text-o\"\n                                            aria-hidden=\"true\"\n                                        />\n                                        <br />\n                                        <strong>CSV</strong>\n                                    </div>\n                                </div>\n                                <div className=\"exportWarning\">\n                                    <span className=\"alert alert-danger\">\n                                        <strong>{warning}</strong>\n                                    </span>\n                                </div>\n                                <div>\n                                    {isDownload ? (\n                                        <h2 style={{ textAlign: \"center\" }}>\n                                            Loading...\n                                        </h2>\n                                    ) : null}\n                                </div>\n                            </div>\n                            <div className=\"export__footer\">\n                                <div className=\"export__btns\">\n                                    <button\n                                        type=\"button\"\n                                        className=\"btns\"\n                                        onClick={toggleExportDataOverlay}\n                                    >\n                                        Cancel\n                                    </button>\n                                    <button\n                                        type=\"button\"\n                                        className=\"btns btns__save\"\n                                        onClick={exportRowData}\n                                    >\n                                        Export\n                                    </button>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </ClickAwayListener>\n        );\n    }\n    return <div />;\n});\n\nExportData.propTypes = {\n    isExportOverlayOpen: PropTypes.any,\n    toggleExportDataOverlay: PropTypes.any,\n    rows: PropTypes.any,\n    originalColumns: PropTypes.any,\n    isExpandContentAvailable: PropTypes.any,\n    additionalColumn: PropTypes.any\n};\n\nexport default ExportData;\n","import React, {\n    useCallback,\n    useState,\n    memo,\n    useEffect,\n    createRef,\n    useMemo\n} from \"react\";\nimport {\n    useTable,\n    useResizeColumns,\n    useFlexLayout,\n    useRowSelect,\n    useSortBy,\n    useFilters,\n    useGlobalFilter,\n    useExpanded\n} from \"react-table\";\nimport { VariableSizeList as List } from \"react-window\";\nimport AutoSizer from \"react-virtualized-auto-sizer\";\nimport InfiniteLoader from \"react-window-infinite-loader\";\nimport PropTypes from \"prop-types\";\nimport RowSelector from \"./Functions/RowSelector\";\nimport DefaultColumnFilter from \"./Functions/DefaultColumnFilter\";\nimport GlobalFilter from \"./Functions/GlobalFilter\";\nimport RowOptions from \"./Functions/RowOptions\";\nimport RowEditOverlay from \"./Functions/RowEditOverlay\";\nimport RowDeleteOverLay from \"./Functions/RowDeleteOverLay\";\nimport ColumnReordering from \"./Overlays/managecolumns\";\nimport GroupSort from \"./Overlays/groupsort\";\nimport ExportData from \"./Overlays/exportdata\";\n\nconst listRef = createRef(null);\n\nconst Customgrid = memo((props) => {\n    const {\n        title,\n        gridHeight,\n        gridWidth,\n        managableColumns,\n        originalColumns,\n        additionalColumn,\n        data,\n        getRowEditOverlay,\n        updateRowInGrid,\n        deleteRowFromGrid,\n        globalSearchLogic,\n        selectBulkData,\n        calculateRowHeight,\n        isExpandContentAvailable,\n        displayExpandedContent,\n        rowActions,\n        rowActionCallback,\n        hasNextPage,\n        isNextPageLoading,\n        loadNextPage,\n        doGroupSort\n    } = props;\n\n    // Local state value for holding columns configuration\n    const [columns, setColumns] = useState(managableColumns);\n    // Local state value for holding the boolean value to check if row expand is available\n    const [isRowExpandEnabled, setIsRowExpandEnabled] = useState(\n        isExpandContentAvailable\n    );\n\n    // Variables used for handling infinite loading\n    const itemCount = hasNextPage ? data.length + 1 : data.length;\n    const loadMoreItems = isNextPageLoading\n        ? () => {}\n        : loadNextPage || (() => {});\n    const isItemLoaded = (index) => !hasNextPage || index < data.length;\n\n    // Local state value for checking if column filter is open/closed\n    const [isFilterOpen, setFilterOpen] = useState(false);\n    // Toggle column filter state value based on UI clicks\n    const toggleColumnFilter = () => {\n        setFilterOpen(!isFilterOpen);\n    };\n\n    // Local state value for checking if column filter is open/closed\n    const [isRowEditOverlyOpen, setIsRowEditOverlyOpen] = useState(false);\n    // Local state value to hold row data that is going to be edited\n    const [editedRowData, setEditedRowData] = useState(null);\n    // Bind the user defined row edit overlay into Grid\n    const bindRowEditOverlay = (rowValue) => {\n        setEditedRowData(rowValue);\n        setIsRowEditOverlyOpen(true);\n    };\n    // Close the row edit overlay\n    const closeRowEditOverlay = () => {\n        setEditedRowData(null);\n        setIsRowEditOverlyOpen(false);\n    };\n\n    // Local state value for checking if column filter is open/closed\n    const [isRowDeleteOverlyOpen, setIsRowDeleteOverlyOpen] = useState(false);\n    // Local state value to hold row data that is going to be deleted\n    const [deletedRowData, setDeletedRowData] = useState(null);\n    // Bind the user defined row delete overlay into Grid\n    const bindRowDeleteOverlay = (rowValue) => {\n        setDeletedRowData(rowValue);\n        setIsRowDeleteOverlyOpen(true);\n    };\n    // Close the row edit overlay\n    const closeRowDeleteOverlay = () => {\n        setDeletedRowData(null);\n        setIsRowDeleteOverlyOpen(false);\n    };\n\n    // Local state value for checking if group Sort Overlay is open/closed.\n    const [isGroupSortOverLayOpen, setGroupSortOverLay] = useState(false);\n\n    // Toggle group Sort state value based on UI clicks\n    const toggleGroupSortOverLay = () => {\n        setGroupSortOverLay(!isGroupSortOverLayOpen);\n    };\n\n    const applyGroupSort = (sortOptions) => {\n        doGroupSort(sortOptions);\n    };\n\n    // Local state value for hiding/unhiding column management overlay\n    const [isManageColumnOpen, setManageColumnOpen] = useState(false);\n\n    // Toggle column manage overlay show/hide state value based on UI clicks\n    const toggleManageColumns = () => {\n        setManageColumnOpen(!isManageColumnOpen);\n    };\n\n    // Callback method from column manage overlay to update the column structure of the grid\n    const updateColumnStructure = (newColumnStructure, remarksColumn) => {\n        setColumns([...newColumnStructure]);\n        setIsRowExpandEnabled(!!(remarksColumn && remarksColumn.length > 0));\n    };\n\n    // Local state value for hiding/unhiding export data overlay\n    const [isExportOverlayOpen, setIsExportOverlayOpen] = useState(false);\n\n    // Toggle export overlay show/hide state value based on UI clicks\n    const toggleExportDataOverlay = () => {\n        setIsExportOverlayOpen(!isExportOverlayOpen);\n    };\n\n    // Column filter added for all columns by default\n    const defaultColumn = useMemo(\n        () => ({\n            Filter: DefaultColumnFilter\n        }),\n        []\n    );\n\n    // Initialize react-table instance with the values received through properties\n    const {\n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        rows,\n        prepareRow,\n        selectedFlatRows,\n        state,\n        setGlobalFilter\n    } = useTable(\n        {\n            columns,\n            data,\n            defaultColumn,\n            globalFilter: (rowsToFilter, columnsToFilter, filterValue) => {\n                // Call global search function defined in application, if it is present\n                if (\n                    globalSearchLogic &&\n                    typeof globalSearchLogic === \"function\"\n                ) {\n                    return globalSearchLogic(\n                        rowsToFilter,\n                        columnsToFilter,\n                        filterValue\n                    );\n                }\n                return rowsToFilter;\n            },\n            autoResetFilters: false,\n            autoResetGlobalFilter: false,\n            autoResetSortBy: false,\n            autoResetExpanded: false,\n            autoResetSelectedRows: false\n        },\n        useFilters,\n        useGlobalFilter,\n        useSortBy,\n        useExpanded,\n        useRowSelect,\n        useFlexLayout,\n        useResizeColumns,\n        (hooks) => {\n            // Add checkbox for all rows in grid, with different properties for header row and body rows\n            hooks.allColumns.push((hookColumns) => [\n                {\n                    id: \"selection\",\n                    columnId: \"column_custom_0\",\n                    disableResizing: true,\n                    disableFilters: true,\n                    disableSortBy: true,\n                    minWidth: 35,\n                    width: 35,\n                    maxWidth: 35,\n                    Header: ({ getToggleAllRowsSelectedProps }) => {\n                        const headerSelectProps = {\n                            ...getToggleAllRowsSelectedProps()\n                        };\n                        return (\n                            <RowSelector\n                                checked={headerSelectProps.checked}\n                                indeterminate={headerSelectProps.indeterminate}\n                                onChange={headerSelectProps.onChange}\n                                style={headerSelectProps.style}\n                                title={headerSelectProps.title}\n                            />\n                        );\n                    },\n                    Cell: ({ row }) => (\n                        <RowSelector {...row.getToggleRowSelectedProps()} />\n                    )\n                },\n                ...hookColumns,\n                {\n                    id: \"custom\",\n                    columnId: \"column_custom_1\",\n                    disableResizing: true,\n                    disableFilters: true,\n                    disableSortBy: true,\n                    minWidth: 35,\n                    width: 35,\n                    maxWidth: 35,\n                    Cell: ({ row }) => {\n                        return (\n                            <div className=\"action\">\n                                <RowOptions\n                                    row={row}\n                                    rowActions={rowActions}\n                                    rowActionCallback={rowActionCallback}\n                                    bindRowEditOverlay={bindRowEditOverlay}\n                                    bindRowDeleteOverlay={bindRowDeleteOverlay}\n                                />\n                                {isRowExpandEnabled ? (\n                                    <span\n                                        className=\"expander\"\n                                        {...row.getToggleRowExpandedProps()}\n                                    >\n                                        {row.isExpanded ? (\n                                            <i\n                                                className=\"fa fa-angle-up\"\n                                                aria-hidden=\"true\"\n                                            />\n                                        ) : (\n                                            <i\n                                                className=\"fa fa-angle-down\"\n                                                aria-hidden=\"true\"\n                                            />\n                                        )}\n                                    </span>\n                                ) : null}\n                            </div>\n                        );\n                    }\n                }\n            ]);\n        }\n    );\n\n    // Export selected row data and pass it to the callback method\n    const bulkSelector = () => {\n        if (selectBulkData) {\n            selectBulkData(selectedFlatRows);\n        }\n    };\n\n    // This code is to handle the row height calculation while expanding a row or resizing a column\n    useEffect(() => {\n        if (listRef && listRef.current) {\n            listRef.current.resetAfterIndex(0, true);\n        }\n    });\n\n    // Render each row and cells in each row, using attributes from react window list.\n    const RenderRow = useCallback(\n        ({ index, style }) => {\n            if (isItemLoaded(index)) {\n                const row = rows[index];\n                prepareRow(row);\n                return (\n                    <div\n                        {...row.getRowProps({ style })}\n                        className=\"table-row tr\"\n                    >\n                        <div className=\"table-row-wrap\">\n                            {row.cells.map((cell) => {\n                                return (\n                                    <div\n                                        {...cell.getCellProps()}\n                                        className=\"table-cell td\"\n                                    >\n                                        {cell.render(\"Cell\")}\n                                    </div>\n                                );\n                            })}\n                        </div>\n                        {/* Check if row eapand icon is clicked, and if yes, call function to bind content to the expanded region */}\n                        {isRowExpandEnabled && row.isExpanded ? (\n                            <div className=\"expand\">\n                                {displayExpandedContent\n                                    ? displayExpandedContent(row)\n                                    : null}\n                            </div>\n                        ) : null}\n                    </div>\n                );\n            }\n            return null; // Added due to lint error expected to return a value in arrow function\n        },\n        [prepareRow, rows, displayExpandedContent]\n    );\n\n    // Render table title, global search component, button to show/hide column filter, button to export selected row data & the grid\n    // Use properties and methods provided by react-table\n    // Autosizer used for calculating grid height (don't consider window width and column resizing value changes)\n    // Infinite loader used for lazy loading, with the properties passed here and other values calculated at the top\n    // React window list is used for implementing virtualization, specifying the item count in a frame and height of each rows in it.\n    return (\n        <div className=\"table-wrapper\" style={{ width: gridWidth || \"100%\" }}>\n            <link\n                rel=\"stylesheet\"\n                href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\"\n            />\n            <div className=\"neo-grid-header\">\n                <div className=\"neo-grid-header__results\">\n                    <strong>{rows.length}</strong>\n                    <span>{title || \"Rows\"}</span>\n                </div>\n                <div className=\"neo-grid-header__utilities\">\n                    <ColumnReordering\n                        isManageColumnOpen={isManageColumnOpen}\n                        toggleManageColumns={toggleManageColumns}\n                        originalColumns={originalColumns}\n                        isExpandContentAvailable={isExpandContentAvailable}\n                        additionalColumn={[additionalColumn]}\n                        updateColumnStructure={updateColumnStructure}\n                    />\n                    <GlobalFilter\n                        globalFilter={state.globalFilter}\n                        setGlobalFilter={setGlobalFilter}\n                    />\n                    <GroupSort\n                        isGroupSortOverLayOpen={isGroupSortOverLayOpen}\n                        toggleGroupSortOverLay={toggleGroupSortOverLay}\n                        originalColumns={originalColumns}\n                        applyGroupSort={applyGroupSort}\n                    />\n                    <ExportData\n                        isExportOverlayOpen={isExportOverlayOpen}\n                        toggleExportDataOverlay={toggleExportDataOverlay}\n                        rows={rows}\n                        originalColumns={originalColumns}\n                        columns={columns} //Updated columns structure from manage columns overlay\n                        isRowExpandEnabled={isRowExpandEnabled} //Updated additional column structure from manage columns overlay\n                        isExpandContentAvailable={isExpandContentAvailable}\n                        additionalColumn={[additionalColumn]}\n                    />\n                    <div\n                        className=\"utilities-icon keyword-search\"\n                        role=\"presentation\"\n                        onClick={toggleColumnFilter}\n                    >\n                        <i className=\"fa fa-filter\" aria-hidden=\"true\" />\n                    </div>\n                    <div\n                        className=\"utilities-icon bulk-select\"\n                        role=\"presentation\"\n                        onClick={bulkSelector}\n                    >\n                        <i\n                            className=\"fa fa-pencil-square-o\"\n                            aria-hidden=\"true\"\n                        />\n                    </div>\n                    <div\n                        className=\"utilities-icon bulk-select\"\n                        role=\"presentation\"\n                        onClick={toggleGroupSortOverLay}\n                    >\n                        <i\n                            className=\"fa fa-sort-amount-desc\"\n                            aria-hidden=\"true\"\n                        />\n                    </div>\n                    <div\n                        className=\"utilities-icon manage-columns\"\n                        role=\"presentation\"\n                        onClick={toggleManageColumns}\n                    >\n                        <i className=\"fa fa-columns\" aria-hidden=\"true\" />\n                    </div>\n                    <div\n                        className=\"utilities-icon manage-columns\"\n                        role=\"presentation\"\n                        onClick={toggleExportDataOverlay}\n                    >\n                        <i className=\"fa fa-share-alt\" aria-hidden=\"true\" />\n                    </div>\n                </div>\n            </div>\n\n            <div className=\"table-popus\">\n                {isRowEditOverlyOpen ? (\n                    <div className=\"overlay\">\n                        <RowEditOverlay\n                            row={editedRowData}\n                            columns={columns}\n                            isRowExpandEnabled={isRowExpandEnabled}\n                            additionalColumn={additionalColumn}\n                            getRowEditOverlay={getRowEditOverlay}\n                            closeRowEditOverlay={closeRowEditOverlay}\n                            updateRowInGrid={updateRowInGrid}\n                        />\n                    </div>\n                ) : null}\n                {isRowDeleteOverlyOpen ? (\n                    <div className=\"overlay\">\n                        <RowDeleteOverLay\n                            row={deletedRowData}\n                            closeRowDeleteOverlay={closeRowDeleteOverlay}\n                            deleteRowFromGrid={deleteRowFromGrid}\n                        />\n                    </div>\n                ) : null}\n            </div>\n\n            <div\n                className=\"tableContainer table-outer neo-grid\"\n                style={{\n                    height: gridHeight || \"50vh\",\n                    overflowX: \"auto\",\n                    overflowY: \"hidden\"\n                }}\n            >\n                <AutoSizer disableWidth disableResizing>\n                    {({ height }) => (\n                        <div {...getTableProps()} className=\"table\">\n                            <div className=\"thead table-row table-row--head\">\n                                {headerGroups.map((headerGroup) => (\n                                    <div\n                                        {...headerGroup.getHeaderGroupProps()}\n                                        className=\"tr\"\n                                    >\n                                        {headerGroup.headers.map((column) => (\n                                            <div\n                                                {...column.getHeaderProps()}\n                                                className=\"table-cell column-heading th\"\n                                            >\n                                                <div\n                                                    {...column.getSortByToggleProps()}\n                                                >\n                                                    {column.render(\"Header\")}\n                                                    <span>\n                                                        {column.isSorted ? (\n                                                            column.isSortedDesc ? (\n                                                                <i\n                                                                    className=\"fa fa-sort-desc\"\n                                                                    aria-hidden=\"true\"\n                                                                />\n                                                            ) : (\n                                                                <i\n                                                                    className=\"fa fa-sort-asc\"\n                                                                    aria-hidden=\"true\"\n                                                                />\n                                                            )\n                                                        ) : (\n                                                            \"\"\n                                                        )}\n                                                    </span>\n                                                </div>\n                                                <div\n                                                    className={`txt-wrap column-filter ${\n                                                        isFilterOpen\n                                                            ? \"open\"\n                                                            : \"\"\n                                                    }`}\n                                                >\n                                                    {!column.disableFilters\n                                                        ? column.render(\n                                                              \"Filter\"\n                                                          )\n                                                        : null}\n                                                </div>\n                                                {column.canResize && (\n                                                    <div\n                                                        {...column.getResizerProps()}\n                                                        className=\"resizer\"\n                                                    />\n                                                )}\n                                            </div>\n                                        ))}\n                                    </div>\n                                ))}\n                            </div>\n                            <div {...getTableBodyProps()} className=\"tbody\">\n                                <InfiniteLoader\n                                    isItemLoaded={isItemLoaded}\n                                    itemCount={itemCount}\n                                    loadMoreItems={loadMoreItems}\n                                >\n                                    {({ onItemsRendered, ref }) => (\n                                        <List\n                                            ref={(list) => {\n                                                ref(list);\n                                                listRef.current = list;\n                                            }}\n                                            style={{ overflowX: \"hidden\" }}\n                                            height={height - 60}\n                                            itemCount={rows.length}\n                                            itemSize={(index) => {\n                                                return calculateRowHeight(\n                                                    rows[index],\n                                                    headerGroups &&\n                                                        headerGroups.length\n                                                        ? headerGroups[0]\n                                                              .headers\n                                                        : []\n                                                );\n                                            }}\n                                            onItemsRendered={onItemsRendered}\n                                            overscanCount={20}\n                                        >\n                                            {RenderRow}\n                                        </List>\n                                    )}\n                                </InfiniteLoader>\n                            </div>\n                        </div>\n                    )}\n                </AutoSizer>\n            </div>\n        </div>\n    );\n});\n\nCustomgrid.propTypes = {\n    title: PropTypes.any,\n    gridHeight: PropTypes.any,\n    gridWidth: PropTypes.any,\n    managableColumns: PropTypes.any,\n    originalColumns: PropTypes.any,\n    data: PropTypes.any,\n    getRowEditOverlay: PropTypes.any,\n    updateRowInGrid: PropTypes.any,\n    deleteRowFromGrid: PropTypes.any,\n    globalSearchLogic: PropTypes.any,\n    selectBulkData: PropTypes.any,\n    calculateRowHeight: PropTypes.any,\n    isExpandContentAvailable: PropTypes.any,\n    displayExpandedContent: PropTypes.any,\n    hasNextPage: PropTypes.any,\n    isNextPageLoading: PropTypes.any,\n    loadNextPage: PropTypes.any,\n    doGroupSort: PropTypes.any,\n    getToggleAllRowsSelectedProps: PropTypes.any,\n    row: PropTypes.any,\n    additionalColumn: PropTypes.any\n};\n\nexport default Customgrid;\n","import React, { memo, useMemo, useState, useEffect } from \"react\";\nimport {\n    extractColumns,\n    extractAdditionalColumn\n} from \"./Utilities/ColumnsUtilities\";\nimport { AdditionalColumnContext } from \"./Utilities/TagsContext\";\nimport AdditionalColumnTag from \"./Functions/AdditionalColumnTag\";\nimport Customgrid from \"./Customgrid\";\nimport \"!style-loader!css-loader!sass-loader!./Styles/main.scss\";\nimport PropTypes from \"prop-types\";\n\nconst Grid = memo((props) => {\n    const {\n        title,\n        gridHeight,\n        gridWidth,\n        columns,\n        columnToExpand,\n        rowActions,\n        rowActionCallback,\n        fetchData,\n        getRowEditOverlay,\n        updateRowData,\n        deleteRowData,\n        selectBulkData,\n        calculateRowHeight\n    } = props;\n\n    // Check if device is desktop\n    const isDesktop = window.innerWidth > 1024;\n\n    // Set state value for variable to check if there is anext page available\n    const [hasNextPage, setHasNextPage] = useState(true);\n    // Set state value for variable to check if the loading process is going on\n    const [isNextPageLoading, setIsNextPageLoading] = useState(false);\n    // Local state value for checking if data is being loaded from API\n    const [isLoading, setIsLoading] = useState(false);\n    // Set state value for variable to hold grid data\n    const [items, setItems] = useState([]);\n    // Local state for group sort options\n    const [groupSortOptions, setGroupSortOptions] = useState([]);\n\n    // Logic for searching in each column\n    const searchColumn = (column, original, searchText) => {\n        // Return value\n        let isValuePresent = false;\n        // Find the accessor node and inner cells array of each column\n        const { accessor, innerCells } = column;\n        // Find accessor value of a column\n        const rowAccessorValue = original[accessor];\n        // Check if inner cells are available and save value to boolean var\n        const isInnerCellsPresent = innerCells && innerCells.length > 0;\n        // Enter if cell value is object or array\n        if (typeof rowAccessorValue === \"object\" && isInnerCellsPresent) {\n            // Enter if cell value is array\n            if (rowAccessorValue.length > 0) {\n                // Loop through cell array value and check if searched text is present\n                rowAccessorValue.map((value) => {\n                    innerCells.map((cell) => {\n                        const dataAccessor = value[cell.accessor];\n                        if (\n                            dataAccessor &&\n                            dataAccessor\n                                .toString()\n                                .toLowerCase()\n                                .includes(searchText)\n                        ) {\n                            isValuePresent = true;\n                        }\n                    });\n                });\n            } else {\n                // If cell value is an object, loop through inner cells and check if searched text is present\n                innerCells.map((cell) => {\n                    const dataAccessor = original[accessor][cell.accessor];\n                    if (\n                        dataAccessor &&\n                        dataAccessor\n                            .toString()\n                            .toLowerCase()\n                            .includes(searchText)\n                    ) {\n                        isValuePresent = true;\n                    }\n                });\n            }\n        } else {\n            // If cell value is not an object or array, convert it to text and check if searched text is present\n            const dataAccessor = original[accessor];\n            if (\n                dataAccessor &&\n                dataAccessor.toString().toLowerCase().includes(searchText)\n            ) {\n                isValuePresent = true;\n            }\n        }\n        return isValuePresent;\n    };\n\n    // Gets triggered when one row item is updated\n    const updateRowInGrid = (original, updatedRow) => {\n        setItems((old) =>\n            old.map((row) => {\n                if (\n                    Object.entries(row).toString() ===\n                    Object.entries(original).toString()\n                ) {\n                    row = updatedRow;\n                }\n                return row;\n            })\n        );\n        if (updateRowData) {\n            updateRowData(updatedRow);\n        }\n    };\n\n    // Gets triggered when one row item is deleted\n    const deleteRowFromGrid = (original) => {\n        setItems((old) =>\n            old.filter((row) => {\n                return row !== original;\n            })\n        );\n        if (deleteRowData) {\n            deleteRowData(original);\n        }\n    };\n\n    // Extract/add and modify required data from user configured columns and expand columns\n    const processedColumns = extractColumns(\n        columns,\n        searchColumn,\n        isDesktop,\n        updateRowInGrid\n    );\n    const additionalColumn = extractAdditionalColumn(\n        columnToExpand,\n        isDesktop,\n        updateRowInGrid\n    );\n\n    // Create memoized column, to be used by grid component\n    const gridColumns = useMemo(() => processedColumns, []);\n\n    // Local variable for keeping the expanded row rendering method\n    const renderExpandedContent = additionalColumn\n        ? additionalColumn.displayCell\n        : null;\n\n    // #region - Check if data is hidden or not and display data in rendered section\n\n    // Process data to be rendered to expanded view and return that data to the render function\n    const displayExpandedContent = (row) => {\n        const { original } = row;\n        if (original) {\n            return (\n                <AdditionalColumnContext.Provider\n                    value={{ additionalColumn: additionalColumn }}\n                >\n                    {renderExpandedContent(original, AdditionalColumnTag)}\n                </AdditionalColumnContext.Provider>\n            );\n        }\n    };\n    // #endregion\n\n    // Add logic for doing global search in the grid\n    const globalSearchLogic = (rows, columns, filterValue) => {\n        // Enter search logic only if rows and columns are available\n        if (filterValue && processedColumns.length > 0) {\n            // convert user searched text to lower case\n            const searchText = filterValue.toLowerCase();\n            // Loop through all rows\n            return rows.filter((row) => {\n                // Find original data value of each row\n                const { original } = row;\n                // Return value of the filter method\n                let returnValue = false;\n                // Loop through all column values for each row\n                processedColumns.map((column) => {\n                    // Do search for each column\n                    returnValue =\n                        returnValue ||\n                        searchColumn(column, original, searchText);\n                });\n                return returnValue;\n            });\n        }\n        return rows;\n    };\n\n    // Add logic to calculate height of each row, based on the content of  or more columns\n    // This can be used only if developer using the component has not passed a function to calculate row height\n    const calculateDefaultRowHeight = (row, gridColumns) => {\n        // Minimum height for each row\n        let rowHeight = 50;\n        if (gridColumns && gridColumns.length > 0 && row) {\n            // Get properties of a row\n            const { original, isExpanded } = row;\n            // Find the column with maximum width configured, from grid columns list\n            const columnWithMaxWidth = [...gridColumns].sort((a, b) => {\n                return b.width - a.width;\n            })[0];\n            // Get column properties including the user resized column width (totalFlexWidth)\n            const { id, width, totalFlexWidth } = columnWithMaxWidth;\n            // Get row value of that column\n            const rowValue = original[id];\n            if (rowValue) {\n                // Find the length of text of data in that column\n                const textLength = Object.values(rowValue).join(\",\").length;\n                // This is a formula that was created for the test data used.\n                rowHeight += Math.ceil((80 * textLength) / totalFlexWidth);\n                const widthVariable =\n                    totalFlexWidth > width\n                        ? totalFlexWidth - width\n                        : width - totalFlexWidth;\n                rowHeight += widthVariable / 1000;\n            }\n            // Add logic to increase row height if row is expanded\n            if (isExpanded && additionalColumn) {\n                // Increase height based on the number of inner cells in additional columns\n                rowHeight +=\n                    additionalColumn.innerCells &&\n                    additionalColumn.innerCells.length > 0\n                        ? additionalColumn.innerCells.length * 35\n                        : 35;\n            }\n        }\n        return rowHeight;\n    };\n\n    // #region - Group sorting logic\n    // Function to return sorting logic based on the user selected order of sort\n    const compareValues = (compareOrder, v1, v2) => {\n        if (compareOrder === \"Ascending\") {\n            return v1 > v2 ? 1 : v1 < v2 ? -1 : 0;\n        }\n        return v1 < v2 ? 1 : v1 > v2 ? -1 : 0;\n    };\n    // Function to return sorted data\n    const getSortedData = (originalData) => {\n        return originalData.sort(function (x, y) {\n            let compareResult = 0;\n            groupSortOptions.forEach((option) => {\n                const { sortBy, sortOn, order } = option;\n                const newResult =\n                    sortOn === \"value\"\n                        ? compareValues(order, x[sortBy], y[sortBy])\n                        : compareValues(\n                              order,\n                              x[sortBy][sortOn],\n                              y[sortBy][sortOn]\n                          );\n                compareResult = compareResult || newResult;\n            });\n            return compareResult;\n        });\n    };\n    // #endregion\n\n    // Gets called when group sort is applied or cleared\n    const doGroupSort = (sortOptions) => {\n        setGroupSortOptions(sortOptions);\n    };\n\n    // Gets called when page scroll reaches the bottom of the grid.\n    // Fetch the next set of data and append it to the variable holding grid data and update the state value.\n    // Also update the hasNextPage state value to False once API response is empty, to avoid unwanted API calls.\n    const loadNextPage = (...args) => {\n        const newIndex = args && args.length > 0 ? args[0] : -1;\n        if (newIndex >= 0 && hasNextPage) {\n            setIsLoading(true);\n            setIsNextPageLoading(true);\n            fetchData(newIndex).then((data) => {\n                setIsLoading(false);\n                setHasNextPage(data && data.length > 0);\n                setIsNextPageLoading(false);\n                setItems(items.concat(data));\n            });\n        }\n    };\n\n    useEffect(() => {\n        // Add duplicate copy of inner cells to be used for data chooser\n        processedColumns.map((column) => {\n            if (column.innerCells) {\n                column.originalInnerCells = column.innerCells;\n            }\n            return column;\n        });\n        if (additionalColumn) {\n            const { innerCells } = additionalColumn;\n            if (innerCells) {\n                additionalColumn.originalInnerCells = innerCells;\n            }\n        }\n\n        // Make API call to fetch initial set of data.\n        setIsLoading(true);\n        fetchData(0).then((data) => {\n            setIsLoading(false);\n            setItems(data);\n        });\n    }, []);\n\n    // Sort the data based on the user selected group sort optipons\n    const data = getSortedData([...items]);\n\n    return (\n        <div className=\"grid-component-container\">\n            {data &&\n            data.length > 0 &&\n            processedColumns &&\n            processedColumns.length > 0 ? (\n                <div>\n                    <Customgrid\n                        title={title}\n                        gridHeight={gridHeight}\n                        gridWidth={gridWidth}\n                        managableColumns={gridColumns}\n                        originalColumns={gridColumns}\n                        additionalColumn={additionalColumn}\n                        data={data}\n                        getRowEditOverlay={getRowEditOverlay}\n                        updateRowInGrid={updateRowInGrid}\n                        deleteRowFromGrid={deleteRowFromGrid}\n                        globalSearchLogic={globalSearchLogic}\n                        selectBulkData={selectBulkData}\n                        calculateRowHeight={\n                            calculateRowHeight &&\n                            typeof calculateRowHeight === \"function\"\n                                ? calculateRowHeight\n                                : calculateDefaultRowHeight\n                        }\n                        isExpandContentAvailable={\n                            typeof renderExpandedContent === \"function\"\n                        }\n                        displayExpandedContent={displayExpandedContent}\n                        rowActions={rowActions}\n                        rowActionCallback={rowActionCallback}\n                        hasNextPage={hasNextPage}\n                        isNextPageLoading={isNextPageLoading}\n                        loadNextPage={loadNextPage}\n                        doGroupSort={doGroupSort}\n                    />\n                    {isNextPageLoading ? (\n                        <div id=\"loader\" className=\"background\">\n                            <div className=\"dots container\">\n                                <span />\n                                <span />\n                                <span />\n                            </div>\n                        </div>\n                    ) : null}\n                </div>\n            ) : (\n                <h2 style={{ textAlign: \"center\", marginTop: \"70px\" }}>\n                    {isLoading ? (\n                        \"Initializing Grid...\"\n                    ) : (\n                        <span className=\"error\">\n                            Invalid Data or Column Configurations\n                        </span>\n                    )}\n                </h2>\n            )}\n        </div>\n    );\n});\n\nGrid.propTypes = {\n    title: PropTypes.any,\n    gridHeight: PropTypes.any,\n    gridWidth: PropTypes.any,\n    columns: PropTypes.any,\n    columnToExpand: PropTypes.any,\n    fetchData: PropTypes.any,\n    getRowEditOverlay: PropTypes.any,\n    updateRowData: PropTypes.any,\n    deleteRowData: PropTypes.any,\n    selectBulkData: PropTypes.any,\n    calculateRowHeight: PropTypes.any,\n    cellKey: PropTypes.any,\n    children: PropTypes.any\n};\n\nexport default Grid;\n"],"names":["CellDisplayAndEditContext","createContext","RowEditContext","AdditionalColumnContext","checkInnerCells","column","cellKey","innerCells","innerCellData","find","cell","accessor","CellDisplayAndEditTag","props","contextVallues","useContext","columns","columnKey","selectedColumn","col","React","children","CellDisplayAndEdit","memo","row","updateRowInGrid","useState","isEditOpen","setIsEditOpen","editedRowValue","setEditedRowValue","id","closeEdit","openEdit","getUpdatedRowValue","value","saveEdit","original","originalRowValue","cellDisplayContent","displayCell","cellEditContent","editCell","propTypes","PropTypes","any","extractColumns","searchColumn","isDesktop","filteredColumns","filter","onlyInTablet","onlyInDesktop","modifiedColumns","forEach","index","sortValue","isInnerCellsPresent","length","elem","columnId","displayInExpandedRegion","Cell","disableSortBy","sortType","rowA","rowB","disableFilters","rows","filterValue","searchText","toLowerCase","push","extractAdditionalColumn","additionalColumn","element","AdditionalColumnTag","RowSelector","forwardRef","ref","indeterminate","rest","checkValue","setCheckValue","defaultRef","useRef","resolvedRef","onChange","useEffect","current","DefaultColumnFilter","setFilter","e","target","undefined","GlobalFilter","globalFilter","setGlobalFilter","setValue","useAsyncDebounce","IconSearch","require","RowOptions","rowActions","rowActionCallback","bindRowEditOverlay","bindRowDeleteOverlay","isAdditionalRowOptionsPresent","isRowOptionsOpen","setRowOptionsOpen","openRowOptionsOverlay","closeRowOptionsOverlay","openRowEditOverlay","openDeleteOverlay","additionalActionClicked","actionValue","RowEdit","RowPin","RowDelete","map","action","label","RowEditTag","isRowExpandEnabled","RowEditOverLay","getRowEditOverlay","closeRowEditOverlay","saveRowEdit","rowEditContent","RowDeleteOverLay","closeRowDeleteOverlay","deleteRowFromGrid","deleteRow","ItemTypes","COLUMN","ColumnItem","Header","moveColumn","findColumn","originalInnerCells","isInnerCellSelected","selectInnerCells","originalIndex","useDrag","item","type","collect","monitor","isDragging","end","dropResult","getItem","droppedId","didDrop","drag","useDrop","accept","canDrop","hover","draggedId","overIndex","drop","opacity","node","cursor","ColumnsList","updateColumnsInState","columnsToManage","c","indexOf","atIndex","update","$splice","display","flexWrap","ColumnReordering","isManageColumnOpen","toggleManageColumns","originalColumns","isExpandContentAvailable","additionalColumnHeader","getRemarksColumnIfAvailable","concatedOriginalColumns","concat","managedColumns","setManagedColumns","searchedColumns","setSearchedColumns","remarksColumnToManage","setRemarksColumnToManage","isErrorDisplayed","setIsErrorDisplayed","HTML5toTouch","backends","backend","HTML5Backend","TouchBackend","options","enableMouseEvents","preview","transition","TouchTransition","filterColumnsList","event","includes","columnList","columnHeader","isItemPresentInList","list","headerValue","filteredList","isCheckboxSelected","header","columnListToSearch","findIndexOfItem","columnsList","indexOfColumnToAdd","findIndex","selectAllColumns","currentTarget","checked","selectSingleColumn","itemToAdd","prevItemIndex","newColumnsList","splice","findAndSelectInnerCells","stateColumnList","setStateColumnList","dataset","columnheader","selectRemarksInnerCells","doColumnUpdate","updateColumnStructure","resetInnerCells","resetColumnUpdate","marginLeft","color","MultiBackend","SORT_ITEM","SortItem","sortOption","moveSort","findSort","updateSingleSortingOption","copySortOption","deleteSortOption","getInncerCellsOfColumn","columnAccessor","changeSortByOptions","newSortByValue","innerCellsList","order","changeSortOnOptions","newSortOnValue","sortBy","changeSortOrderOptions","newSortOrderValue","sortOn","copySort","deleteSort","orgItem","innerCellItem","innerCellIndex","SortCopy","SortDelete","SortingList","updateSortingOptions","sortOptions","sortId","sort","GroupSort","isGroupSortOverLayOpen","toggleGroupSortOverLay","applyGroupSort","sortingOrders","defaultSortingOption","setSortOptions","sortingOptions","addSortingOptions","clearSortingOptions","sortIndex","sortByValue","sortOnValue","sortOrder","newOptionsList","slice","newSortingOption","updatedSortOptions","option","newOption","applySort","isError","optionIndex","duplicateSort","opt","optIndex","ExportData","isExportOverlayOpen","toggleExportDataOverlay","getRemarksColumnIfSelectedByUser","updatedColumns","updatedColumnsPerUserSelection","downloadTypes","setDownloadTypes","warning","setWarning","isDownload","exportRowData","filteredRow","filteredRowValues","filteredRowHeader","rowLength","rowDetails","filteredColumnVal","rowFilteredValues","rowFilteredHeader","columnName","accessorRowValue","columnValue","innerCellAccessor","innerCellHeader","innerCellAccessorValue","toString","expandedCell","expandedCellAccessor","expandedCellHeader","expandedCellValue","formattedValue","newValues","cellValue","Object","values","join","downloadPDF","downloadXLSFile","downloadCSVFile","unit","size","orientation","doc","jsPDF","setFontSize","title","content","startY","head","body","tableWidth","headStyles","fillColor","styles","fontSize","overflowX","overflowY","theme","overflow","cellWidth","margin","top","right","bottom","left","text","autoTable","save","filteredRowValue","fileType","fileExtension","fileName","ws","XLSX","json_to_sheet","wb","Sheets","data","SheetNames","excelBuffer","bookType","Blob","FileSaver","changeDownloadType","textAlign","listRef","createRef","Customgrid","gridHeight","gridWidth","managableColumns","globalSearchLogic","selectBulkData","calculateRowHeight","displayExpandedContent","hasNextPage","isNextPageLoading","loadNextPage","doGroupSort","setColumns","setIsRowExpandEnabled","itemCount","loadMoreItems","isItemLoaded","isFilterOpen","setFilterOpen","toggleColumnFilter","isRowEditOverlyOpen","setIsRowEditOverlyOpen","editedRowData","setEditedRowData","rowValue","isRowDeleteOverlyOpen","setIsRowDeleteOverlyOpen","deletedRowData","setDeletedRowData","setGroupSortOverLay","setManageColumnOpen","newColumnStructure","remarksColumn","setIsExportOverlayOpen","defaultColumn","useMemo","Filter","useTable","rowsToFilter","columnsToFilter","autoResetFilters","autoResetGlobalFilter","autoResetSortBy","autoResetExpanded","autoResetSelectedRows","useFilters","useGlobalFilter","useSortBy","useExpanded","useRowSelect","useFlexLayout","useResizeColumns","hooks","allColumns","hookColumns","disableResizing","minWidth","width","maxWidth","getToggleAllRowsSelectedProps","headerSelectProps","style","getToggleRowSelectedProps","getToggleRowExpandedProps","isExpanded","getTableProps","getTableBodyProps","headerGroups","prepareRow","selectedFlatRows","state","bulkSelector","resetAfterIndex","RenderRow","useCallback","getRowProps","cells","getCellProps","render","RowEditOverlay","height","headerGroup","getHeaderGroupProps","headers","getHeaderProps","getSortByToggleProps","isSorted","isSortedDesc","canResize","getResizerProps","onItemsRendered","List","Grid","columnToExpand","fetchData","updateRowData","deleteRowData","window","innerWidth","setHasNextPage","setIsNextPageLoading","isLoading","setIsLoading","items","setItems","groupSortOptions","setGroupSortOptions","isValuePresent","rowAccessorValue","dataAccessor","updatedRow","old","entries","processedColumns","gridColumns","renderExpandedContent","returnValue","calculateDefaultRowHeight","rowHeight","columnWithMaxWidth","a","b","totalFlexWidth","textLength","Math","ceil","widthVariable","compareValues","compareOrder","v1","v2","getSortedData","originalData","x","y","compareResult","newResult","args","newIndex","then","marginTop"],"mappings":"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"}